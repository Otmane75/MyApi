#include <string.h>

void split(const char *str, const char *delimiters, char **tokens, int maxTokens) {
    char *token;
    int tokenIndex = 0;

    // Copie de la chaîne originale dans une variable modifiable
    char *strCopy = strdup(str);

    // Extraction du premier token
    token = strtok(strCopy, delimiters);

    // Tant qu'il y a des tokens et que le nombre maximum n'est pas atteint
    while (token != NULL && tokenIndex < maxTokens) {
        tokens[tokenIndex] = token;
        tokenIndex++;

        // Extraction du prochain token
        token = strtok(NULL, delimiters);
    }

    // Libération de la mémoire allouée pour la copie de la chaîne
    free(strCopy);
}

-----------------------------------------------------------------------------------------------
#include <stdio.h>

#define MAX_TOKENS 10

int main() {
    char str[] = "Hello,World,How,Are,You";
    char delimiters[] = ",";
    char *tokens[MAX_TOKENS];

    split(str, delimiters, tokens, MAX_TOKENS);

    for (int i = 0; i < MAX_TOKENS && tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
    }

    return 0;
}


------------------------------------------------
anyio==3.7.1
certifi==2023.5.7
charset-normalizer==3.2.0
colorama==0.4.6
copier==8.1.0
decorator==5.1.1
dunamai==1.18.0
exceptiongroup==1.1.2
flet==0.8.2
flet-core==0.8.2
flet-runtime==0.8.2
funcy==2.0
greenlet==2.0.2
h11==0.14.0
httpcore==0.17.3
httpx==0.24.1
idna==3.4
Jinja2==3.1.2
jinja2-ansible-filters==1.3.2
MarkupSafe==2.1.3
oauthlib==3.2.2
packaging==23.1
pathspec==0.11.1
plumbum==1.8.2
prompt-toolkit==3.0.39
pycryptodome==3.18.0
pydantic==1.10.11
Pygments==2.15.1
pypng==0.20220715.0
pyserial==3.5
pywin32==306
PyYAML==6.0
pyyaml-include==1.3.1
qrcode==7.4.2
questionary==1.10.0
repath==0.9.0
requests==2.31.0
six==1.16.0
sniffio==1.3.0
SQLAlchemy==2.0.19
typing-extensions==4.7.1
urllib3==2.0.3
watchdog==3.0.0
close_serial_ports()
wcwidth==0.2.6
websocket-client==1.6.1
websockets==11.0.3
----------------------------------------------------------------------
import os
import psutil

# Fonction pour terminer les activités de PySerial
def close_serial_ports():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name'])
            if 'python' in pinfo['name'].lower() and 'serial' in pinfo['name'].lower():
                os.kill(pinfo['pid'], 9)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Exemple d'utilisation
# Ferme toutes les connexions série avant d'utiliser une fonction spécifique

# Ferme toutes les connexions série en cours
close_serial_ports()

# Utilisez maintenant la fonction spécifique
# ... votre code ici ...


------------------------------------------------------------------------------------------
Clé privée :
{0xbe,0x84,0xff,0xa5,0x77,0x4,0xc6,0xfc,0x19,0x53,0x46,0xaf,0x61,0x9d,0x43,0x70,0x10,0x3a,0x73,0x3e,0xd8,0x68,0xd0,0x4a,0x5c,0xa4,0xb1,0xb2,0xc5,0x0,0x16,0x2a}
Clé publique :
{0x3a,0x6e,0xb6,0x78,0xb5,0xd5,0x3,0xa5,0x73,0xfb,0x96,0x22,0x94,0x5a,0x55,0x3f,0xe1,0x83,0x2f,0xc7,0x46,0xd0,0x38,0x15,0x9c,0xb7,0xde,0x61,0xd3,0x3f,0x28,0xdc,e8,0xf3,0xcf,0x66,0x31,0x2c,0x42,0xe9,0x9f,0x3d,0x6c,0x7d,0x24,0xc4,0x88,0x46,0x92,0x2,0xa1,0xbd,0x3b,0x53,0x7c,0x58,0x58,0x1a,0xbb,0x68,0xc,0xf4,0x9f,0x93}
-------------------------------------------------------------
Clé privée (hex) : 98a87b676185f120a909f832516bed5f1c2cb8832a64b4a4d9caad7744153fe4
Clé publique (hex) : 024260fd8af89f8d2c916c03243bb7e4177244b55b758fc379332db0cb0e5faba3
Clé privée RSA : {0x98, 0xa8, 0x7b, 0x67, 0x61, 0x85, 0xf1, 0x20, 0xa9, 0x09, 0xf8, 0x32, 0x51, 0x6b, 0xed, 0x5f, 0x1c, 0x2c, 0xb8, 
0x83, 0x2a, 0x64, 0xb4, 0xa4, 0xd9, 0xca, 0xad, 0x77, 0x44, 0x15, 0x3f, 0xe4}
Clé privée RSA : {0x02, 0x42, 0x60, 0xfd, 0x8a, 0xf8, 0x9f, 0x8d, 0x2c, 0x91, 0x6c, 0x03, 0x24, 0x3b, 0xb7, 0xe4, 0x17, 0x72, 0x44, 
0xb5, 0x5b, 0x75, 0x8f, 0xc3, 0x79, 0x33, 0x2d, 0xb0, 0xcb, 0x0e, 0x5f, 0xab, 0xa3}
------------------------------------------------------------------------------------------------------------------------------
Clé privée RSA : {0xb4, 0xde, 0xdf, 0x79, 0x41, 0x5a, 0x01, 0x94, 0x96, 0x0c, 0x0f, 0xd0, 0xbe, 0x64, 0x35, 0xbf, 0xbe, 0xba, 0x5a, 
0xcf, 0xa7, 0x34, 0xae, 0xe7, 0xcc, 0xac, 0x06, 0xe8, 0x2b, 0x5b, 0x43, 0xbe}
Clé privée RSA : {0x04, 0x04, 0x4c, 0x45, 0x18, 0x62, 0x91, 0x77, 0xc7, 0xcd, 0x63, 0x94, 0x95, 0xfc, 0xcb, 0x45, 0x1a, 0x9d, 0xe7, 
0x23, 0xaa, 0xb8, 0xa4, 0x4f, 0xdd, 0x18, 0xbf, 0x75, 0x54, 0x72, 0x67, 0x4b, 0xe0, 0x6e, 0x1c, 0x86, 0xd9, 0xb0, 0xb7, 0xd4, 0x6e, 
0xa4, 0xec, 0xcc, 0x7b, 0x73, 0xd4, 0xeb, 0xec, 0x0d, 0x17, 0xf8, 0x83, 0xc2, 0x66, 0x8f, 0x5c, 0x92, 0xa2, 0x18, 0x60, 0xa5, 0x55, 
0xbf, 0x51, 0x28}
---------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec  
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
import base64

# Génération de la paire de clés 
private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key = private_key.public_key()

# Chargement du certificat ECC  
with open("certificate.pem", "rb") as f:
    certificate = x509.load_pem_x509_certificate(f.read(), default_backend())

# Récupération de la clé publique à partir du certificat
public_key = certificate.public_key() 

# Chiffrement du message
plaintext = b"Mon message secret"
ciphertext = public_key.encrypt(
    plaintext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Encodage en base64 pour le stockage/transport
ciphertext_b64 = base64.b64encode(ciphertext)

print(ciphertext_b64)

---------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    cipher_text = public_key.encrypt(
        message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return cipher_text

def decrypt_message(cipher_text, private_key):
    plain_text = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plain_text.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)

---------------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    # Générer une clé de chiffrement symétrique à partir de la clé publique
    shared_key = public_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer une clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Initialiser un vecteur d'initialisation aléatoire pour le mode CBC
    iv = os.urandom(16)

    # Créer l'objet de chiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Chiffrer le message
    padded_data = encryptor.update(message) + encryptor.finalize()

    # Retourner le vecteur d'initialisation et les données chiffrées pour le déchiffrement ultérieur
    return iv + padded_data

def decrypt_message(cipher_text, private_key):
    # Extraire le vecteur d'initialisation du texte chiffré
    iv = cipher_text[:16]
    cipher_text = cipher_text[16:]

    # Générer la clé de chiffrement symétrique à partir de la clé privée
    shared_key = private_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer la clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Créer l'objet de déchiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Déchiffrer le message
    decrypted_data = decryptor.update(cipher_text) + decryptor.finalize()

    return decrypted_data.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)
----------------------------------------------------------------------------------------
{0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 
0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc1, 0x75, 0xca, 0x40, 0xe8, 0xa3, 0xbd, 0x60, 0x88, 0xd0, 0xbc, 0xb7, 0xb4, 0x89, 0x4b, 0x09, 0x93, 0x38, 0xa1, 0xdd, 0xbb, 0x9e, 0xfa, 0xe8, 0xc5, 0x21, 0x5a, 0x1a, 0x4e, 0x1b, 0xd9, 0xc5, 0x8a, 0xcb, 0xd7, 0x26, 0xf6, 0x75, 0xbc, 0xd8, 0xf6, 0x3d, 0xcd, 0x6d, 0x01, 0x99, 0x52, 0x4b, 0x4d, 0x01, 0xad, 0xf9, 0x78, 0x34, 0xcb, 0x8e, 0x60, 0xfd, 0x13, 0x92, 0x07, 0x50, 0x24, 0x9f, 0xdb, 0x7f, 0xe0, 0x7a, 0x6a, 0x20, 0xf8, 0x79, 0xb4, 0x9e, 0x75, 0x92, 0xea, 0x45, 0xc5, 0x3b, 0xa0, 0x99, 0x4b, 0x84, 0x8f, 0x5d, 0xeb, 0x90, 0x74, 0x63, 0xcb, 0x0b, 0x89, 0x66, 0x1d, 0x25, 0x74, 0xcb, 0x6a, 0xf7, 0x37, 0xab, 0x3c, 0xc6, 0xfb, 0x82, 0x68, 0x68, 0xeb, 0x74, 0x38, 0x5b, 0xfd, 0x1d, 0x3b, 0xb6, 0xc9, 0x04, 0x93, 0x34, 0xca, 0x91, 0x25, 0x0d, 0x66, 0x31, 0x0e, 0xcf, 0x52, 0x03, 0x63, 0x54, 0x0a, 0x30, 0xef, 0x81, 0x70, 0x8a, 
0x03, 0xa8, 0xc8, 0xd7, 0x35, 0x21, 0x5f, 0x7a, 0x72, 0x5f, 0x37, 0x87, 0x36, 0xe5, 0x20, 0x83, 0x88, 0xbe, 0xc2, 0x61, 0x4b, 0x24, 0xf7, 0xb0, 0x11, 0x9c, 0xa0, 0x99, 0x61, 0xb7, 0xd0, 0x9f, 0x45, 0xb1, 0x21, 0x2a, 0xe0, 0x27, 0xfa, 0xc6, 0x9c, 0xc7, 0x13, 0xc5, 0xff, 0x65, 0x28, 0x10, 0x9d, 0xb0, 0x10, 0xe7, 0xcb, 0xb7, 0xbc, 0x52, 0xa7, 0xfe, 0x1a, 0x32, 0x96, 0xc7, 0x3d, 0xaf, 0x1b, 0xa4, 0x76, 0x70, 0xee, 0x1a, 0xf9, 0xb7, 0x77, 0xd3, 0xb6, 0x69, 0x61, 0x8a, 0x15, 0x78, 0x77, 0x3d, 0x75, 0xc4, 0xdb, 0xd3, 0xdc, 0x61, 0x18, 0x7c, 0xc9, 0xb2, 0x8d, 0x92, 0xdb, 0x2d, 0x67, 0x8a, 0xba, 0x8d, 0x25, 0xfd, 0xe2, 0x53, 0xb8, 0x94, 0xae, 0x47, 0xaf, 0x21, 0xd6, 0xf4, 0x0b, 0x97, 0x07, 0x52, 0x0f, 0xa1, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x01, 0xd8, 0x4e, 0xba, 0x79, 0xbd, 0x7e, 0x03, 0xda, 0xaa, 0x2a, 0xf2, 0x91, 0x8d, 0x31, 0xa3, 0x00, 0xbd, 0x6c, 0x85, 0xc1, 0xd1, 0x4d, 0x51, 
0x44, 0xf8, 0x01, 0x74, 0xf8, 0xc3, 0xb9, 0x3a, 0xf2, 0x0c, 0xe9, 0x9b, 0x5c, 0x84, 0x58, 0xed, 0xb4, 0xc3, 0x78, 0x1f, 0x0f, 0x01, 0xd8, 0x50, 0x11, 0x86, 0xef, 0x92, 0xce, 0x7b, 0xaa, 0x69, 0x4c, 0x31, 0x7d, 0xab, 0x49, 0xd8, 0x90, 0xd0, 0xd9, 0x76, 0x09, 0xbd, 0x01, 0x20, 0x19, 0x5e, 0x87, 0xc3, 0x6f, 0x19, 0x9c, 0x94, 0x57, 0xc2, 0x2e, 0xd0, 0xe7, 0x70, 0x77, 0x31, 0x8d, 0x1a, 0x8e, 0x91, 0x99, 0x11, 0x1e, 0x19, 0x54, 0x33, 0xd4, 0x3e, 0x50, 0x61, 0xd5, 0x2d, 0x13, 0xe2, 0x4d, 0xe9, 0xbb, 0x77, 0x2c, 0xaf, 0xaa, 0x0d, 0xee, 0x87, 0x05, 0xd7, 0xc3, 0x69, 0x00, 0xc2, 0x63, 0x20, 0x29, 0x3b, 0x4c, 0x7b, 0x31, 0x49, 0xf2, 0x9c, 0xb8, 0xd8, 0x6d, 0xa1, 0xe8, 0x6c, 0x08, 0xc6, 0xcf, 0x32, 0x0a, 0xb0, 0x38, 0xcf, 0x83, 0xa7, 0x71, 0xdd, 0x11, 0x18, 0xd1, 0xca, 0x00, 0xfc, 0x6e, 0xce, 0xc7, 0xea, 0x83, 0xb1, 0x04, 0xa5, 0x61, 0xfe, 0x4b, 0x1a, 0x92, 0xdf, 0xe8, 0x05, 0x61, 0xff, 0x61, 0x4b, 0x43, 
0xbd, 0xdc, 0xc7, 0xe9, 0x67, 0x79, 0x69, 0xb1, 0x4e, 0xa8, 0xfd, 0xde, 0xaa, 0x5a, 0x26, 0x5e, 0x52, 0xe8, 0xcb, 0xa2, 0xdb, 0x84, 0xb8, 0xbf, 0x04, 0xcf, 0xc3, 0x54, 0xa6, 0xcb, 0x57, 0xca, 0x0a, 0x98, 0xf9, 0x23, 0x33, 0x37, 0x36, 0xa8, 0xcb, 0x0e, 0x33, 0x30, 0x03, 0x26, 0x1f, 0xfd, 0xa9, 0xfb, 0x8e, 0xee, 0xd6, 0x72, 0x96, 0x0c, 0xc5, 0x5c, 0xa2, 0xbe, 0x10, 0x0c, 0x09, 0x17, 0x64, 0xac, 0x3a, 0x35, 0x64, 0x83, 0x26, 0x67, 0x6b, 0x77, 0x57, 0x13, 0xf7, 0x53, 0xcd, 0xf6, 0x45, 0x02, 0x81, 0x81, 0x00, 0xd1, 0xb5, 0x9a, 0xcc, 0xcc, 0x4c, 0x46, 0x49, 0xa2, 0x7f, 0x3d, 0xc5, 0x61, 0xb0, 0x2a, 0x35, 0x32, 0x2c, 0x31, 0x39, 0x36, 0x4b, 0x9e, 0xd5, 0x24, 0xef, 0xf3, 0xd6, 0x41, 0x78, 0xed, 0x1f, 0x43, 0xcc, 0xd7, 0x18, 0xf9, 0x46, 0xe8, 0x11, 0x35, 0x8e, 0x94, 0x10, 0x4c, 0x63, 0x19, 0x8d, 0x53, 0x78, 0x94, 0xa0, 0xd3, 0x9f, 0xad, 0x9f, 0x17, 0x98, 0x7f, 0x10, 0x56, 0x52, 0xc6, 0xcf, 0x3a, 0x96, 
0x82, 0x37, 0xea, 0x0f, 0xe5, 0xb5, 0x5d, 0x56, 0x6c, 0x82, 0x39, 0x3e, 0x1f, 0x33, 0x16, 0x48, 0x70, 0xde, 0x4b, 0x5f, 0xa1, 0x42, 0xf1, 0x44, 0x5c, 0xfa, 0x1d, 0xa5, 0x53, 0xe6, 0x72, 0x0b, 0xb0, 0x29, 0x0d, 0xe0, 0x8e, 0xdf, 0xb0, 0xb6, 0x3d, 0x31, 0x87, 0x62, 0x9d, 0xa5, 0xac, 0x49, 0xe7, 0xde, 0x5d, 0x47, 0x7f, 0x05, 0x70, 0x91, 0x33, 0xcc, 0x52, 0x45, 0x51, 0x67, 0x02, 0x81, 0x81, 0x00, 0xec, 0x29, 0xf5, 0xee, 0xac, 0xc1, 0xd2, 0x9c, 0x7c, 0x2f, 0xa6, 0x00, 0x1f, 0x5d, 0x50, 0xa9, 0xa1, 0xa6, 0x1b, 0x41, 0x76, 0xd5, 0xa6, 0x78, 0x85, 0xd7, 0xa8, 0xe4, 0x1c, 0x6f, 0x49, 0x52, 0xfa, 0x95, 0x8d, 0x62, 0xd8, 0x87, 0x52, 0x8a, 0xcb, 0xb0, 0x6e, 0x24, 0x31, 0x7e, 0xda, 0x36, 0x7f, 0x41, 0xab, 0x03, 0x19, 0x94, 0x34, 0xf5, 0x0b, 0xbf, 0x1e, 0xf1, 0x50, 0x9c, 0x32, 0xab, 0x6d, 0x70, 0xec, 0x5d, 0xe9, 0x93, 0x70, 0x1f, 0xe4, 0x62, 0x58, 0x3f, 0x52, 0xab, 0x12, 0xbd, 0xb1, 0x92, 0x2e, 0x8b, 0x92, 
0x69, 0x2f, 0x65, 0x74, 0x62, 0xb5, 0xc5, 0xf3, 0x4d, 0xe6, 0xf7, 0x27, 0x9a, 0x77, 0xbc, 0x6a, 0xec, 0xe1, 0xdb, 0xf5, 0x95, 0x99, 0x6f, 0xb0, 0x09, 0x96, 0xc6, 0xf5, 0x5e, 0xc2, 0x14, 0xb6, 0x34, 0xca, 0xfe, 0x30, 0x18, 0x94, 0x73, 0x8e, 0x6d, 0xc9, 0xb7, 0x02, 0x81, 0x81, 0x00, 0xd1, 0x1e, 0xe0, 0xdc, 0x43, 0x09, 0xf8, 0xb9, 0x6b, 0x22, 0xa9, 0xad, 0x8f, 0xe9, 0xc5, 0x5d, 0x40, 0xc8, 0x12, 0xd9, 0xf3, 0x8b, 0xdb, 0x3a, 0xbf, 0x57, 0xcc, 0xf7, 0x26, 0x58, 0xf9, 0x54, 0xc9, 0x1e, 0x96, 0x8c, 0x9f, 0xe0, 0x16, 0x81, 0x3a, 0xc0, 0x10, 0x64, 0x64, 0x58, 0x1a, 0x5d, 0xf5, 0x13, 0xf4, 0x5a, 0xa0, 0x4d, 0xc6, 0x2c, 0x34, 0xb2, 0x6c, 0x5b, 0x15, 0x49, 0xfc, 0x59, 0x20, 0x1a, 0x80, 0x86, 0x53, 0x91, 0x40, 0xc6, 0xe7, 0xe9, 0xcb, 0xd0, 0xdc, 0x56, 0x57, 0x74, 0x71, 0x4f, 0x11, 0xc6, 0x8a, 0xb1, 0x35, 0x35, 0x75, 0x34, 0x6f, 0xe7, 0x36, 0xf2, 0xeb, 0xc4, 0x8c, 0x8b, 0x9d, 0x42, 0x83, 0x45, 0x20, 0x14, 
0x6e, 0xba, 0x7c, 0x31, 0x4c, 0xc9, 0x89, 0x5d, 0x71, 0x7e, 0x4d, 0x8b, 0x4f, 0xc7, 0x81, 0x22, 0x22, 0x8b, 0x99, 0x74, 0xb1, 0xc1, 0xd0, 0x17, 0x02, 0x81, 0x80, 0x6f, 0xad, 0x3c, 0x05, 0xfc, 0x9d, 0xbf, 0x49, 0x8e, 0x94, 0x3d, 0xac, 0x8b, 0x28, 0x66, 0x6f, 0x80, 0xe8, 0x7a, 0xb5, 0x0f, 0x4b, 0xe2, 0xe7, 0xd5, 0x6a, 0xf1, 0x0b, 0xc5, 0xc2, 0x7e, 0x6b, 0x05, 0xe2, 0x58, 0xb4, 0xa8, 0x6d, 0xfd, 0x83, 0x72, 0xe4, 0xe0, 0x80, 0xaf, 0x03, 0x2c, 0x8f, 0x5e, 0xc8, 0x1f, 0xe5, 0x5c, 0x60, 0x30, 0x56, 0xbc, 0x92, 0x49, 0x40, 0x95, 0xfc, 0xf7, 0x1d, 0x07, 0xa8, 0xc1, 0xad, 0x7b, 0x39, 0xe4, 0x68, 0xc0, 0x68, 0x1d, 0x10, 0xfc, 0xb7, 0xb7, 0x2a, 0x0a, 0xe1, 0x74, 0xaf, 0x3d, 0xb2, 0x0d, 0xde, 0xad, 0x15, 0xcc, 0x9d, 0x69, 0xfb, 0xa9, 0xbf, 0xb0, 0x73, 0xa4, 0x31, 0x6e, 0x62, 0xcc, 0x3f, 0x66, 0xb7, 0xb2, 0x92, 0x15, 0x2d, 0xc3, 0xa6, 0x1b, 0xfc, 0x0e, 0x4d, 0x1b, 0x08, 0x86, 0x01, 0x83, 0x9e, 0xeb, 0xfc, 
0x65, 0x1a, 0xd7, 0xab, 0x02, 0x81, 0x80, 0x17, 0xdf, 0xa0, 0xe0, 0xc0, 0xa0, 0x1b, 0xaa, 0x35, 0x64, 0x7c, 0x4c, 0xc0, 0x36, 0xaa, 0xe8, 0xf3, 0x67, 0xfb, 0x01, 0xbb, 0x6d, 0x9a, 0xaa, 0xbc, 0x33, 0x46, 0x12, 0xcb, 0x26, 0xf9, 0x01, 0x63, 0x99, 0x1f, 0x3d, 0x60, 0x68, 0x9b, 0x8a, 0x4a, 0x7f, 0xb2, 0x78, 0x7a, 0x04, 0x9f, 0xea, 0xd8, 0x21, 0xa4, 0xbd, 0x81, 0x1b, 0x68, 0x79, 0x2d, 0xb7, 0x7a, 0xae, 0xf6, 0x00, 0x1b, 0xea, 0xf5, 0xac, 0xde, 0xf3, 0x50, 0xf6, 0xa1, 0x9b, 0x2f, 0xdf, 0x9e, 0xed, 0x80, 0x84, 0x28, 0x6c, 0xdf, 0x21, 0x13, 0xfd, 0x1a, 0x94, 0x1a, 0x05, 0xdf, 0xac, 0xac, 0x8f, 0xed, 0x23, 0xd4, 0x3b, 0x52, 0x90, 0x39, 0xa9, 0xae, 0x66, 0x40, 0x1a, 0xec, 0x6d, 0xcd, 0xa6, 0x6c, 0x5a, 0xd6, 0x20, 0xb9, 0xf0, 0x7d, 0x6d, 0xc5, 0x1f, 0xa5, 0x80, 0xa5, 0x31, 0xff, 0xf3, 0x4d, 0xe3, 0x05, 0x4f}longeur: 1217
{0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 
0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc1, 0x75, 0xca, 0x40, 0xe8, 0xa3, 0xbd, 0x60, 0x88, 0xd0, 0xbc, 0xb7, 0xb4, 0x89, 0x4b, 0x09, 0x93, 0x38, 0xa1, 0xdd, 0xbb, 0x9e, 0xfa, 0xe8, 0xc5, 0x21, 0x5a, 0x1a, 0x4e, 0x1b, 0xd9, 0xc5, 0x8a, 0xcb, 0xd7, 0x26, 0xf6, 0x75, 0xbc, 0xd8, 0xf6, 0x3d, 0xcd, 0x6d, 0x01, 0x99, 0x52, 0x4b, 0x4d, 0x01, 0xad, 0xf9, 0x78, 0x34, 0xcb, 0x8e, 0x60, 0xfd, 0x13, 0x92, 0x07, 0x50, 0x24, 0x9f, 0xdb, 0x7f, 0xe0, 0x7a, 0x6a, 0x20, 0xf8, 0x79, 0xb4, 0x9e, 0x75, 0x92, 0xea, 0x45, 0xc5, 0x3b, 0xa0, 0x99, 0x4b, 0x84, 0x8f, 0x5d, 0xeb, 0x90, 0x74, 0x63, 0xcb, 0x0b, 0x89, 0x66, 0x1d, 0x25, 0x74, 0xcb, 0x6a, 0xf7, 0x37, 0xab, 0x3c, 0xc6, 0xfb, 0x82, 0x68, 0x68, 0xeb, 0x74, 0x38, 0x5b, 0xfd, 0x1d, 0x3b, 0xb6, 0xc9, 0x04, 0x93, 0x34, 0xca, 0x91, 0x25, 0x0d, 0x66, 0x31, 0x0e, 0xcf, 0x52, 0x03, 0x63, 0x54, 0x0a, 0x30, 0xef, 0x81, 0x70, 0x8a, 0x03, 0xa8, 0xc8, 0xd7, 0x35, 
0x21, 0x5f, 0x7a, 0x72, 0x5f, 0x37, 0x87, 0x36, 0xe5, 0x20, 0x83, 0x88, 0xbe, 0xc2, 0x61, 0x4b, 0x24, 0xf7, 0xb0, 0x11, 0x9c, 0xa0, 0x99, 0x61, 0xb7, 0xd0, 0x9f, 0x45, 0xb1, 0x21, 0x2a, 0xe0, 0x27, 0xfa, 0xc6, 0x9c, 0xc7, 0x13, 0xc5, 0xff, 0x65, 0x28, 0x10, 0x9d, 0xb0, 0x10, 0xe7, 0xcb, 0xb7, 0xbc, 0x52, 0xa7, 0xfe, 0x1a, 0x32, 0x96, 0xc7, 0x3d, 0xaf, 0x1b, 0xa4, 0x76, 0x70, 0xee, 0x1a, 0xf9, 0xb7, 0x77, 0xd3, 0xb6, 0x69, 0x61, 0x8a, 0x15, 0x78, 0x77, 0x3d, 0x75, 0xc4, 0xdb, 0xd3, 0xdc, 0x61, 0x18, 0x7c, 0xc9, 0xb2, 0x8d, 0x92, 0xdb, 0x2d, 0x67, 0x8a, 0xba, 0x8d, 0x25, 0xfd, 0xe2, 0x53, 0xb8, 0x94, 0xae, 0x47, 0xaf, 0x21, 0xd6, 0xf4, 0x0b, 0x97, 0x07, 0x52, 0x0f, 0xa1, 0x02, 0x03, 0x01, 0x00, 0x01}longeur: 294
------------------------------------------------------------------------------------------------------------------------------
Clé privée (hexadécimal) :
 308204bd020100300d06092a864886f70d0101010500048204a7308204a30201000282010100ae00541546b473a29bea32bd06cfd0a3b519aebaa532489ac87cd1312a8db4b78b2f97884e7339d7d424a4e1bbe964559891e84569aced3d7a972177f15c44608e6e3e77c3bedd3a47cb8ba5c39c216c56dbeddde99d79a69420b4049039b474b0f5fffecce24d7baf07ab63349cd4ce049640170d498563835f3cd5a00ad916f261d65cf818e7b089f48e9fdafd6306c594f7fc4d3a9db888c3d8466fbd930d91134bf7ace55b1ad721dc9bdb65287333ad89a5c957cb437b3fef73b5c021a6831ea3af3721ee85f823f565b4a8c09422dc290b4b6aedb27db2f91ccd9b6c92e7c0bcdce9be2534f597907426d7217f88798d2c0bf7ea9e28ea281cbcd1d5f302030100010282010011d30bca002bb51ac7c1068091a591386bf15d1256a0df8a27968db16d2c0602b559e33a7ddad4e6949f4a5aab6ebdadfd0a99521f00ad6eda538804aaef6a3bbfeb702fc198183e83a348c36ad5e020a2873607410ab62f07c68fda55d1eb77f6b6c48a1bffe4b3125b85458cdab1fc06c1438079067a8916a8976944d347a8a4525db80a0c3725bc72d95594399a93853d88e3600d619f3bba9336403be6b3082d0dd55db8cfb0b8dba0b084078dd0bdacb6d7cc02f36ab327452ba9600c4b1fbf96d84d7d85feb16e2c363bf1034e2dec92f5a4e9e36348e37f400b26918c236cdb16fbb7f8dd03408bd1b123964b1d65d4461c166f82247d1569b4d597b902818100dd677b3f38b1cb9bea4927372d5f89c394f1e26d97db48a1befb82f35c155ab64b9ac511d0a32bd8561b08a7b28d1eae5828d04c9a4ae722ca6ba73b39db725e5853f8e6d5720bc4e694acb638ece54e8de6ce4b79565e83f241d9e9abd67cebf5604914ad085bec89d7ceb76bdc055c5d62af124d00d697f6382e3821369f0902818100c930a78e3f0f352c605910deec738c75aa333ce0070aa74265e23a2e5b8ca7318b5d1c0e02eaf110a4f8d0054aa536c5cfa93c1f3f6169e8939f04ac1469ee53a992a5c0e0375003759f9e3d0b017ed50b93e98bb7c977358ceb1509359cdeec5e0b04455b1f46910a03a11649080eef9b3cef9b04e5d1dcac1969ccba4a901b02818017cf7129b3672b867103bcfbea1d442b8c7116f0c24c0adb9a366236d9c8522118b064512e26de283dda5a6bee7fceb4e13642707a8763a41230d1a344ed9cb718b8af23e40087d37d18b01a48b4f154295e9100fce394f68baf19484ffa9924a716dbc52576a8ac1f86ddec4be5358e615ca3874c50b2c354ef65c9138954410281803bdf25cdd8083f8bb0347127d5f7e0f1d72f9e4b10ed63af07c0d60d9ba2f4d272a5c7c687a9c10971feb5710db0b2e7151048db07b286a0f6e558af98f7993bfe77acaa044f919925f4d55357261fc768c5a0b7ba7ed2e1f5c8b39ee4fc84fe9451f4f86ad098e06ab97fc3b1021be7c42bd3262fc3f0bb19e00a3329b12cc702818100be55a7fd4bad2958849bf07417ce63d9c625b8150ed173b9fbaba12b55b1b83689b457b0d46a57390a427f1d5dbdd486f974100db46f31e49d5c879b436e163859cf4a7a9cb0a600e96ebb24c290b9859e5f94b0dbaa644d0169db0b6ba5fd2ce24580c08f8775ddf6d318cbd8c37cc0703d96c1e2339a0c8393b6ad39b5d7c6

Clé publique (hexadécimal) :
 30820122300d06092a864886f70d01010105000382010f003082010a0282010100ae00541546b473a29bea32bd06cfd0a3b519aebaa532489ac87cd1312a8db4b78b2f97884e7339d7d424a4e1bbe964559891e84569aced3d7a972177f15c44608e6e3e77c3bedd3a47cb8ba5c39c216c56dbeddde99d79a69420b4049039b474b0f5fffecce24d7baf07ab63349cd4ce049640170d498563835f3cd5a00ad916f261d65cf818e7b089f48e9fdafd6306c594f7fc4d3a9db888c3d8466fbd930d91134bf7ace55b1ad721dc9bdb65287333ad89a5c957cb437b3fef73b5c021a6831ea3af3721ee85f823f565b4a8c09422dc290b4b6aedb27db2f91ccd9b6c92e7c0bcdce9be2534f597907426d7217f88798d2c0bf7ea9e28ea281cbcd1d5f30203010001
{0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xae, 0x00, 0x54, 0x15, 0x46, 0xb4, 0x73, 0xa2, 0x9b, 0xea, 0x32, 0xbd, 0x06, 0xcf, 0xd0, 0xa3, 0xb5, 0x19, 0xae, 0xba, 0xa5, 0x32, 0x48, 0x9a, 0xc8, 0x7c, 0xd1, 0x31, 0x2a, 0x8d, 0xb4, 0xb7, 0x8b, 0x2f, 0x97, 0x88, 0x4e, 0x73, 0x39, 0xd7, 0xd4, 0x24, 0xa4, 0xe1, 0xbb, 0xe9, 0x64, 0x55, 0x98, 0x91, 0xe8, 0x45, 0x69, 0xac, 0xed, 0x3d, 0x7a, 0x97, 0x21, 0x77, 0xf1, 0x5c, 0x44, 0x60, 0x8e, 0x6e, 0x3e, 0x77, 0xc3, 0xbe, 0xdd, 0x3a, 0x47, 0xcb, 0x8b, 0xa5, 0xc3, 0x9c, 0x21, 0x6c, 0x56, 0xdb, 0xed, 0xdd, 0xe9, 0x9d, 0x79, 0xa6, 0x94, 0x20, 0xb4, 0x04, 0x90, 0x39, 0xb4, 0x74, 0xb0, 0xf5, 0xff, 0xfe, 0xcc, 0xe2, 0x4d, 0x7b, 0xaf, 0x07, 0xab, 0x63, 0x34, 0x9c, 0xd4, 0xce, 0x04, 0x96, 0x40, 0x17, 0x0d, 0x49, 0x85, 0x63, 0x83, 0x5f, 0x3c, 0xd5, 0xa0, 0x0a, 0xd9, 0x16, 0xf2, 0x61, 0xd6, 0x5c, 0xf8, 0x18, 0xe7, 0xb0, 0x89, 0xf4, 0x8e, 0x9f, 0xda, 0xfd, 0x63, 0x06, 0xc5, 0x94, 0xf7, 0xfc, 0x4d, 0x3a, 0x9d, 0xb8, 0x88, 0xc3, 0xd8, 0x46, 0x6f, 0xbd, 0x93, 0x0d, 0x91, 0x13, 0x4b, 0xf7, 0xac, 0xe5, 0x5b, 0x1a, 0xd7, 0x21, 0xdc, 0x9b, 0xdb, 0x65, 0x28, 0x73, 0x33, 0xad, 0x89, 0xa5, 0xc9, 0x57, 0xcb, 0x43, 0x7b, 0x3f, 0xef, 0x73, 0xb5, 0xc0, 0x21, 0xa6, 0x83, 0x1e, 0xa3, 0xaf, 0x37, 0x21, 0xee, 0x85, 0xf8, 0x23, 0xf5, 0x65, 0xb4, 0xa8, 0xc0, 0x94, 0x22, 0xdc, 0x29, 0x0b, 0x4b, 0x6a, 0xed, 0xb2, 0x7d, 0xb2, 0xf9, 0x1c, 0xcd, 0x9b, 0x6c, 0x92, 0xe7, 0xc0, 0xbc, 0xdc, 0xe9, 0xbe, 0x25, 0x34, 0xf5, 0x97, 0x90, 0x74, 0x26, 0xd7, 0x21, 0x7f, 0x88, 0x79, 0x8d, 0x2c, 0x0b, 0xf7, 0xea, 0x9e, 0x28, 0xea, 0x28, 0x1c, 0xbc, 0xd1, 0xd5, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x11, 0xd3, 0x0b, 0xca, 0x00, 0x2b, 0xb5, 0x1a, 0xc7, 0xc1, 0x06, 0x80, 0x91, 0xa5, 0x91, 0x38, 0x6b, 0xf1, 0x5d, 0x12, 0x56, 0xa0, 0xdf, 0x8a, 0x27, 0x96, 0x8d, 0xb1, 0x6d, 0x2c, 0x06, 0x02, 0xb5, 0x59, 0xe3, 0x3a, 0x7d, 0xda, 0xd4, 0xe6, 0x94, 0x9f, 0x4a, 0x5a, 0xab, 0x6e, 0xbd, 0xad, 0xfd, 0x0a, 0x99, 0x52, 0x1f, 0x00, 0xad, 0x6e, 0xda, 0x53, 0x88, 0x04, 0xaa, 0xef, 0x6a, 0x3b, 0xbf, 0xeb, 0x70, 0x2f, 0xc1, 0x98, 0x18, 0x3e, 0x83, 0xa3, 0x48, 0xc3, 0x6a, 0xd5, 0xe0, 0x20, 0xa2, 0x87, 0x36, 0x07, 0x41, 0x0a, 0xb6, 0x2f, 0x07, 0xc6, 0x8f, 0xda, 0x55, 0xd1, 0xeb, 0x77, 0xf6, 0xb6, 0xc4, 0x8a, 0x1b, 0xff, 0xe4, 0xb3, 0x12, 0x5b, 0x85, 0x45, 0x8c, 0xda, 0xb1, 0xfc, 0x06, 0xc1, 0x43, 0x80, 0x79, 0x06, 0x7a, 0x89, 0x16, 0xa8, 0x97, 0x69, 0x44, 0xd3, 0x47, 0xa8, 0xa4, 0x52, 0x5d, 0xb8, 0x0a, 0x0c, 0x37, 0x25, 0xbc, 0x72, 0xd9, 0x55, 0x94, 0x39, 0x9a, 0x93, 0x85, 0x3d, 0x88, 0xe3, 0x60, 0x0d, 0x61, 0x9f, 0x3b, 0xba, 0x93, 0x36, 0x40, 0x3b, 0xe6, 0xb3, 0x08, 0x2d, 0x0d, 0xd5, 0x5d, 0xb8, 0xcf, 0xb0, 0xb8, 0xdb, 0xa0, 0xb0, 0x84, 0x07, 0x8d, 0xd0, 0xbd, 0xac, 0xb6, 0xd7, 0xcc, 0x02, 0xf3, 0x6a, 0xb3, 0x27, 0x45, 0x2b, 0xa9, 0x60, 0x0c, 0x4b, 0x1f, 0xbf, 0x96, 0xd8, 0x4d, 0x7d, 0x85, 0xfe, 0xb1, 0x6e, 0x2c, 0x36, 0x3b, 0xf1, 0x03, 0x4e, 0x2d, 0xec, 0x92, 0xf5, 0xa4, 0xe9, 0xe3, 0x63, 0x48, 0xe3, 0x7f, 0x40, 0x0b, 0x26, 0x91, 0x8c, 0x23, 0x6c, 0xdb, 0x16, 0xfb, 0xb7, 0xf8, 0xdd, 0x03, 0x40, 0x8b, 0xd1, 0xb1, 0x23, 0x96, 0x4b, 0x1d, 0x65, 0xd4, 0x46, 0x1c, 0x16, 0x6f, 0x82, 0x24, 0x7d, 0x15, 0x69, 0xb4, 0xd5, 0x97, 0xb9, 0x02, 0x81, 0x81, 0x00, 0xdd, 0x67, 0x7b, 0x3f, 0x38, 0xb1, 0xcb, 0x9b, 0xea, 0x49, 0x27, 0x37, 0x2d, 0x5f, 0x89, 0xc3, 0x94, 0xf1, 0xe2, 0x6d, 0x97, 0xdb, 0x48, 0xa1, 0xbe, 0xfb, 0x82, 0xf3, 0x5c, 0x15, 0x5a, 0xb6, 0x4b, 0x9a, 0xc5, 0x11, 0xd0, 0xa3, 0x2b, 0xd8, 0x56, 0x1b, 0x08, 0xa7, 0xb2, 0x8d, 0x1e, 0xae, 0x58, 0x28, 0xd0, 0x4c, 0x9a, 0x4a, 0xe7, 0x22, 0xca, 0x6b, 0xa7, 0x3b, 0x39, 0xdb, 0x72, 0x5e, 0x58, 0x53, 0xf8, 0xe6, 0xd5, 0x72, 0x0b, 0xc4, 0xe6, 0x94, 0xac, 0xb6, 0x38, 0xec, 0xe5, 0x4e, 0x8d, 0xe6, 0xce, 0x4b, 0x79, 0x56, 0x5e, 0x83, 0xf2, 0x41, 0xd9, 0xe9, 0xab, 0xd6, 0x7c, 0xeb, 0xf5, 0x60, 0x49, 0x14, 0xad, 0x08, 0x5b, 0xec, 0x89, 0xd7, 0xce, 0xb7, 0x6b, 0xdc, 0x05, 0x5c, 0x5d, 0x62, 0xaf, 0x12, 0x4d, 0x00, 0xd6, 0x97, 0xf6, 0x38, 0x2e, 0x38, 0x21, 0x36, 0x9f, 0x09, 0x02, 0x81, 0x81, 0x00, 0xc9, 0x30, 0xa7, 0x8e, 0x3f, 0x0f, 0x35, 0x2c, 0x60, 0x59, 0x10, 0xde, 0xec, 0x73, 0x8c, 0x75, 0xaa, 0x33, 0x3c, 0xe0, 0x07, 0x0a, 0xa7, 0x42, 0x65, 0xe2, 0x3a, 0x2e, 0x5b, 0x8c, 0xa7, 0x31, 0x8b, 0x5d, 0x1c, 0x0e, 0x02, 0xea, 0xf1, 0x10, 0xa4, 0xf8, 0xd0, 0x05, 0x4a, 0xa5, 0x36, 0xc5, 0xcf, 0xa9, 0x3c, 0x1f, 0x3f, 0x61, 0x69, 0xe8, 0x93, 0x9f, 0x04, 0xac, 0x14, 0x69, 0xee, 0x53, 0xa9, 0x92, 0xa5, 0xc0, 0xe0, 0x37, 0x50, 0x03, 0x75, 0x9f, 0x9e, 0x3d, 0x0b, 0x01, 0x7e, 0xd5, 0x0b, 0x93, 0xe9, 0x8b, 0xb7, 0xc9, 0x77, 0x35, 0x8c, 0xeb, 0x15, 0x09, 0x35, 0x9c, 0xde, 0xec, 0x5e, 0x0b, 0x04, 0x45, 0x5b, 0x1f, 0x46, 0x91, 0x0a, 0x03, 0xa1, 0x16, 0x49, 0x08, 0x0e, 0xef, 0x9b, 0x3c, 0xef, 0x9b, 0x04, 0xe5, 0xd1, 0xdc, 0xac, 0x19, 0x69, 0xcc, 0xba, 0x4a, 0x90, 0x1b, 0x02, 0x81, 0x80, 0x17, 0xcf, 0x71, 0x29, 0xb3, 0x67, 0x2b, 0x86, 0x71, 0x03, 0xbc, 0xfb, 0xea, 0x1d, 0x44, 0x2b, 0x8c, 0x71, 0x16, 0xf0, 0xc2, 0x4c, 0x0a, 0xdb, 0x9a, 0x36, 0x62, 0x36, 0xd9, 0xc8, 0x52, 0x21, 0x18, 0xb0, 0x64, 0x51, 0x2e, 0x26, 0xde, 0x28, 0x3d, 0xda, 0x5a, 0x6b, 0xee, 0x7f, 0xce, 0xb4, 0xe1, 0x36, 0x42, 0x70, 0x7a, 0x87, 0x63, 0xa4, 0x12, 0x30, 0xd1, 0xa3, 0x44, 0xed, 0x9c, 0xb7, 0x18, 0xb8, 0xaf, 0x23, 0xe4, 0x00, 0x87, 0xd3, 0x7d, 0x18, 0xb0, 0x1a, 0x48, 0xb4, 0xf1, 0x54, 0x29, 0x5e, 0x91, 0x00, 0xfc, 0xe3, 0x94, 0xf6, 0x8b, 0xaf, 0x19, 0x48, 0x4f, 0xfa, 0x99, 0x24, 0xa7, 0x16, 0xdb, 0xc5, 0x25, 0x76, 0xa8, 0xac, 0x1f, 0x86, 0xdd, 0xec, 0x4b, 0xe5, 0x35, 0x8e, 0x61, 0x5c, 0xa3, 0x87, 0x4c, 0x50, 0xb2, 0xc3, 0x54, 0xef, 0x65, 0xc9, 0x13, 0x89, 0x54, 0x41, 0x02, 0x81, 0x80, 0x3b, 0xdf, 0x25, 0xcd, 0xd8, 0x08, 0x3f, 0x8b, 0xb0, 0x34, 0x71, 0x27, 0xd5, 0xf7, 0xe0, 0xf1, 0xd7, 0x2f, 0x9e, 0x4b, 0x10, 0xed, 0x63, 0xaf, 0x07, 0xc0, 0xd6, 0x0d, 0x9b, 0xa2, 0xf4, 0xd2, 0x72, 0xa5, 0xc7, 0xc6, 0x87, 0xa9, 0xc1, 0x09, 0x71, 0xfe, 0xb5, 0x71, 0x0d, 0xb0, 0xb2, 0xe7, 0x15, 0x10, 0x48, 0xdb, 0x07, 0xb2, 0x86, 0xa0, 0xf6, 0xe5, 0x58, 0xaf, 0x98, 0xf7, 0x99, 0x3b, 0xfe, 0x77, 0xac, 0xaa, 0x04, 0x4f, 0x91, 0x99, 0x25, 0xf4, 0xd5, 0x53, 0x57, 0x26, 0x1f, 0xc7, 0x68, 0xc5, 0xa0, 0xb7, 0xba, 0x7e, 0xd2, 0xe1, 0xf5, 0xc8, 0xb3, 0x9e, 0xe4, 0xfc, 0x84, 0xfe, 0x94, 0x51, 0xf4, 0xf8, 0x6a, 0xd0, 0x98, 0xe0, 0x6a, 0xb9, 0x7f, 0xc3, 0xb1, 0x02, 0x1b, 0xe7, 0xc4, 0x2b, 0xd3, 0x26, 0x2f, 0xc3, 0xf0, 0xbb, 0x19, 0xe0, 0x0a, 0x33, 0x29, 0xb1, 0x2c, 0xc7, 0x02, 0x81, 0x81, 0x00, 0xbe, 0x55, 0xa7, 0xfd, 0x4b, 0xad, 0x29, 0x58, 0x84, 0x9b, 0xf0, 0x74, 0x17, 0xce, 0x63, 0xd9, 0xc6, 0x25, 0xb8, 0x15, 0x0e, 0xd1, 0x73, 0xb9, 0xfb, 0xab, 0xa1, 0x2b, 0x55, 0xb1, 0xb8, 0x36, 0x89, 0xb4, 0x57, 0xb0, 0xd4, 0x6a, 0x57, 0x39, 0x0a, 0x42, 0x7f, 0x1d, 0x5d, 0xbd, 0xd4, 0x86, 0xf9, 0x74, 0x10, 0x0d, 0xb4, 0x6f, 0x31, 0xe4, 0x9d, 0x5c, 0x87, 0x9b, 0x43, 0x6e, 0x16, 0x38, 0x59, 0xcf, 0x4a, 0x7a, 0x9c, 0xb0, 0xa6, 0x00, 0xe9, 0x6e, 0xbb, 0x24, 0xc2, 0x90, 0xb9, 0x85, 0x9e, 0x5f, 0x94, 0xb0, 0xdb, 0xaa, 0x64, 0x4d, 0x01, 0x69, 0xdb, 0x0b, 0x6b, 0xa5, 0xfd, 0x2c, 0xe2, 0x45, 0x80, 0xc0, 0x8f, 0x87, 0x75, 0xdd, 0xf6, 0xd3, 0x18, 0xcb, 0xd8, 0xc3, 0x7c, 0xc0, 0x70, 0x3d, 0x96, 0xc1, 0xe2, 0x33, 0x9a, 0x0c, 0x83, 0x93, 0xb6, 0xad, 0x39, 0xb5, 0xd7, 0xc6}longeur: 1217
{0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xae, 0x00, 0x54, 0x15, 0x46, 0xb4, 0x73, 0xa2, 0x9b, 0xea, 0x32, 0xbd, 0x06, 0xcf, 0xd0, 0xa3, 0xb5, 0x19, 0xae, 0xba, 0xa5, 0x32, 0x48, 0x9a, 0xc8, 0x7c, 0xd1, 0x31, 0x2a, 0x8d, 0xb4, 0xb7, 0x8b, 0x2f, 0x97, 0x88, 0x4e, 0x73, 0x39, 0xd7, 0xd4, 0x24, 0xa4, 0xe1, 0xbb, 0xe9, 0x64, 0x55, 0x98, 0x91, 0xe8, 0x45, 0x69, 0xac, 0xed, 0x3d, 0x7a, 0x97, 0x21, 0x77, 0xf1, 0x5c, 0x44, 0x60, 0x8e, 0x6e, 0x3e, 0x77, 0xc3, 0xbe, 0xdd, 0x3a, 0x47, 0xcb, 0x8b, 0xa5, 0xc3, 0x9c, 0x21, 0x6c, 0x56, 0xdb, 0xed, 0xdd, 0xe9, 0x9d, 0x79, 0xa6, 0x94, 0x20, 0xb4, 0x04, 0x90, 0x39, 0xb4, 0x74, 0xb0, 0xf5, 0xff, 0xfe, 0xcc, 0xe2, 0x4d, 0x7b, 0xaf, 0x07, 0xab, 0x63, 0x34, 0x9c, 0xd4, 0xce, 0x04, 0x96, 0x40, 0x17, 0x0d, 0x49, 0x85, 0x63, 0x83, 0x5f, 0x3c, 0xd5, 0xa0, 0x0a, 0xd9, 0x16, 0xf2, 0x61, 0xd6, 0x5c, 0xf8, 0x18, 0xe7, 0xb0, 0x89, 0xf4, 0x8e, 0x9f, 0xda, 0xfd, 0x63, 0x06, 0xc5, 0x94, 0xf7, 0xfc, 0x4d, 0x3a, 0x9d, 0xb8, 0x88, 0xc3, 0xd8, 0x46, 0x6f, 0xbd, 0x93, 0x0d, 0x91, 0x13, 0x4b, 0xf7, 0xac, 0xe5, 0x5b, 0x1a, 0xd7, 0x21, 0xdc, 0x9b, 0xdb, 0x65, 0x28, 0x73, 0x33, 0xad, 0x89, 0xa5, 0xc9, 0x57, 0xcb, 0x43, 0x7b, 0x3f, 0xef, 0x73, 0xb5, 0xc0, 0x21, 0xa6, 0x83, 0x1e, 0xa3, 0xaf, 0x37, 0x21, 0xee, 0x85, 0xf8, 0x23, 0xf5, 0x65, 0xb4, 0xa8, 0xc0, 0x94, 0x22, 0xdc, 0x29, 0x0b, 0x4b, 0x6a, 0xed, 0xb2, 0x7d, 0xb2, 0xf9, 0x1c, 0xcd, 0x9b, 0x6c, 0x92, 0xe7, 0xc0, 0xbc, 0xdc, 0xe9, 0xbe, 0x25, 0x34, 0xf5, 0x97, 0x90, 0x74, 0x26, 0xd7, 0x21, 0x7f, 0x88, 0x79, 0x8d, 0x2c, 0x0b, 0xf7, 0xea, 0x9e, 0x28, 0xea, 0x28, 0x1c, 0xbc, 0xd1, 0xd5, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01}longeur: 294
Message chiffré (hexadécimal) :
 a9dd417ac8f601affff8c9f826fc065c0898d8539623564a399f0af0e640830584987014e2fba8ee6e9d61440214ab3ab4b670e0c259a1d82d0fc4d21d90210666be09026131e671a562b780602cab7f96f9f6fd02bc77b7c26b4806ea9ffb93bdf36dc28a71203959da60ce74e9af73ea6d583ad96ced5402a26e72a90aebbb69d6984b01ecca795ce1a96a083d0d980dbcd5bf9409d497c4ddbc98d473b9df763f7b4ede312575dc45c2ba3c9df5b37c0482db4ccc51583720d7bd594fa3563136d787a792537dfc4cff50c718d473b45df01498cdfd6e45dd67088aed5428c78581965476d7d2d763721705de8f0b182fe07dad6832a39da51c94113a324d

Message déchiffré :
 test primaire pour validation
--------------------------------------------------------------------------
private : 2d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d0a4d494945766749424144414e42676b71686b6947397730424151454641415343424b67776767536b41674541416f4942415143303966467668684d596c6975380a54434b622f70473548584663664463373134567035384b4561472b394771437844684239352b7372316954357954483868685269702f4439777531424a747a510a666b716d4e594464554e385a69486c394b35337444643044716f52797253776d384e30486c5169613943757551775061374d524478655570452b2f4d583062610a306d36534f457574655a497635756d763945746b3546626c422f787648616f2f4c7267684237776670744b32614154733944573150472b3141775559573639620a74494f6a636163422f4f6850685a6a475274666b4c56696148493379734b4f7a55664177794361687773492b653432414e2f414947313578766c48323471476f0a4a5a2b30617338424d422b514571645059585544703676707a73365746635136326d6b36325576625a686a536e5837654b626c584a4c764a78666369795337750a775a6b304361345641674d4241414543676745414342536c6339767956566f37574c797a6e50436f74444832346e44666a496f4b754a687a544c4e584c6751570a3465456c5a6d4870552f744c696d5873474145717674384e2b563776646b585566584475523237444d74374f48356444435935646a6e7a63666a48716d5335580a64754f786b776d614b5555334143435939766b307147775a5742532b56417437494146656b36503036536d78462f65425075797a5179325a48634157437959650a4e31387a4c2b6c56573073566f6c66386c5059572f31314b2f3456646e7774494341422f4d57433951386e734d597038744b73594772674c31767936546661770a486f6e6b4569443354415a61423673446e694b4b72567a7159514a6e2f6d565379776b36796131786b796847554b716b685241496d454d7a435956756a766a4c0a366d32616248573042675533774c457a464b6c6355594d665453326c54753757315937516362467373514b426751444c496a727355564d574b6f6d797946795a0a705647303347724c6b704777375055766e53774a5755542b39592b667732572b675049694564432f6d765738585147442f7072617531365647485870484c45570a33624641374e494254494577524d676f354d63494768386661336b634b6d547142427a77375a6766774a596a2b637079336e684c52354b736b47565344784a340a4e66654c583759416c3273646b457950784e62774766306436514b426751446b446e4246496174614d5257465278584b6f6a3754306f6e335630705964726e6d0a7552747230735a69534a676c2f314376795a477a68527456784a2b36764a467246304775523050716c70566e74347636376865456a72395a4e7a4331726662610a4c6a68574c6178656644714a58324a52675565626a4463385563543478336e2f45633752792b5a38725379664f337041475056585a645646487643524c624e790a4e6261475065485854514b4267466f446242726d47717861347a50504a34474b53582b636f4e4a6575364b73446959775071425235346f585a4c4b4745714c740a5874364d434857766843385a41352f724264486862354d67434c666f312b787242713366673176422f416c596f56334671784444436f47517a565557304373470a385a4174714e69424c636235584b5730515a67534f6b4f76704d5a4e4759456459506c6f79797a4e3746426f62685454512b2b58684a7470416f4742414b56670a78772b4b302f7a4b6e575752332f366132313632546242637a36414a4d4e526370634c794455545769656238462b487946554f4f6f667a33596a4744627879750a74385750446e512b6b4d65757463625a413572762f566a514366576c327433724b4a567439354a704766586d67714443564641375251377236522f54582b65560a5856714d4e32397745577a444c2b7274626e54626475587941746630775331775142566e4b4b2f39416f47424149694632636f63495a39447055424f4b5433680a5663366f6d66715561616d554170444664554e47334a637036364c492f465066333962672b433963464e6f672b412b5434303071484330774f6f4454617058510a6932666b4c74475a386e7a6a5a6264342b66707035396e37347a4e51387662664f6d71777039785a664775642b2b7238797043442f31313945706463717138390a436e466d6d50574141526f37624a484f58546f56356748650a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d0a
public : 2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417450587862345954474a5972764577696d2f36520a75523178584877334f39654661656643684768767652716773513451666566724b39596b2b636b782f495955597166772f634c74515362633048354b706a57410a3356446647596835665375643751336441367145637130734a764464423555496d765172726b4d4432757a455138586c4b5250767a46394732744a756b6a684c0a72586d534c2b6270722f524c5a4f52573551663862783271507936344951653848366253746d6745375051317454787674514d4647467576573753446f33476e0a41667a6f54345759786b6258354331596d68794e3872436a733148774d4d676d6f634c43506e754e67446677434274656362355239754b6871435766744772500a415441666b424b6e54324631413665723663374f6c6858454f7470704f746c4c323259593070312b33696d35567953377963583349736b753773475a4e416d750a46514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a
Message original: Bonjour, ceci est un message secret!
Message chiffré: 379c44af1ec83cd80545a784ad2f570c042a43868843997de1634cffb6fc0b59fefa9619ef8eabb03ff7730d81a917d9ecd1b7a9365c4478dddcaa4cd7f0cbade86e1cfd79d237172c50659cb74ec4e839d70a6be69e95eb9a2f735ab2496c87b3e015b745802eb5facf46a48085512db28e9aadee9b3ebcc69aaeb0a861593178edd56e6d173bb3d5c0cac5205917c936df95663aaf634bbb4eaaa7e268ebfffe55ef184233e3fa6f98499de2d88a0b0f402b5f8c343d9404d4b17fb802b3e2b612c2a99576642cc8607fb644104a7c84b2151a324eaf08c8cb6218062a939ae671c678d8ce5b870e0fdee5ce3f391014fe98c09022579587fb84720b213f4c
Message déchiffré: Bonjour, ceci est un message secret!
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x45, 0x76, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x53, 0x43, 0x42, 0x4b, 0x67, 0x77, 0x67, 0x67, 0x53, 0x6b, 0x41, 0x67, 0x45, 0x41, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x43, 0x30, 0x39, 0x66, 0x46, 0x76, 0x68, 0x68, 0x4d, 0x59, 0x6c, 0x69, 0x75, 0x38, 0x0a, 0x54, 0x43, 0x4b, 0x62, 0x2f, 0x70, 0x47, 0x35, 0x48, 0x58, 0x46, 0x63, 0x66, 0x44, 0x63, 0x37, 0x31, 0x34, 0x56, 0x70, 0x35, 0x38, 0x4b, 0x45, 0x61, 0x47, 0x2b, 0x39, 0x47, 0x71, 0x43, 0x78, 0x44, 0x68, 0x42, 0x39, 0x35, 0x2b, 0x73, 0x72, 0x31, 0x69, 0x54, 0x35, 0x79, 0x54, 0x48, 0x38, 0x68, 0x68, 0x52, 0x69, 0x70, 0x2f, 0x44, 0x39, 0x77, 0x75, 0x31, 0x42, 0x4a, 0x74, 0x7a, 0x51, 0x0a, 0x66, 0x6b, 0x71, 0x6d, 0x4e, 0x59, 0x44, 0x64, 0x55, 0x4e, 0x38, 0x5a, 0x69, 0x48, 0x6c, 0x39, 0x4b, 0x35, 0x33, 0x74, 0x44, 0x64, 0x30, 0x44, 0x71, 0x6f, 0x52, 0x79, 0x72, 0x53, 0x77, 0x6d, 0x38, 0x4e, 0x30, 0x48, 0x6c, 0x51, 0x69, 0x61, 0x39, 0x43, 0x75, 0x75, 0x51, 0x77, 0x50, 0x61, 0x37, 0x4d, 0x52, 0x44, 0x78, 0x65, 0x55, 0x70, 0x45, 0x2b, 0x2f, 0x4d, 0x58, 0x30, 0x62, 0x61, 0x0a, 0x30, 0x6d, 0x36, 0x53, 0x4f, 0x45, 0x75, 0x74, 0x65, 0x5a, 0x49, 0x76, 0x35, 0x75, 0x6d, 0x76, 0x39, 0x45, 0x74, 0x6b, 0x35, 0x46, 0x62, 0x6c, 0x42, 0x2f, 0x78, 0x76, 0x48, 0x61, 0x6f, 0x2f, 0x4c, 0x72, 0x67, 0x68, 0x42, 0x37, 0x77, 0x66, 0x70, 0x74, 0x4b, 0x32, 0x61, 0x41, 0x54, 0x73, 0x39, 0x44, 0x57, 0x31, 0x50, 0x47, 0x2b, 0x31, 0x41, 0x77, 0x55, 0x59, 0x57, 0x36, 0x39, 0x62, 0x0a, 0x74, 0x49, 0x4f, 0x6a, 0x63, 0x61, 0x63, 0x42, 0x2f, 0x4f, 0x68, 0x50, 0x68, 0x5a, 0x6a, 0x47, 0x52, 0x74, 0x66, 0x6b, 0x4c, 0x56, 0x69, 0x61, 0x48, 0x49, 0x33, 0x79, 0x73, 0x4b, 0x4f, 0x7a, 0x55, 0x66, 0x41, 0x77, 0x79, 0x43, 0x61, 0x68, 0x77, 0x73, 0x49, 0x2b, 0x65, 0x34, 0x32, 0x41, 0x4e, 0x2f, 0x41, 0x49, 0x47, 0x31, 0x35, 0x78, 0x76, 0x6c, 0x48, 0x32, 0x34, 0x71, 0x47, 0x6f, 0x0a, 0x4a, 0x5a, 0x2b, 0x30, 0x61, 0x73, 0x38, 0x42, 0x4d, 0x42, 0x2b, 0x51, 0x45, 0x71, 0x64, 0x50, 0x59, 0x58, 0x55, 0x44, 0x70, 0x36, 0x76, 0x70, 0x7a, 0x73, 0x36, 0x57, 0x46, 0x63, 0x51, 0x36, 0x32, 0x6d, 0x6b, 0x36, 0x32, 0x55, 0x76, 0x62, 0x5a, 0x68, 0x6a, 0x53, 0x6e, 0x58, 0x37, 0x65, 0x4b, 0x62, 0x6c, 0x58, 0x4a, 0x4c, 0x76, 0x4a, 0x78, 0x66, 0x63, 0x69, 0x79, 0x53, 0x37, 0x75, 0x0a, 0x77, 0x5a, 0x6b, 0x30, 0x43, 0x61, 0x34, 0x56, 0x41, 0x67, 0x4d, 0x42, 0x41, 0x41, 0x45, 0x43, 0x67, 0x67, 0x45, 0x41, 0x43, 0x42, 0x53, 0x6c, 0x63, 0x39, 0x76, 0x79, 0x56, 0x56, 0x6f, 0x37, 0x57, 0x4c, 0x79, 0x7a, 0x6e, 0x50, 0x43, 0x6f, 0x74, 0x44, 0x48, 0x32, 0x34, 0x6e, 0x44, 0x66, 0x6a, 0x49, 0x6f, 0x4b, 0x75, 0x4a, 0x68, 0x7a, 0x54, 0x4c, 0x4e, 0x58, 0x4c, 0x67, 0x51, 0x57, 0x0a, 0x34, 0x65, 0x45, 0x6c, 0x5a, 0x6d, 0x48, 0x70, 0x55, 0x2f, 0x74, 0x4c, 0x69, 0x6d, 0x58, 0x73, 0x47, 0x41, 0x45, 0x71, 0x76, 0x74, 0x38, 0x4e, 0x2b, 0x56, 0x37, 0x76, 0x64, 0x6b, 0x58, 0x55, 0x66, 0x58, 0x44, 0x75, 0x52, 0x32, 0x37, 0x44, 0x4d, 0x74, 0x37, 0x4f, 0x48, 0x35, 0x64, 0x44, 0x43, 0x59, 0x35, 0x64, 0x6a, 0x6e, 0x7a, 0x63, 0x66, 0x6a, 0x48, 0x71, 0x6d, 0x53, 0x35, 0x58, 0x0a, 0x64, 0x75, 0x4f, 0x78, 0x6b, 0x77, 0x6d, 0x61, 0x4b, 0x55, 0x55, 0x33, 0x41, 0x43, 0x43, 0x59, 0x39, 0x76, 0x6b, 0x30, 0x71, 0x47, 0x77, 0x5a, 0x57, 0x42, 0x53, 0x2b, 0x56, 0x41, 0x74, 0x37, 0x49, 0x41, 0x46, 0x65, 0x6b, 0x36, 0x50, 0x30, 0x36, 0x53, 0x6d, 0x78, 0x46, 0x2f, 0x65, 0x42, 0x50, 0x75, 0x79, 0x7a, 0x51, 0x79, 0x32, 0x5a, 0x48, 0x63, 0x41, 0x57, 0x43, 0x79, 0x59, 0x65, 0x0a, 0x4e, 0x31, 0x38, 0x7a, 0x4c, 0x2b, 0x6c, 0x56, 0x57, 0x30, 0x73, 0x56, 0x6f, 0x6c, 0x66, 0x38, 0x6c, 0x50, 0x59, 0x57, 0x2f, 0x31, 0x31, 0x4b, 0x2f, 0x34, 0x56, 0x64, 0x6e, 0x77, 0x74, 0x49, 0x43, 0x41, 0x42, 0x2f, 0x4d, 0x57, 0x43, 0x39, 0x51, 0x38, 0x6e, 0x73, 0x4d, 0x59, 0x70, 0x38, 0x74, 0x4b, 0x73, 0x59, 0x47, 0x72, 0x67, 0x4c, 0x31, 0x76, 0x79, 0x36, 0x54, 0x66, 0x61, 0x77, 0x0a, 0x48, 0x6f, 0x6e, 0x6b, 0x45, 0x69, 0x44, 0x33, 0x54, 0x41, 0x5a, 0x61, 0x42, 0x36, 0x73, 0x44, 0x6e, 0x69, 0x4b, 0x4b, 0x72, 0x56, 0x7a, 0x71, 0x59, 0x51, 0x4a, 0x6e, 0x2f, 0x6d, 0x56, 0x53, 0x79, 0x77, 0x6b, 0x36, 0x79, 0x61, 0x31, 0x78, 0x6b, 0x79, 0x68, 0x47, 0x55, 0x4b, 0x71, 0x6b, 0x68, 0x52, 0x41, 0x49, 0x6d, 0x45, 0x4d, 0x7a, 0x43, 0x59, 0x56, 0x75, 0x6a, 0x76, 0x6a, 0x4c, 0x0a, 0x36, 0x6d, 0x32, 0x61, 0x62, 0x48, 0x57, 0x30, 0x42, 0x67, 0x55, 0x33, 0x77, 0x4c, 0x45, 0x7a, 0x46, 0x4b, 0x6c, 0x63, 0x55, 0x59, 0x4d, 0x66, 0x54, 0x53, 0x32, 0x6c, 0x54, 0x75, 0x37, 0x57, 0x31, 0x59, 0x37, 0x51, 0x63, 0x62, 0x46, 0x73, 0x73, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x4c, 0x49, 0x6a, 0x72, 0x73, 0x55, 0x56, 0x4d, 0x57, 0x4b, 0x6f, 0x6d, 0x79, 0x79, 0x46, 0x79, 0x5a, 0x0a, 0x70, 0x56, 0x47, 0x30, 0x33, 0x47, 0x72, 0x4c, 0x6b, 0x70, 0x47, 0x77, 0x37, 0x50, 0x55, 0x76, 0x6e, 0x53, 0x77, 0x4a, 0x57, 0x55, 0x54, 0x2b, 0x39, 0x59, 0x2b, 0x66, 0x77, 0x32, 0x57, 0x2b, 0x67, 0x50, 0x49, 0x69, 0x45, 0x64, 0x43, 0x2f, 0x6d, 0x76, 0x57, 0x38, 0x58, 0x51, 0x47, 0x44, 0x2f, 0x70, 0x72, 0x61, 0x75, 0x31, 0x36, 0x56, 0x47, 0x48, 0x58, 0x70, 0x48, 0x4c, 0x45, 0x57, 0x0a, 0x33, 0x62, 0x46, 0x41, 0x37, 0x4e, 0x49, 0x42, 0x54, 0x49, 0x45, 0x77, 0x52, 0x4d, 0x67, 0x6f, 0x35, 0x4d, 0x63, 0x49, 0x47, 0x68, 0x38, 0x66, 0x61, 0x33, 0x6b, 0x63, 0x4b, 0x6d, 0x54, 0x71, 0x42, 0x42, 0x7a, 0x77, 0x37, 0x5a, 0x67, 0x66, 0x77, 0x4a, 0x59, 0x6a, 0x2b, 0x63, 0x70, 0x79, 0x33, 0x6e, 0x68, 0x4c, 0x52, 0x35, 0x4b, 0x73, 0x6b, 0x47, 0x56, 0x53, 0x44, 0x78, 0x4a, 0x34, 0x0a, 0x4e, 0x66, 0x65, 0x4c, 0x58, 0x37, 0x59, 0x41, 0x6c, 0x32, 0x73, 0x64, 0x6b, 0x45, 0x79, 0x50, 0x78, 0x4e, 0x62, 0x77, 0x47, 0x66, 0x30, 0x64, 0x36, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x6b, 0x44, 0x6e, 0x42, 0x46, 0x49, 0x61, 0x74, 0x61, 0x4d, 0x52, 0x57, 0x46, 0x52, 0x78, 0x58, 0x4b, 0x6f, 0x6a, 0x37, 0x54, 0x30, 0x6f, 0x6e, 0x33, 0x56, 0x30, 0x70, 0x59, 0x64, 0x72, 0x6e, 0x6d, 0x0a, 0x75, 0x52, 0x74, 0x72, 0x30, 0x73, 0x5a, 0x69, 0x53, 0x4a, 0x67, 0x6c, 0x2f, 0x31, 0x43, 0x76, 0x79, 0x5a, 0x47, 0x7a, 0x68, 0x52, 0x74, 0x56, 0x78, 0x4a, 0x2b, 0x36, 0x76, 0x4a, 0x46, 0x72, 0x46, 0x30, 0x47, 0x75, 0x52, 0x30, 0x50, 0x71, 0x6c, 0x70, 0x56, 0x6e, 0x74, 0x34, 0x76, 0x36, 0x37, 0x68, 0x65, 0x45, 0x6a, 0x72, 0x39, 0x5a, 0x4e, 0x7a, 0x43, 0x31, 0x72, 0x66, 0x62, 0x61, 0x0a, 0x4c, 0x6a, 0x68, 0x57, 0x4c, 0x61, 0x78, 0x65, 0x66, 0x44, 0x71, 0x4a, 0x58, 0x32, 0x4a, 0x52, 0x67, 0x55, 0x65, 0x62, 0x6a, 0x44, 0x63, 0x38, 0x55, 0x63, 0x54, 0x34, 0x78, 0x33, 0x6e, 0x2f, 0x45, 0x63, 0x37, 0x52, 0x79, 0x2b, 0x5a, 0x38, 0x72, 0x53, 0x79, 0x66, 0x4f, 0x33, 0x70, 0x41, 0x47, 0x50, 0x56, 0x58, 0x5a, 0x64, 0x56, 0x46, 0x48, 0x76, 0x43, 0x52, 0x4c, 0x62, 0x4e, 0x79, 0x0a, 0x4e, 0x62, 0x61, 0x47, 0x50, 0x65, 0x48, 0x58, 0x54, 0x51, 0x4b, 0x42, 0x67, 0x46, 0x6f, 0x44, 0x62, 0x42, 0x72, 0x6d, 0x47, 0x71, 0x78, 0x61, 0x34, 0x7a, 0x50, 0x50, 0x4a, 0x34, 0x47, 0x4b, 0x53, 0x58, 0x2b, 0x63, 0x6f, 0x4e, 0x4a, 0x65, 0x75, 0x36, 0x4b, 0x73, 0x44, 0x69, 0x59, 0x77, 0x50, 0x71, 0x42, 0x52, 0x35, 0x34, 0x6f, 0x58, 0x5a, 0x4c, 0x4b, 0x47, 0x45, 0x71, 0x4c, 0x74, 0x0a, 0x58, 0x74, 0x36, 0x4d, 0x43, 0x48, 0x57, 0x76, 0x68, 0x43, 0x38, 0x5a, 0x41, 0x35, 0x2f, 0x72, 0x42, 0x64, 0x48, 0x68, 0x62, 0x35, 0x4d, 0x67, 0x43, 0x4c, 0x66, 0x6f, 0x31, 0x2b, 0x78, 0x72, 0x42, 0x71, 0x33, 0x66, 0x67, 0x31, 0x76, 0x42, 0x2f, 0x41, 0x6c, 0x59, 0x6f, 0x56, 0x33, 0x46, 0x71, 0x78, 0x44, 0x44, 0x43, 0x6f, 0x47, 0x51, 0x7a, 0x56, 0x55, 0x57, 0x30, 0x43, 0x73, 0x47, 0x0a, 0x38, 0x5a, 0x41, 0x74, 0x71, 0x4e, 0x69, 0x42, 0x4c, 0x63, 0x62, 0x35, 0x58, 0x4b, 0x57, 0x30, 0x51, 0x5a, 0x67, 0x53, 0x4f, 0x6b, 0x4f, 0x76, 0x70, 0x4d, 0x5a, 0x4e, 0x47, 0x59, 0x45, 0x64, 0x59, 0x50, 0x6c, 0x6f, 0x79, 0x79, 0x7a, 0x4e, 0x37, 0x46, 0x42, 0x6f, 0x62, 0x68, 0x54, 0x54, 0x51, 0x2b, 0x2b, 0x58, 0x68, 0x4a, 0x74, 0x70, 0x41, 0x6f, 0x47, 0x42, 0x41, 0x4b, 0x56, 0x67, 0x0a, 0x78, 0x77, 0x2b, 0x4b, 0x30, 0x2f, 0x7a, 0x4b, 0x6e, 0x57, 0x57, 0x52, 0x33, 0x2f, 0x36, 0x61, 0x32, 0x31, 0x36, 0x32, 0x54, 0x62, 0x42, 0x63, 0x7a, 0x36, 0x41, 0x4a, 0x4d, 0x4e, 0x52, 0x63, 0x70, 0x63, 0x4c, 0x79, 0x44, 0x55, 0x54, 0x57, 0x69, 0x65, 0x62, 0x38, 0x46, 0x2b, 0x48, 0x79, 0x46, 0x55, 0x4f, 0x4f, 0x6f, 0x66, 0x7a, 0x33, 0x59, 0x6a, 0x47, 0x44, 0x62, 0x78, 0x79, 0x75, 0x0a, 0x74, 0x38, 0x57, 0x50, 0x44, 0x6e, 0x51, 0x2b, 0x6b, 0x4d, 0x65, 0x75, 0x74, 0x63, 0x62, 0x5a, 0x41, 0x35, 0x72, 0x76, 0x2f, 0x56, 0x6a, 0x51, 0x43, 0x66, 0x57, 0x6c, 0x32, 0x74, 0x33, 0x72, 0x4b, 0x4a, 0x56, 0x74, 0x39, 0x35, 0x4a, 0x70, 0x47, 0x66, 0x58, 0x6d, 0x67, 0x71, 0x44, 0x43, 0x56, 0x46, 0x41, 0x37, 0x52, 0x51, 0x37, 0x72, 0x36, 0x52, 0x2f, 0x54, 0x58, 0x2b, 0x65, 0x56, 0x0a, 0x58, 0x56, 0x71, 0x4d, 0x4e, 0x32, 0x39, 0x77, 0x45, 0x57, 0x7a, 0x44, 0x4c, 0x2b, 0x72, 0x74, 0x62, 0x6e, 0x54, 0x62, 0x64, 0x75, 0x58, 0x79, 0x41, 0x74, 0x66, 0x30, 0x77, 0x53, 0x31, 0x77, 0x51, 0x42, 0x56, 0x6e, 0x4b, 0x4b, 0x2f, 0x39, 0x41, 0x6f, 0x47, 0x42, 0x41, 0x49, 0x69, 0x46, 0x32, 0x63, 0x6f, 0x63, 0x49, 0x5a, 0x39, 0x44, 0x70, 0x55, 0x42, 0x4f, 0x4b, 0x54, 0x33, 0x68, 0x0a, 0x56, 0x63, 0x36, 0x6f, 0x6d, 0x66, 0x71, 0x55, 0x61, 0x61, 0x6d, 0x55, 0x41, 0x70, 0x44, 0x46, 0x64, 0x55, 0x4e, 0x47, 0x33, 0x4a, 0x63, 0x70, 0x36, 0x36, 0x4c, 0x49, 0x2f, 0x46, 0x50, 0x66, 0x33, 0x39, 0x62, 0x67, 0x2b, 0x43, 0x39, 0x63, 0x46, 0x4e, 0x6f, 0x67, 0x2b, 0x41, 0x2b, 0x54, 0x34, 0x30, 0x30, 0x71, 0x48, 0x43, 0x30, 0x77, 0x4f, 0x6f, 0x44, 0x54, 0x61, 0x70, 0x58, 0x51, 0x0a, 0x69, 0x32, 0x66, 0x6b, 0x4c, 0x74, 0x47, 0x5a, 0x38, 0x6e, 0x7a, 0x6a, 0x5a, 0x62, 0x64, 0x34, 0x2b, 0x66, 0x70, 0x70, 0x35, 0x39, 0x6e, 0x37, 0x34, 0x7a, 0x4e, 0x51, 0x38, 0x76, 0x62, 0x66, 0x4f, 0x6d, 0x71, 0x77, 0x70, 0x39, 0x78, 0x5a, 0x66, 0x47, 0x75, 0x64, 0x2b, 0x2b, 0x72, 0x38, 0x79, 0x70, 0x43, 0x44, 0x2f, 0x31, 0x31, 0x39, 0x45, 0x70, 0x64, 0x63, 0x71, 0x71, 0x38, 0x39, 0x0a, 0x43, 0x6e, 0x46, 0x6d, 0x6d, 0x50, 0x57, 0x41, 0x41, 0x52, 0x6f, 0x37, 0x62, 0x4a, 0x48, 0x4f, 0x58, 0x54, 0x6f, 0x56, 0x35, 0x67, 0x48, 0x65, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 1704
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x50, 0x58, 0x78, 0x62, 0x34, 0x59, 0x54, 0x47, 0x4a, 0x59, 0x72, 0x76, 0x45, 0x77, 0x69, 0x6d, 0x2f, 0x36, 0x52, 0x0a, 0x75, 0x52, 0x31, 0x78, 0x58, 0x48, 0x77, 0x33, 0x4f, 0x39, 0x65, 0x46, 0x61, 0x65, 0x66, 0x43, 0x68, 0x47, 0x68, 0x76, 0x76, 0x52, 0x71, 0x67, 0x73, 0x51, 0x34, 0x51, 0x66, 0x65, 0x66, 0x72, 0x4b, 0x39, 0x59, 0x6b, 0x2b, 0x63, 0x6b, 0x78, 0x2f, 0x49, 0x59, 0x55, 0x59, 0x71, 0x66, 0x77, 0x2f, 0x63, 0x4c, 0x74, 0x51, 0x53, 0x62, 0x63, 0x30, 0x48, 0x35, 0x4b, 0x70, 0x6a, 0x57, 0x41, 0x0a, 0x33, 0x56, 0x44, 0x66, 0x47, 0x59, 0x68, 0x35, 0x66, 0x53, 0x75, 0x64, 0x37, 0x51, 0x33, 0x64, 0x41, 0x36, 0x71, 0x45, 0x63, 0x71, 0x30, 0x73, 0x4a, 0x76, 0x44, 0x64, 0x42, 0x35, 0x55, 0x49, 0x6d, 0x76, 0x51, 0x72, 0x72, 0x6b, 0x4d, 0x44, 0x32, 0x75, 0x7a, 0x45, 0x51, 0x38, 0x58, 0x6c, 0x4b, 0x52, 0x50, 0x76, 0x7a, 0x46, 0x39, 0x47, 0x32, 0x74, 0x4a, 0x75, 0x6b, 0x6a, 0x68, 0x4c, 0x0a, 0x72, 0x58, 0x6d, 0x53, 0x4c, 0x2b, 0x62, 0x70, 0x72, 0x2f, 0x52, 0x4c, 0x5a, 0x4f, 0x52, 0x57, 0x35, 0x51, 0x66, 0x38, 0x62, 0x78, 0x32, 0x71, 0x50, 0x79, 0x36, 0x34, 0x49, 0x51, 0x65, 0x38, 0x48, 0x36, 0x62, 0x53, 0x74, 0x6d, 0x67, 0x45, 0x37, 0x50, 0x51, 0x31, 0x74, 0x54, 0x78, 0x76, 0x74, 0x51, 0x4d, 0x46, 0x47, 0x46, 0x75, 0x76, 0x57, 0x37, 0x53, 0x44, 0x6f, 0x33, 0x47, 0x6e, 0x0a, 0x41, 0x66, 0x7a, 0x6f, 0x54, 0x34, 0x57, 0x59, 0x78, 0x6b, 0x62, 0x58, 0x35, 0x43, 0x31, 0x59, 0x6d, 0x68, 0x79, 0x4e, 0x38, 0x72, 0x43, 0x6a, 0x73, 0x31, 0x48, 0x77, 0x4d, 0x4d, 0x67, 0x6d, 0x6f, 0x63, 0x4c, 0x43, 0x50, 0x6e, 0x75, 0x4e, 0x67, 0x44, 0x66, 0x77, 0x43, 0x42, 0x74, 0x65, 0x63, 0x62, 0x35, 0x52, 0x39, 0x75, 0x4b, 0x68, 0x71, 0x43, 0x57, 0x66, 0x74, 0x47, 0x72, 0x50, 0x0a, 0x41, 0x54, 0x41, 0x66, 0x6b, 0x42, 0x4b, 0x6e, 0x54, 0x32, 0x46, 0x31, 0x41, 0x36, 0x65, 0x72, 0x36, 0x63, 0x37, 0x4f, 0x6c, 0x68, 0x58, 0x45, 0x4f, 0x74, 0x70, 0x70, 0x4f, 0x74, 0x6c, 0x4c, 0x32, 0x32, 0x59, 0x59, 0x30, 0x70, 0x31, 0x2b, 0x33, 0x69, 0x6d, 0x35, 0x56, 0x79, 0x53, 0x37, 0x79, 0x63, 0x58, 0x33, 0x49, 0x73, 0x6b, 0x75, 0x37, 0x73, 0x47, 0x5a, 0x4e, 0x41, 0x6d, 0x75, 0x0a, 0x46, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 451
