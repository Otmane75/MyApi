#include <string.h>

void split(const char *str, const char *delimiters, char **tokens, int maxTokens) {
    char *token;
    int tokenIndex = 0;

    // Copie de la chaîne originale dans une variable modifiable
    char *strCopy = strdup(str);

    // Extraction du premier token
    token = strtok(strCopy, delimiters);

    // Tant qu'il y a des tokens et que le nombre maximum n'est pas atteint
    while (token != NULL && tokenIndex < maxTokens) {
        tokens[tokenIndex] = token;
        tokenIndex++;

        // Extraction du prochain token
        token = strtok(NULL, delimiters);
    }

    // Libération de la mémoire allouée pour la copie de la chaîne
    free(strCopy);
}

-----------------------------------------------------------------------------------------------
#include <stdio.h>

#define MAX_TOKENS 10

int main() {
    char str[] = "Hello,World,How,Are,You";
    char delimiters[] = ",";
    char *tokens[MAX_TOKENS];

    split(str, delimiters, tokens, MAX_TOKENS);

    for (int i = 0; i < MAX_TOKENS && tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
    }

    return 0;
}


------------------------------------------------
anyio==3.7.1
certifi==2023.5.7
charset-normalizer==3.2.0
colorama==0.4.6
copier==8.1.0
decorator==5.1.1
dunamai==1.18.0
exceptiongroup==1.1.2
flet==0.8.2
flet-core==0.8.2
flet-runtime==0.8.2
funcy==2.0
greenlet==2.0.2
h11==0.14.0
httpcore==0.17.3
httpx==0.24.1
idna==3.4
Jinja2==3.1.2
jinja2-ansible-filters==1.3.2
MarkupSafe==2.1.3
oauthlib==3.2.2
packaging==23.1
pathspec==0.11.1
plumbum==1.8.2
prompt-toolkit==3.0.39
pycryptodome==3.18.0
pydantic==1.10.11
Pygments==2.15.1
pypng==0.20220715.0
pyserial==3.5
pywin32==306
PyYAML==6.0
pyyaml-include==1.3.1
qrcode==7.4.2
questionary==1.10.0
repath==0.9.0
requests==2.31.0
six==1.16.0
sniffio==1.3.0
SQLAlchemy==2.0.19
typing-extensions==4.7.1
urllib3==2.0.3
watchdog==3.0.0
close_serial_ports()
wcwidth==0.2.6
websocket-client==1.6.1
websockets==11.0.3
----------------------------------------------------------------------
import os
import psutil

# Fonction pour terminer les activités de PySerial
def close_serial_ports():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name'])
            if 'python' in pinfo['name'].lower() and 'serial' in pinfo['name'].lower():
                os.kill(pinfo['pid'], 9)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Exemple d'utilisation
# Ferme toutes les connexions série avant d'utiliser une fonction spécifique

# Ferme toutes les connexions série en cours
close_serial_ports()

# Utilisez maintenant la fonction spécifique
# ... votre code ici ...


------------------------------------------------------------------------------------------
Clé privée :
{0xbe,0x84,0xff,0xa5,0x77,0x4,0xc6,0xfc,0x19,0x53,0x46,0xaf,0x61,0x9d,0x43,0x70,0x10,0x3a,0x73,0x3e,0xd8,0x68,0xd0,0x4a,0x5c,0xa4,0xb1,0xb2,0xc5,0x0,0x16,0x2a}
Clé publique :
{0x3a,0x6e,0xb6,0x78,0xb5,0xd5,0x3,0xa5,0x73,0xfb,0x96,0x22,0x94,0x5a,0x55,0x3f,0xe1,0x83,0x2f,0xc7,0x46,0xd0,0x38,0x15,0x9c,0xb7,0xde,0x61,0xd3,0x3f,0x28,0xdc,e8,0xf3,0xcf,0x66,0x31,0x2c,0x42,0xe9,0x9f,0x3d,0x6c,0x7d,0x24,0xc4,0x88,0x46,0x92,0x2,0xa1,0xbd,0x3b,0x53,0x7c,0x58,0x58,0x1a,0xbb,0x68,0xc,0xf4,0x9f,0x93}
-------------------------------------------------------------
Clé privée (hex) : 98a87b676185f120a909f832516bed5f1c2cb8832a64b4a4d9caad7744153fe4
Clé publique (hex) : 024260fd8af89f8d2c916c03243bb7e4177244b55b758fc379332db0cb0e5faba3
Clé privée RSA : {0x98, 0xa8, 0x7b, 0x67, 0x61, 0x85, 0xf1, 0x20, 0xa9, 0x09, 0xf8, 0x32, 0x51, 0x6b, 0xed, 0x5f, 0x1c, 0x2c, 0xb8, 
0x83, 0x2a, 0x64, 0xb4, 0xa4, 0xd9, 0xca, 0xad, 0x77, 0x44, 0x15, 0x3f, 0xe4}
Clé privée RSA : {0x02, 0x42, 0x60, 0xfd, 0x8a, 0xf8, 0x9f, 0x8d, 0x2c, 0x91, 0x6c, 0x03, 0x24, 0x3b, 0xb7, 0xe4, 0x17, 0x72, 0x44, 
0xb5, 0x5b, 0x75, 0x8f, 0xc3, 0x79, 0x33, 0x2d, 0xb0, 0xcb, 0x0e, 0x5f, 0xab, 0xa3}
------------------------------------------------------------------------------------------------------------------------------
Clé privée RSA : {0xb4, 0xde, 0xdf, 0x79, 0x41, 0x5a, 0x01, 0x94, 0x96, 0x0c, 0x0f, 0xd0, 0xbe, 0x64, 0x35, 0xbf, 0xbe, 0xba, 0x5a, 
0xcf, 0xa7, 0x34, 0xae, 0xe7, 0xcc, 0xac, 0x06, 0xe8, 0x2b, 0x5b, 0x43, 0xbe}
Clé privée RSA : {0x04, 0x04, 0x4c, 0x45, 0x18, 0x62, 0x91, 0x77, 0xc7, 0xcd, 0x63, 0x94, 0x95, 0xfc, 0xcb, 0x45, 0x1a, 0x9d, 0xe7, 
0x23, 0xaa, 0xb8, 0xa4, 0x4f, 0xdd, 0x18, 0xbf, 0x75, 0x54, 0x72, 0x67, 0x4b, 0xe0, 0x6e, 0x1c, 0x86, 0xd9, 0xb0, 0xb7, 0xd4, 0x6e, 
0xa4, 0xec, 0xcc, 0x7b, 0x73, 0xd4, 0xeb, 0xec, 0x0d, 0x17, 0xf8, 0x83, 0xc2, 0x66, 0x8f, 0x5c, 0x92, 0xa2, 0x18, 0x60, 0xa5, 0x55, 
0xbf, 0x51, 0x28}
---------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec  
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
import base64

# Génération de la paire de clés 
private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key = private_key.public_key()

# Chargement du certificat ECC  
with open("certificate.pem", "rb") as f:
    certificate = x509.load_pem_x509_certificate(f.read(), default_backend())

# Récupération de la clé publique à partir du certificat
public_key = certificate.public_key() 

# Chiffrement du message
plaintext = b"Mon message secret"
ciphertext = public_key.encrypt(
    plaintext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Encodage en base64 pour le stockage/transport
ciphertext_b64 = base64.b64encode(ciphertext)

print(ciphertext_b64)

---------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    cipher_text = public_key.encrypt(
        message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return cipher_text

def decrypt_message(cipher_text, private_key):
    plain_text = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plain_text.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)

---------------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    # Générer une clé de chiffrement symétrique à partir de la clé publique
    shared_key = public_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer une clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Initialiser un vecteur d'initialisation aléatoire pour le mode CBC
    iv = os.urandom(16)

    # Créer l'objet de chiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Chiffrer le message
    padded_data = encryptor.update(message) + encryptor.finalize()

    # Retourner le vecteur d'initialisation et les données chiffrées pour le déchiffrement ultérieur
    return iv + padded_data

def decrypt_message(cipher_text, private_key):
    # Extraire le vecteur d'initialisation du texte chiffré
    iv = cipher_text[:16]
    cipher_text = cipher_text[16:]

    # Générer la clé de chiffrement symétrique à partir de la clé privée
    shared_key = private_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer la clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Créer l'objet de déchiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Déchiffrer le message
    decrypted_data = decryptor.update(cipher_text) + decryptor.finalize()

    return decrypted_data.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)
