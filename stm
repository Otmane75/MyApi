https://github.com/viktorvano/STM32F3Discovery_internal_FLASH/blob/master/Src/main.c
----------------------------------------------------------------
void initialize_file() {
    // Vérifier si le fichier existe
    FILE* file = fopen("cert.txt", "r");
    if (file == NULL) {
        // Le fichier n'existe pas, le créer
        file = fopen("cert.txt", "w");
        if (file != NULL) {
            // Initialiser le contenu du fichier si nécessaire
            const char* initialContent = "Contenu initial du fichier";
            fputs(initialContent, file);
            fclose(file);
        }
    } else {
        // Le fichier existe déjà, le fermer
        fclose(file);
    }
}


#include "stm32f4xx_hal.h"

// Définir la taille maximale du tampon de texte
#define BUFFER_SIZE 128

// Fonction pour sauvegarder le texte dans le fichier
void save_text_to_file(const char* text) {
    // Ouvrir le fichier en mode d'écriture
    FILE* file = fopen("cert.txt", "w");
    if (file != NULL) {
        // Écrire le texte dans le fichier
        fputs(text, file);

        // Fermer le fichier
        fclose(file);
    }
}

// Fonction pour lire le contenu du fichier
void read_file_content() {
    // Ouvrir le fichier en mode de lecture
    FILE* file = fopen("cert.txt", "r");
    if (file != NULL) {
        // Tampon pour stocker le texte lu
        char buffer[BUFFER_SIZE];

        // Lire le contenu du fichier
        while (fgets(buffer, BUFFER_SIZE, file) != NULL) {
            // Afficher le texte lu
            printf("%s", buffer);
        }

        // Fermer le fichier
        fclose(file);
    }
}

int main(void) {
    // Initialiser le périphérique UART pour l'affichage des messages
    HAL_Init();
    __HAL_RCC_USART1_CLK_ENABLE();
  
    // Configurer les broches UART
    GPIO_InitTypeDef GPIO_InitStruct;
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  
    // Configurer l'UART
    USART_HandleTypeDef huart;
    huart.Instance = USART1;
    huart.Init.BaudRate = 115200;
    huart.Init.WordLength = UART_WORDLENGTH_8B;
    huart.Init.StopBits = UART_STOPBITS_1;
    huart.Init.Parity = UART_PARITY_NONE;
    huart.Init.Mode = UART_MODE_TX_RX;
    huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    HAL_USART_Init(&huart);
  
    // Texte à sauvegarder dans le fichier
    const char* text = "Contenu du fichier de certificat";

    // Sauvegarder le texte dans le fichier
    save_text_to_file(text);

    // Lire le contenu du fichier
    read_file_content();

    while (1) {
        // Boucle principale du microcontrôleur
    }
}
---------------------------------------------
#include "stm32f4xx.h"
#include "stm32f4xx_hal.h"

#define CERT_FILE "certificat.txt"
#define CERT_FILE_ADDR  0x08010000   // Adresse de départ du fichier certificat

void save_cert(char* cert_text) {

  HAL_FLASH_Unlock();

  // Effacement préalable
  FLASH_EraseInitTypeDef EraseInit; 
  EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
  EraseInit.PageAddress = CERT_FILE_ADDR;
  EraseInit.NbPages = 1;
  uint32_t PageError;
  HAL_FLASHEx_Erase(&EraseInit, &PageError);  

  // Ecriture du nom du fichier
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CERT_FILE_ADDR, (uint32_t)CERT_FILE);

  // Ecriture du texte
  HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, CERT_FILE_ADDR + strlen(CERT_FILE), (uint32_t)cert_text);

  HAL_FLASH_Lock();

}

char* load_cert() {

  char* cert_text = (char*) (CERT_FILE_ADDR + strlen(CERT_FILE));
  return cert_text;

}

void print_cert_addr() {

  printf("Fichier certificat en 0x%X\n", CERT_FILE_ADDR);

}

int main(void) {

  char cert_text[] = "Exemple de certificat";

  save_cert(cert_text);

  char* text = load_cert();
  printf("Certificat : %s\n", text);

  print_cert_addr();

  return 0;
}
--------------------------------------
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;

public class Main {
    public static void main(String[] args) {
        String hexKey = "0123456789ABCDEF"; // Votre clé sous forme hexadécimale

        // Convertir la chaîne hexadécimale en tableau d'octets
        byte[] keyBytes = hexStringToByteArray(hexKey);

        // Créer l'objet SecretKey à partir du tableau d'octets
        SecretKey secretKey = new SecretKeySpec(keyBytes, "AES"); // Utilisez le nom de l'algorithme souhaité (par exemple, AES)

        // Vous pouvez maintenant utiliser l'objet secretKey comme clé secrète dans votre code
    }

    public static byte[] hexStringToByteArray(String hexString) {
        int length = hexString.length();
        byte[] byteArray = new byte[length / 2];
        for (int i = 0; i < length; i += 2) {
            byteArray[i / 2] = (byte) ((Character.digit(hexString.charAt(i), 16) << 4)
                                     + Character.digit(hexString.charAt(i + 1), 16));
        }
        return byteArray;
    }
}


******************************************************************************
String certificate = "..."; // Le certificat au format PEM 

CertificateFactory cf = CertificateFactory.getInstance("X.509");  
Certificate cert = cf.generateCertificate(new ByteArrayInputStream(certificate.getBytes()));

PublicKey publicKey = cert.getPublicKey();

if (publicKey instanceof ECPublicKey) {  
    ECPublicKey ecPublicKey = (ECPublicKey) publicKey;  
    
    // Récupérer les paramètres de la courbe 
    ECParameterSpec params = ecPublicKey.getParams();  
      
    // Vérifier que c'est la courbe secp256r1
    if (params.getCurve().equals(CurveName.SECP256R1)) {
      
        // Récupérer le point de la clé public sous forme d'octet 
        byte[] encoded = ecPublicKey.getW().getAffineX().toByteArray();
        byte[] encodedY = ecPublicKey.getW().getAffineY().toByteArray();
        
        // Concaténer les octets X et Y
        byte[] fullEncoded = new byte[encoded.length + encodedY.length];
        System.arraycopy(encoded, 0, fullEncoded, 0, encoded.length);         
        System.arraycopy(encodedY, 0, fullEncoded, encoded.length, encodedY.length);  
             
        // Afficher en hex string x9.63
        String hexPublicKey = DatatypeConverter.printHexBinary(fullEncoded).toUpperCase();
        Log.d("PUBLIC_KEY", hexPublicKey);  
    }
}

==================================================================

implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
--------------------------
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.util.io.pem.PemObject;
import org.bouncycastle.util.io.pem.PemReader;

import java.io.IOException;
import java.io.StringReader;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

public class PublicKeyExtractor {

    public static PublicKey extractPublicKeyFromX963(String x963Certificate) throws IOException, NoSuchAlgorithmException, NoSuchProviderException, InvalidKeySpecException {
        // Remove any BEGIN/END headers and trim the input string
        x963Certificate = x963Certificate.replaceAll("-----BEGIN CERTIFICATE-----", "")
                .replaceAll("-----END CERTIFICATE-----", "").trim();

        // Decode the PEM format
        PemReader pemReader = new PemReader(new StringReader(x963Certificate));
        PemObject pemObject = pemReader.readPemObject();
        pemReader.close();

        // Parse the SubjectPublicKeyInfo
        SubjectPublicKeyInfo publicKeyInfo = SubjectPublicKeyInfo.getInstance(pemObject.getContent());

        // Get the encoded public key
        byte[] encodedPublicKey = publicKeyInfo.getEncoded();

        // Convert to PublicKey object
        KeyFactory keyFactory = KeyFactory.getInstance("EC", "BC"); // BC for Bouncy Castle provider
        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encodedPublicKey);
        return keyFactory.generatePublic(publicKeySpec);
    }
}
-------------------------------
String x963Certificate = "-----BEGIN CERTIFICATE-----\n" +
        "MIICoDCCAYgCCQD4+eUS2xKKEjANBgkqhkiG9w0BAQsFADASMRAwDgYDVQQDDAdU\n" +
        "ZXN0IENBMB4XDTIwMTExMzE4MjU1NFoXDTIxMTExMzE4MjU1NFowEjEQMA4GA1UE\n" +
        "AwwHVGVzdCBDQTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAN96rohXO\n" +
        "V4dA5llINssELM+Tn7TK5cuIfBtSNruBuIeULGw3djJsGmWjq/Tp3gbnd6/tS6V1\n" +
        "0+j6/6zPLuebDX8ed37OcSXWx0/5rpsBhmKFXlnsIR1KVl4DhVrYzVqMz9nZiqFs\n" +
        "XJG50UT+wwqB8DMpmbd/D2b91uvFGSxwDLEPKa7q8Fv37rJQ83r8lBeEZxZl2DrM\n" +
        "w2nJFJ2UyWZ6lLUGB/xnp5etX3iF7TN8oKRRyHhP3fRJd1oZxUj3/mUKL4R4T/9q\n" +
        "9NVRE3J6nfoKjgNdJxW8Jp+zJwBjNTz1/PhZs2+QRy2Sf0twVsbE+RwmqoEV84be\n" +
        "sKXQvfrGBYsCAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAzriJ9d7otDPJxxtaLcmZ\n" +
        "h9RlWmlypRK7YRtv+4vfb9kgEgzmqIw9Zo65f8Tojj+yxxs/rwUqrXaw6xytl7Rb\n" +
        "jHzDzDzo30y4Gqt+z4STjnr8zsk4qE6hS5pmNubA19SmRqyPiHjzvt/hzQd9oRQ2\n" +
        "ttS5XJDwLQDz/6/CFotJbg5NFTUgjK8fZNEkM5IwNTgnF3aJstGDNIFCafSxkGol\n" +
        "ecygflEVsLhftu8PVi4y06hA7sMyN5CtA6UwAKjI2KoIV/CBDSNmHbgpC6BY6A8W\n" +
        "sjhFWuGZxZfNEjyEw7Ic/QEa9x3ht6C3GOJSVxO7Dd5Kzdfab3wtMzUeDUNukWV7\n" +
        "dQ==\n" +
        "-----END CERTIFICATE-----";

try {
    PublicKey publicKey = PublicKeyExtractor.extractPublicKeyFromX963(x963Certificate);
    // Utilisez la clé publique comme nécessaire
    // ...
} catch (Exception e) {
    e.printStackTrace();
}



*----------------**-*-************************************************-------------------------------******************************************************
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Clé privée en format hexadécimal: 7aac3744ae8d46390918a1a2f620b8af6a31ad3c78917b2b930939cbbe8c737f
Public key (X9.62 format) length: 04c4b7f138ce417b4ade720728d387f35d96f418285629a5f4eb498994c8d1ccbaf02cb98ba5e5f4ec08e888986c8e05a4328000f867c1495537ad83a65f239d21
Public key (X9.62 format) length: 65
{0x7a, 0xac, 0x37, 0x44, 0xae, 0x8d, 0x46, 0x39, 0x09, 0x18, 0xa1, 0xa2, 0xf6, 0x20, 0xb8, 0xaf, 0x6a, 0x31, 0xad, 0x3c, 0x78, 0x91, 0x7b, 0x2b, 0x93, 
0x09, 0x39, 0xcb, 0xbe, 0x8c, 0x73, 0x7f}longeur: 32
{0x04, 0xc4, 0xb7, 0xf1, 0x38, 0xce, 0x41, 0x7b, 0x4a, 0xde, 0x72, 0x07, 0x28, 0xd3, 0x87, 0xf3, 0x5d, 0x96, 0xf4, 0x18, 0x28, 0x56, 0x29, 0xa5, 0xf4, 
0xeb, 0x49, 0x89, 0x94, 0xc8, 0xd1, 0xcc, 0xba, 0xf0, 0x2c, 0xb9, 0x8b, 0xa5, 0xe5, 0xf4, 0xec, 0x08, 0xe8, 0x88, 0x98, 0x6c, 0x8e, 0x05, 0xa4, 0x32, 0x80, 0x00, 0xf8, 0x67, 0xc1, 0x49, 0x55, 0x37, 0xad, 0x83, 0xa6, 0x5f, 0x23, 0x9d, 0x21}longeur: 65

Clé privée en format hexadécimal: 586e9539cfd9dbda226964fb28f0a5af5f61e6943d539c06c7f6b4ef0a3ae8d5
Public key (X9.62 format) length: 0411962395491bad2c6c9d9c944b85d189df2dd9d6f3ce1e90efce7d8ca1b924c8be041d1b4ce6c70f28d0b2f75d02cd8e090b45a2803587c820aae4118e1d1c78
Public key (X9.62 format) length: 65
{0x58, 0x6e, 0x95, 0x39, 0xcf, 0xd9, 0xdb, 0xda, 0x22, 0x69, 0x64, 0xfb, 0x28, 0xf0, 0xa5, 0xaf, 0x5f, 0x61, 0xe6, 0x94, 0x3d, 0x53, 0x9c, 0x06, 0xc7, 
0xf6, 0xb4, 0xef, 0x0a, 0x3a, 0xe8, 0xd5}longeur: 32
{0x04, 0x11, 0x96, 0x23, 0x95, 0x49, 0x1b, 0xad, 0x2c, 0x6c, 0x9d, 0x9c, 0x94, 0x4b, 0x85, 0xd1, 0x89, 0xdf, 0x2d, 0xd9, 0xd6, 0xf3, 0xce, 0x1e, 0x90, 
0xef, 0xce, 0x7d, 0x8c, 0xa1, 0xb9, 0x24, 0xc8, 0xbe, 0x04, 0x1d, 0x1b, 0x4c, 0xe6, 0xc7, 0x0f, 0x28, 0xd0, 0xb2, 0xf7, 0x5d, 0x02, 0xcd, 0x8e, 0x09, 0x0b, 0x45, 0xa2, 0x80, 0x35, 0x87, 0xc8, 0x20, 0xaa, 0xe4, 0x11, 0x8e, 0x1d, 0x1c, 0x78}longeur: 65
--------------------------------------------------------------------------------------------------------------------------------
============================================================================================================================================
import base64
from cryptography import x509
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import serialization


def extract_pubkey_ecc_x963():

    with open("certificatePerso_ecc.pem", "rb") as f:
        cert_data = f.read()
    cert = x509.load_pem_x509_certificate(cert_data)
    public_key = cert.public_key()
    ansi_public_key = public_key.public_bytes(
        encoding=serialization.Encoding.X962,
        format=serialization.PublicFormat.UncompressedPoint
    )

    hex_public_key = ansi_public_key.hex()
    return hex_public_key


print(extract_pubkey_ecc_x963())
===================================================================================================================================================
Clé privée en format hexadécimal: 92e4686442d5ff9f388bad4ec4a4b35b008174e21c8d9928a5dfe5afe455961e
Public key (X9.62 format) length: 040fefce34557abb759998d85508651d035031ed87759819fa5215de0a12321bbc1f5704f1e96a480ffc33732334a5a39f3fc9c88f2fbe7ec3b7ab106ceaabe8c4
Public key (X9.62 format) length: 65
{0x92, 0xe4, 0x68, 0x64, 0x42, 0xd5, 0xff, 0x9f, 0x38, 0x8b, 0xad, 0x4e, 0xc4, 0xa4, 0xb3, 0x5b, 0x00, 0x81, 0x74, 0xe2, 0x1c, 0x8d, 0x99, 0x28, 0xa5, 
0xdf, 0xe5, 0xaf, 0xe4, 0x55, 0x96, 0x1e}longeur: 32
{0x04, 0x0f, 0xef, 0xce, 0x34, 0x55, 0x7a, 0xbb, 0x75, 0x99, 0x98, 0xd8, 0x55, 0x08, 0x65, 0x1d, 0x03, 0x50, 0x31, 0xed, 0x87, 0x75, 0x98, 0x19, 0xfa, 
0x52, 0x15, 0xde, 0x0a, 0x12, 0x32, 0x1b, 0xbc, 0x1f, 0x57, 0x04, 0xf1, 0xe9, 0x6a, 0x48, 0x0f, 0xfc, 0x33, 0x73, 0x23, 0x34, 0xa5, 0xa3, 0x9f, 0x3f, 0xc9, 0xc8, 0x8f, 0x2f, 0xbe, 0x7e, 0xc3, 0xb7, 0xab, 0x10, 0x6c, 0xea, 0xab, 0xe8, 0xc4}longeur: 65
----------------------------- Hex -----BASE64
import binascii
import base64


def hex_to_base64(hex_string):
    try:
        hex_bytes = bytes.fromhex(hex_string)
        base64_bytes = base64.b64encode(hex_bytes)
        return base64_bytes.decode('ascii')
    except binascii.Error:
        return "Erreur : La chaîne hexadécimale est invalide."


def base64_to_hex(base64_string):
    try:
        base64_bytes = base64_string.encode('ascii')
        hex_bytes = base64.b64decode(base64_bytes)
        return hex_bytes.hex().upper()
    except binascii.Error:
        return "Erreur : La chaîne Base64 est invalide."


# Conversion de la chaîne hexadécimale en Base64
hex_string = "040fefce34557abb759998d85508651d035031ed87759819fa5215de0a12321bbc1f5704f1e96a480ffc33732334a5a39f3fc9c88f2fbe7ec3b7ab106ceaabe8c4"
base64_result = hex_to_base64(hex_string)
print("Chaîne hexadécimale :", hex_string)
print("Résultat Base64 :", base64_result+' '+str(len(base64_result)))

# Conversion de la chaîne Base64 en hexadécimal
base64_string = "SGVsbG8gV29ybGQ="
hex_result = base64_to_hex(base64_string)
print("Chaîne Base64 :", base64_string)
print("Résultat hexadécimal :", hex_result)
-------------------------------------------------------------------------------------------------------
#include <string.h>

void split(const char *str, const char *delimiters, char **tokens, int maxTokens) {
    char *token;
    int tokenIndex = 0;

    // Copie de la chaîne originale dans une variable modifiable
    char *strCopy = strdup(str);

    // Extraction du premier token
    token = strtok(strCopy, delimiters);

    // Tant qu'il y a des tokens et que le nombre maximum n'est pas atteint
    while (token != NULL && tokenIndex < maxTokens) {
        tokens[tokenIndex] = token;
        tokenIndex++;

        // Extraction du prochain token
        token = strtok(NULL, delimiters);
    }

    // Libération de la mémoire allouée pour la copie de la chaîne
    free(strCopy);
}

-----------------------------------------------------------------------------------------------
#include <stdio.h>

#define MAX_TOKENS 10

int main() {
    char str[] = "Hello,World,How,Are,You";
    char delimiters[] = ",";
    char *tokens[MAX_TOKENS];

    split(str, delimiters, tokens, MAX_TOKENS);

    for (int i = 0; i < MAX_TOKENS && tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
    }

    return 0;
}


------------------------------------------------
anyio==3.7.1
certifi==2023.5.7
charset-normalizer==3.2.0
colorama==0.4.6
copier==8.1.0
decorator==5.1.1
dunamai==1.18.0
exceptiongroup==1.1.2
flet==0.8.2
flet-core==0.8.2
flet-runtime==0.8.2
funcy==2.0
greenlet==2.0.2
h11==0.14.0
httpcore==0.17.3
httpx==0.24.1
idna==3.4
Jinja2==3.1.2
jinja2-ansible-filters==1.3.2
MarkupSafe==2.1.3
oauthlib==3.2.2
packaging==23.1
pathspec==0.11.1
plumbum==1.8.2
prompt-toolkit==3.0.39
pycryptodome==3.18.0
pydantic==1.10.11
Pygments==2.15.1
pypng==0.20220715.0
pyserial==3.5
pywin32==306
PyYAML==6.0
pyyaml-include==1.3.1
qrcode==7.4.2
questionary==1.10.0
repath==0.9.0
requests==2.31.0
six==1.16.0
sniffio==1.3.0
SQLAlchemy==2.0.19
typing-extensions==4.7.1
urllib3==2.0.3
watchdog==3.0.0
close_serial_ports()
wcwidth==0.2.6
websocket-client==1.6.1
websockets==11.0.3
----------------------------------------------------------------------
import os
import psutil

# Fonction pour terminer les activités de PySerial
def close_serial_ports():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name'])
            if 'python' in pinfo['name'].lower() and 'serial' in pinfo['name'].lower():
                os.kill(pinfo['pid'], 9)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Exemple d'utilisation
# Ferme toutes les connexions série avant d'utiliser une fonction spécifique

# Ferme toutes les connexions série en cours
close_serial_ports()

# Utilisez maintenant la fonction spécifique
# ... votre code ici ...


------------------------------------------------------------------------------------------
Clé privée :
{0xbe,0x84,0xff,0xa5,0x77,0x4,0xc6,0xfc,0x19,0x53,0x46,0xaf,0x61,0x9d,0x43,0x70,0x10,0x3a,0x73,0x3e,0xd8,0x68,0xd0,0x4a,0x5c,0xa4,0xb1,0xb2,0xc5,0x0,0x16,0x2a}
Clé publique :
{0x3a,0x6e,0xb6,0x78,0xb5,0xd5,0x3,0xa5,0x73,0xfb,0x96,0x22,0x94,0x5a,0x55,0x3f,0xe1,0x83,0x2f,0xc7,0x46,0xd0,0x38,0x15,0x9c,0xb7,0xde,0x61,0xd3,0x3f,0x28,0xdc,e8,0xf3,0xcf,0x66,0x31,0x2c,0x42,0xe9,0x9f,0x3d,0x6c,0x7d,0x24,0xc4,0x88,0x46,0x92,0x2,0xa1,0xbd,0x3b,0x53,0x7c,0x58,0x58,0x1a,0xbb,0x68,0xc,0xf4,0x9f,0x93}
-------------------------------------------------------------
Clé privée (hex) : 98a87b676185f120a909f832516bed5f1c2cb8832a64b4a4d9caad7744153fe4
Clé publique (hex) : 024260fd8af89f8d2c916c03243bb7e4177244b55b758fc379332db0cb0e5faba3
Clé privée RSA : {0x98, 0xa8, 0x7b, 0x67, 0x61, 0x85, 0xf1, 0x20, 0xa9, 0x09, 0xf8, 0x32, 0x51, 0x6b, 0xed, 0x5f, 0x1c, 0x2c, 0xb8, 
0x83, 0x2a, 0x64, 0xb4, 0xa4, 0xd9, 0xca, 0xad, 0x77, 0x44, 0x15, 0x3f, 0xe4}
Clé privée RSA : {0x02, 0x42, 0x60, 0xfd, 0x8a, 0xf8, 0x9f, 0x8d, 0x2c, 0x91, 0x6c, 0x03, 0x24, 0x3b, 0xb7, 0xe4, 0x17, 0x72, 0x44, 
0xb5, 0x5b, 0x75, 0x8f, 0xc3, 0x79, 0x33, 0x2d, 0xb0, 0xcb, 0x0e, 0x5f, 0xab, 0xa3}
------------------------------------------------------------------------------------------------------------------------------
Clé privée RSA : {0xb4, 0xde, 0xdf, 0x79, 0x41, 0x5a, 0x01, 0x94, 0x96, 0x0c, 0x0f, 0xd0, 0xbe, 0x64, 0x35, 0xbf, 0xbe, 0xba, 0x5a, 
0xcf, 0xa7, 0x34, 0xae, 0xe7, 0xcc, 0xac, 0x06, 0xe8, 0x2b, 0x5b, 0x43, 0xbe}
Clé privée RSA : {0x04, 0x04, 0x4c, 0x45, 0x18, 0x62, 0x91, 0x77, 0xc7, 0xcd, 0x63, 0x94, 0x95, 0xfc, 0xcb, 0x45, 0x1a, 0x9d, 0xe7, 
0x23, 0xaa, 0xb8, 0xa4, 0x4f, 0xdd, 0x18, 0xbf, 0x75, 0x54, 0x72, 0x67, 0x4b, 0xe0, 0x6e, 0x1c, 0x86, 0xd9, 0xb0, 0xb7, 0xd4, 0x6e, 
0xa4, 0xec, 0xcc, 0x7b, 0x73, 0xd4, 0xeb, 0xec, 0x0d, 0x17, 0xf8, 0x83, 0xc2, 0x66, 0x8f, 0x5c, 0x92, 0xa2, 0x18, 0x60, 0xa5, 0x55, 
0xbf, 0x51, 0x28}
---------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import ec  
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
import base64

# Génération de la paire de clés 
private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
public_key = private_key.public_key()

# Chargement du certificat ECC  
with open("certificate.pem", "rb") as f:
    certificate = x509.load_pem_x509_certificate(f.read(), default_backend())

# Récupération de la clé publique à partir du certificat
public_key = certificate.public_key() 

# Chiffrement du message
plaintext = b"Mon message secret"
ciphertext = public_key.encrypt(
    plaintext,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)

# Encodage en base64 pour le stockage/transport
ciphertext_b64 = base64.b64encode(ciphertext)

print(ciphertext_b64)

---------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    cipher_text = public_key.encrypt(
        message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return cipher_text

def decrypt_message(cipher_text, private_key):
    plain_text = private_key.decrypt(
        cipher_text,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plain_text.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)

---------------------------------------------------------------------------------------------------
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def generate_ecc_key_pair():
    private_key = ec.generate_private_key(ec.SECP256R1(), default_backend())
    public_key = private_key.public_key()
    return private_key, public_key

def encrypt_message(message, public_key):
    message = message.encode('utf-8')
    # Générer une clé de chiffrement symétrique à partir de la clé publique
    shared_key = public_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer une clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Initialiser un vecteur d'initialisation aléatoire pour le mode CBC
    iv = os.urandom(16)

    # Créer l'objet de chiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Chiffrer le message
    padded_data = encryptor.update(message) + encryptor.finalize()

    # Retourner le vecteur d'initialisation et les données chiffrées pour le déchiffrement ultérieur
    return iv + padded_data

def decrypt_message(cipher_text, private_key):
    # Extraire le vecteur d'initialisation du texte chiffré
    iv = cipher_text[:16]
    cipher_text = cipher_text[16:]

    # Générer la clé de chiffrement symétrique à partir de la clé privée
    shared_key = private_key.exchange(ec.ECDH(), ec.generate_private_key(ec.SECP256R1(), default_backend()))

    # Dérivation de clé pour créer la clé de chiffrement utilisable
    kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=None, iterations=100000, backend=default_backend())
    symmetric_key = kdf.derive(shared_key)

    # Créer l'objet de déchiffrement
    cipher = Cipher(algorithms.AES(symmetric_key), modes.CFB(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Déchiffrer le message
    decrypted_data = decryptor.update(cipher_text) + decryptor.finalize()

    return decrypted_data.decode('utf-8')

# Exemple d'utilisation
if __name__ == "__main__":
    # Générer une paire de clés ECC (private_key, public_key)
    private_key, public_key = generate_ecc_key_pair()

    # Chiffrer un message avec la clé publique
    message_to_encrypt = "Ce message est confidentiel."
    cipher_text = encrypt_message(message_to_encrypt, public_key)
    print("Message chiffré:", cipher_text)

    # Déchiffrer le message avec la clé privée
    decrypted_message = decrypt_message(cipher_text, private_key)
    print("Message déchiffré:", decrypted_message)
----------------------------------------------------------------------------------------
{0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 
0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc1, 0x75, 0xca, 0x40, 0xe8, 0xa3, 0xbd, 0x60, 0x88, 0xd0, 0xbc, 0xb7, 0xb4, 0x89, 0x4b, 0x09, 0x93, 0x38, 0xa1, 0xdd, 0xbb, 0x9e, 0xfa, 0xe8, 0xc5, 0x21, 0x5a, 0x1a, 0x4e, 0x1b, 0xd9, 0xc5, 0x8a, 0xcb, 0xd7, 0x26, 0xf6, 0x75, 0xbc, 0xd8, 0xf6, 0x3d, 0xcd, 0x6d, 0x01, 0x99, 0x52, 0x4b, 0x4d, 0x01, 0xad, 0xf9, 0x78, 0x34, 0xcb, 0x8e, 0x60, 0xfd, 0x13, 0x92, 0x07, 0x50, 0x24, 0x9f, 0xdb, 0x7f, 0xe0, 0x7a, 0x6a, 0x20, 0xf8, 0x79, 0xb4, 0x9e, 0x75, 0x92, 0xea, 0x45, 0xc5, 0x3b, 0xa0, 0x99, 0x4b, 0x84, 0x8f, 0x5d, 0xeb, 0x90, 0x74, 0x63, 0xcb, 0x0b, 0x89, 0x66, 0x1d, 0x25, 0x74, 0xcb, 0x6a, 0xf7, 0x37, 0xab, 0x3c, 0xc6, 0xfb, 0x82, 0x68, 0x68, 0xeb, 0x74, 0x38, 0x5b, 0xfd, 0x1d, 0x3b, 0xb6, 0xc9, 0x04, 0x93, 0x34, 0xca, 0x91, 0x25, 0x0d, 0x66, 0x31, 0x0e, 0xcf, 0x52, 0x03, 0x63, 0x54, 0x0a, 0x30, 0xef, 0x81, 0x70, 0x8a, 
0x03, 0xa8, 0xc8, 0xd7, 0x35, 0x21, 0x5f, 0x7a, 0x72, 0x5f, 0x37, 0x87, 0x36, 0xe5, 0x20, 0x83, 0x88, 0xbe, 0xc2, 0x61, 0x4b, 0x24, 0xf7, 0xb0, 0x11, 0x9c, 0xa0, 0x99, 0x61, 0xb7, 0xd0, 0x9f, 0x45, 0xb1, 0x21, 0x2a, 0xe0, 0x27, 0xfa, 0xc6, 0x9c, 0xc7, 0x13, 0xc5, 0xff, 0x65, 0x28, 0x10, 0x9d, 0xb0, 0x10, 0xe7, 0xcb, 0xb7, 0xbc, 0x52, 0xa7, 0xfe, 0x1a, 0x32, 0x96, 0xc7, 0x3d, 0xaf, 0x1b, 0xa4, 0x76, 0x70, 0xee, 0x1a, 0xf9, 0xb7, 0x77, 0xd3, 0xb6, 0x69, 0x61, 0x8a, 0x15, 0x78, 0x77, 0x3d, 0x75, 0xc4, 0xdb, 0xd3, 0xdc, 0x61, 0x18, 0x7c, 0xc9, 0xb2, 0x8d, 0x92, 0xdb, 0x2d, 0x67, 0x8a, 0xba, 0x8d, 0x25, 0xfd, 0xe2, 0x53, 0xb8, 0x94, 0xae, 0x47, 0xaf, 0x21, 0xd6, 0xf4, 0x0b, 0x97, 0x07, 0x52, 0x0f, 0xa1, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x01, 0xd8, 0x4e, 0xba, 0x79, 0xbd, 0x7e, 0x03, 0xda, 0xaa, 0x2a, 0xf2, 0x91, 0x8d, 0x31, 0xa3, 0x00, 0xbd, 0x6c, 0x85, 0xc1, 0xd1, 0x4d, 0x51, 
0x44, 0xf8, 0x01, 0x74, 0xf8, 0xc3, 0xb9, 0x3a, 0xf2, 0x0c, 0xe9, 0x9b, 0x5c, 0x84, 0x58, 0xed, 0xb4, 0xc3, 0x78, 0x1f, 0x0f, 0x01, 0xd8, 0x50, 0x11, 0x86, 0xef, 0x92, 0xce, 0x7b, 0xaa, 0x69, 0x4c, 0x31, 0x7d, 0xab, 0x49, 0xd8, 0x90, 0xd0, 0xd9, 0x76, 0x09, 0xbd, 0x01, 0x20, 0x19, 0x5e, 0x87, 0xc3, 0x6f, 0x19, 0x9c, 0x94, 0x57, 0xc2, 0x2e, 0xd0, 0xe7, 0x70, 0x77, 0x31, 0x8d, 0x1a, 0x8e, 0x91, 0x99, 0x11, 0x1e, 0x19, 0x54, 0x33, 0xd4, 0x3e, 0x50, 0x61, 0xd5, 0x2d, 0x13, 0xe2, 0x4d, 0xe9, 0xbb, 0x77, 0x2c, 0xaf, 0xaa, 0x0d, 0xee, 0x87, 0x05, 0xd7, 0xc3, 0x69, 0x00, 0xc2, 0x63, 0x20, 0x29, 0x3b, 0x4c, 0x7b, 0x31, 0x49, 0xf2, 0x9c, 0xb8, 0xd8, 0x6d, 0xa1, 0xe8, 0x6c, 0x08, 0xc6, 0xcf, 0x32, 0x0a, 0xb0, 0x38, 0xcf, 0x83, 0xa7, 0x71, 0xdd, 0x11, 0x18, 0xd1, 0xca, 0x00, 0xfc, 0x6e, 0xce, 0xc7, 0xea, 0x83, 0xb1, 0x04, 0xa5, 0x61, 0xfe, 0x4b, 0x1a, 0x92, 0xdf, 0xe8, 0x05, 0x61, 0xff, 0x61, 0x4b, 0x43, 
0xbd, 0xdc, 0xc7, 0xe9, 0x67, 0x79, 0x69, 0xb1, 0x4e, 0xa8, 0xfd, 0xde, 0xaa, 0x5a, 0x26, 0x5e, 0x52, 0xe8, 0xcb, 0xa2, 0xdb, 0x84, 0xb8, 0xbf, 0x04, 0xcf, 0xc3, 0x54, 0xa6, 0xcb, 0x57, 0xca, 0x0a, 0x98, 0xf9, 0x23, 0x33, 0x37, 0x36, 0xa8, 0xcb, 0x0e, 0x33, 0x30, 0x03, 0x26, 0x1f, 0xfd, 0xa9, 0xfb, 0x8e, 0xee, 0xd6, 0x72, 0x96, 0x0c, 0xc5, 0x5c, 0xa2, 0xbe, 0x10, 0x0c, 0x09, 0x17, 0x64, 0xac, 0x3a, 0x35, 0x64, 0x83, 0x26, 0x67, 0x6b, 0x77, 0x57, 0x13, 0xf7, 0x53, 0xcd, 0xf6, 0x45, 0x02, 0x81, 0x81, 0x00, 0xd1, 0xb5, 0x9a, 0xcc, 0xcc, 0x4c, 0x46, 0x49, 0xa2, 0x7f, 0x3d, 0xc5, 0x61, 0xb0, 0x2a, 0x35, 0x32, 0x2c, 0x31, 0x39, 0x36, 0x4b, 0x9e, 0xd5, 0x24, 0xef, 0xf3, 0xd6, 0x41, 0x78, 0xed, 0x1f, 0x43, 0xcc, 0xd7, 0x18, 0xf9, 0x46, 0xe8, 0x11, 0x35, 0x8e, 0x94, 0x10, 0x4c, 0x63, 0x19, 0x8d, 0x53, 0x78, 0x94, 0xa0, 0xd3, 0x9f, 0xad, 0x9f, 0x17, 0x98, 0x7f, 0x10, 0x56, 0x52, 0xc6, 0xcf, 0x3a, 0x96, 
0x82, 0x37, 0xea, 0x0f, 0xe5, 0xb5, 0x5d, 0x56, 0x6c, 0x82, 0x39, 0x3e, 0x1f, 0x33, 0x16, 0x48, 0x70, 0xde, 0x4b, 0x5f, 0xa1, 0x42, 0xf1, 0x44, 0x5c, 0xfa, 0x1d, 0xa5, 0x53, 0xe6, 0x72, 0x0b, 0xb0, 0x29, 0x0d, 0xe0, 0x8e, 0xdf, 0xb0, 0xb6, 0x3d, 0x31, 0x87, 0x62, 0x9d, 0xa5, 0xac, 0x49, 0xe7, 0xde, 0x5d, 0x47, 0x7f, 0x05, 0x70, 0x91, 0x33, 0xcc, 0x52, 0x45, 0x51, 0x67, 0x02, 0x81, 0x81, 0x00, 0xec, 0x29, 0xf5, 0xee, 0xac, 0xc1, 0xd2, 0x9c, 0x7c, 0x2f, 0xa6, 0x00, 0x1f, 0x5d, 0x50, 0xa9, 0xa1, 0xa6, 0x1b, 0x41, 0x76, 0xd5, 0xa6, 0x78, 0x85, 0xd7, 0xa8, 0xe4, 0x1c, 0x6f, 0x49, 0x52, 0xfa, 0x95, 0x8d, 0x62, 0xd8, 0x87, 0x52, 0x8a, 0xcb, 0xb0, 0x6e, 0x24, 0x31, 0x7e, 0xda, 0x36, 0x7f, 0x41, 0xab, 0x03, 0x19, 0x94, 0x34, 0xf5, 0x0b, 0xbf, 0x1e, 0xf1, 0x50, 0x9c, 0x32, 0xab, 0x6d, 0x70, 0xec, 0x5d, 0xe9, 0x93, 0x70, 0x1f, 0xe4, 0x62, 0x58, 0x3f, 0x52, 0xab, 0x12, 0xbd, 0xb1, 0x92, 0x2e, 0x8b, 0x92, 
0x69, 0x2f, 0x65, 0x74, 0x62, 0xb5, 0xc5, 0xf3, 0x4d, 0xe6, 0xf7, 0x27, 0x9a, 0x77, 0xbc, 0x6a, 0xec, 0xe1, 0xdb, 0xf5, 0x95, 0x99, 0x6f, 0xb0, 0x09, 0x96, 0xc6, 0xf5, 0x5e, 0xc2, 0x14, 0xb6, 0x34, 0xca, 0xfe, 0x30, 0x18, 0x94, 0x73, 0x8e, 0x6d, 0xc9, 0xb7, 0x02, 0x81, 0x81, 0x00, 0xd1, 0x1e, 0xe0, 0xdc, 0x43, 0x09, 0xf8, 0xb9, 0x6b, 0x22, 0xa9, 0xad, 0x8f, 0xe9, 0xc5, 0x5d, 0x40, 0xc8, 0x12, 0xd9, 0xf3, 0x8b, 0xdb, 0x3a, 0xbf, 0x57, 0xcc, 0xf7, 0x26, 0x58, 0xf9, 0x54, 0xc9, 0x1e, 0x96, 0x8c, 0x9f, 0xe0, 0x16, 0x81, 0x3a, 0xc0, 0x10, 0x64, 0x64, 0x58, 0x1a, 0x5d, 0xf5, 0x13, 0xf4, 0x5a, 0xa0, 0x4d, 0xc6, 0x2c, 0x34, 0xb2, 0x6c, 0x5b, 0x15, 0x49, 0xfc, 0x59, 0x20, 0x1a, 0x80, 0x86, 0x53, 0x91, 0x40, 0xc6, 0xe7, 0xe9, 0xcb, 0xd0, 0xdc, 0x56, 0x57, 0x74, 0x71, 0x4f, 0x11, 0xc6, 0x8a, 0xb1, 0x35, 0x35, 0x75, 0x34, 0x6f, 0xe7, 0x36, 0xf2, 0xeb, 0xc4, 0x8c, 0x8b, 0x9d, 0x42, 0x83, 0x45, 0x20, 0x14, 
0x6e, 0xba, 0x7c, 0x31, 0x4c, 0xc9, 0x89, 0x5d, 0x71, 0x7e, 0x4d, 0x8b, 0x4f, 0xc7, 0x81, 0x22, 0x22, 0x8b, 0x99, 0x74, 0xb1, 0xc1, 0xd0, 0x17, 0x02, 0x81, 0x80, 0x6f, 0xad, 0x3c, 0x05, 0xfc, 0x9d, 0xbf, 0x49, 0x8e, 0x94, 0x3d, 0xac, 0x8b, 0x28, 0x66, 0x6f, 0x80, 0xe8, 0x7a, 0xb5, 0x0f, 0x4b, 0xe2, 0xe7, 0xd5, 0x6a, 0xf1, 0x0b, 0xc5, 0xc2, 0x7e, 0x6b, 0x05, 0xe2, 0x58, 0xb4, 0xa8, 0x6d, 0xfd, 0x83, 0x72, 0xe4, 0xe0, 0x80, 0xaf, 0x03, 0x2c, 0x8f, 0x5e, 0xc8, 0x1f, 0xe5, 0x5c, 0x60, 0x30, 0x56, 0xbc, 0x92, 0x49, 0x40, 0x95, 0xfc, 0xf7, 0x1d, 0x07, 0xa8, 0xc1, 0xad, 0x7b, 0x39, 0xe4, 0x68, 0xc0, 0x68, 0x1d, 0x10, 0xfc, 0xb7, 0xb7, 0x2a, 0x0a, 0xe1, 0x74, 0xaf, 0x3d, 0xb2, 0x0d, 0xde, 0xad, 0x15, 0xcc, 0x9d, 0x69, 0xfb, 0xa9, 0xbf, 0xb0, 0x73, 0xa4, 0x31, 0x6e, 0x62, 0xcc, 0x3f, 0x66, 0xb7, 0xb2, 0x92, 0x15, 0x2d, 0xc3, 0xa6, 0x1b, 0xfc, 0x0e, 0x4d, 0x1b, 0x08, 0x86, 0x01, 0x83, 0x9e, 0xeb, 0xfc, 
0x65, 0x1a, 0xd7, 0xab, 0x02, 0x81, 0x80, 0x17, 0xdf, 0xa0, 0xe0, 0xc0, 0xa0, 0x1b, 0xaa, 0x35, 0x64, 0x7c, 0x4c, 0xc0, 0x36, 0xaa, 0xe8, 0xf3, 0x67, 0xfb, 0x01, 0xbb, 0x6d, 0x9a, 0xaa, 0xbc, 0x33, 0x46, 0x12, 0xcb, 0x26, 0xf9, 0x01, 0x63, 0x99, 0x1f, 0x3d, 0x60, 0x68, 0x9b, 0x8a, 0x4a, 0x7f, 0xb2, 0x78, 0x7a, 0x04, 0x9f, 0xea, 0xd8, 0x21, 0xa4, 0xbd, 0x81, 0x1b, 0x68, 0x79, 0x2d, 0xb7, 0x7a, 0xae, 0xf6, 0x00, 0x1b, 0xea, 0xf5, 0xac, 0xde, 0xf3, 0x50, 0xf6, 0xa1, 0x9b, 0x2f, 0xdf, 0x9e, 0xed, 0x80, 0x84, 0x28, 0x6c, 0xdf, 0x21, 0x13, 0xfd, 0x1a, 0x94, 0x1a, 0x05, 0xdf, 0xac, 0xac, 0x8f, 0xed, 0x23, 0xd4, 0x3b, 0x52, 0x90, 0x39, 0xa9, 0xae, 0x66, 0x40, 0x1a, 0xec, 0x6d, 0xcd, 0xa6, 0x6c, 0x5a, 0xd6, 0x20, 0xb9, 0xf0, 0x7d, 0x6d, 0xc5, 0x1f, 0xa5, 0x80, 0xa5, 0x31, 0xff, 0xf3, 0x4d, 0xe3, 0x05, 0x4f}longeur: 1217
{0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 
0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc1, 0x75, 0xca, 0x40, 0xe8, 0xa3, 0xbd, 0x60, 0x88, 0xd0, 0xbc, 0xb7, 0xb4, 0x89, 0x4b, 0x09, 0x93, 0x38, 0xa1, 0xdd, 0xbb, 0x9e, 0xfa, 0xe8, 0xc5, 0x21, 0x5a, 0x1a, 0x4e, 0x1b, 0xd9, 0xc5, 0x8a, 0xcb, 0xd7, 0x26, 0xf6, 0x75, 0xbc, 0xd8, 0xf6, 0x3d, 0xcd, 0x6d, 0x01, 0x99, 0x52, 0x4b, 0x4d, 0x01, 0xad, 0xf9, 0x78, 0x34, 0xcb, 0x8e, 0x60, 0xfd, 0x13, 0x92, 0x07, 0x50, 0x24, 0x9f, 0xdb, 0x7f, 0xe0, 0x7a, 0x6a, 0x20, 0xf8, 0x79, 0xb4, 0x9e, 0x75, 0x92, 0xea, 0x45, 0xc5, 0x3b, 0xa0, 0x99, 0x4b, 0x84, 0x8f, 0x5d, 0xeb, 0x90, 0x74, 0x63, 0xcb, 0x0b, 0x89, 0x66, 0x1d, 0x25, 0x74, 0xcb, 0x6a, 0xf7, 0x37, 0xab, 0x3c, 0xc6, 0xfb, 0x82, 0x68, 0x68, 0xeb, 0x74, 0x38, 0x5b, 0xfd, 0x1d, 0x3b, 0xb6, 0xc9, 0x04, 0x93, 0x34, 0xca, 0x91, 0x25, 0x0d, 0x66, 0x31, 0x0e, 0xcf, 0x52, 0x03, 0x63, 0x54, 0x0a, 0x30, 0xef, 0x81, 0x70, 0x8a, 0x03, 0xa8, 0xc8, 0xd7, 0x35, 
0x21, 0x5f, 0x7a, 0x72, 0x5f, 0x37, 0x87, 0x36, 0xe5, 0x20, 0x83, 0x88, 0xbe, 0xc2, 0x61, 0x4b, 0x24, 0xf7, 0xb0, 0x11, 0x9c, 0xa0, 0x99, 0x61, 0xb7, 0xd0, 0x9f, 0x45, 0xb1, 0x21, 0x2a, 0xe0, 0x27, 0xfa, 0xc6, 0x9c, 0xc7, 0x13, 0xc5, 0xff, 0x65, 0x28, 0x10, 0x9d, 0xb0, 0x10, 0xe7, 0xcb, 0xb7, 0xbc, 0x52, 0xa7, 0xfe, 0x1a, 0x32, 0x96, 0xc7, 0x3d, 0xaf, 0x1b, 0xa4, 0x76, 0x70, 0xee, 0x1a, 0xf9, 0xb7, 0x77, 0xd3, 0xb6, 0x69, 0x61, 0x8a, 0x15, 0x78, 0x77, 0x3d, 0x75, 0xc4, 0xdb, 0xd3, 0xdc, 0x61, 0x18, 0x7c, 0xc9, 0xb2, 0x8d, 0x92, 0xdb, 0x2d, 0x67, 0x8a, 0xba, 0x8d, 0x25, 0xfd, 0xe2, 0x53, 0xb8, 0x94, 0xae, 0x47, 0xaf, 0x21, 0xd6, 0xf4, 0x0b, 0x97, 0x07, 0x52, 0x0f, 0xa1, 0x02, 0x03, 0x01, 0x00, 0x01}longeur: 294
------------------------------------------------------------------------------------------------------------------------------
Clé privée (hexadécimal) :
 308204bd020100300d06092a864886f70d0101010500048204a7308204a30201000282010100ae00541546b473a29bea32bd06cfd0a3b519aebaa532489ac87cd1312a8db4b78b2f97884e7339d7d424a4e1bbe964559891e84569aced3d7a972177f15c44608e6e3e77c3bedd3a47cb8ba5c39c216c56dbeddde99d79a69420b4049039b474b0f5fffecce24d7baf07ab63349cd4ce049640170d498563835f3cd5a00ad916f261d65cf818e7b089f48e9fdafd6306c594f7fc4d3a9db888c3d8466fbd930d91134bf7ace55b1ad721dc9bdb65287333ad89a5c957cb437b3fef73b5c021a6831ea3af3721ee85f823f565b4a8c09422dc290b4b6aedb27db2f91ccd9b6c92e7c0bcdce9be2534f597907426d7217f88798d2c0bf7ea9e28ea281cbcd1d5f302030100010282010011d30bca002bb51ac7c1068091a591386bf15d1256a0df8a27968db16d2c0602b559e33a7ddad4e6949f4a5aab6ebdadfd0a99521f00ad6eda538804aaef6a3bbfeb702fc198183e83a348c36ad5e020a2873607410ab62f07c68fda55d1eb77f6b6c48a1bffe4b3125b85458cdab1fc06c1438079067a8916a8976944d347a8a4525db80a0c3725bc72d95594399a93853d88e3600d619f3bba9336403be6b3082d0dd55db8cfb0b8dba0b084078dd0bdacb6d7cc02f36ab327452ba9600c4b1fbf96d84d7d85feb16e2c363bf1034e2dec92f5a4e9e36348e37f400b26918c236cdb16fbb7f8dd03408bd1b123964b1d65d4461c166f82247d1569b4d597b902818100dd677b3f38b1cb9bea4927372d5f89c394f1e26d97db48a1befb82f35c155ab64b9ac511d0a32bd8561b08a7b28d1eae5828d04c9a4ae722ca6ba73b39db725e5853f8e6d5720bc4e694acb638ece54e8de6ce4b79565e83f241d9e9abd67cebf5604914ad085bec89d7ceb76bdc055c5d62af124d00d697f6382e3821369f0902818100c930a78e3f0f352c605910deec738c75aa333ce0070aa74265e23a2e5b8ca7318b5d1c0e02eaf110a4f8d0054aa536c5cfa93c1f3f6169e8939f04ac1469ee53a992a5c0e0375003759f9e3d0b017ed50b93e98bb7c977358ceb1509359cdeec5e0b04455b1f46910a03a11649080eef9b3cef9b04e5d1dcac1969ccba4a901b02818017cf7129b3672b867103bcfbea1d442b8c7116f0c24c0adb9a366236d9c8522118b064512e26de283dda5a6bee7fceb4e13642707a8763a41230d1a344ed9cb718b8af23e40087d37d18b01a48b4f154295e9100fce394f68baf19484ffa9924a716dbc52576a8ac1f86ddec4be5358e615ca3874c50b2c354ef65c9138954410281803bdf25cdd8083f8bb0347127d5f7e0f1d72f9e4b10ed63af07c0d60d9ba2f4d272a5c7c687a9c10971feb5710db0b2e7151048db07b286a0f6e558af98f7993bfe77acaa044f919925f4d55357261fc768c5a0b7ba7ed2e1f5c8b39ee4fc84fe9451f4f86ad098e06ab97fc3b1021be7c42bd3262fc3f0bb19e00a3329b12cc702818100be55a7fd4bad2958849bf07417ce63d9c625b8150ed173b9fbaba12b55b1b83689b457b0d46a57390a427f1d5dbdd486f974100db46f31e49d5c879b436e163859cf4a7a9cb0a600e96ebb24c290b9859e5f94b0dbaa644d0169db0b6ba5fd2ce24580c08f8775ddf6d318cbd8c37cc0703d96c1e2339a0c8393b6ad39b5d7c6

Clé publique (hexadécimal) :
 30820122300d06092a864886f70d01010105000382010f003082010a0282010100ae00541546b473a29bea32bd06cfd0a3b519aebaa532489ac87cd1312a8db4b78b2f97884e7339d7d424a4e1bbe964559891e84569aced3d7a972177f15c44608e6e3e77c3bedd3a47cb8ba5c39c216c56dbeddde99d79a69420b4049039b474b0f5fffecce24d7baf07ab63349cd4ce049640170d498563835f3cd5a00ad916f261d65cf818e7b089f48e9fdafd6306c594f7fc4d3a9db888c3d8466fbd930d91134bf7ace55b1ad721dc9bdb65287333ad89a5c957cb437b3fef73b5c021a6831ea3af3721ee85f823f565b4a8c09422dc290b4b6aedb27db2f91ccd9b6c92e7c0bcdce9be2534f597907426d7217f88798d2c0bf7ea9e28ea281cbcd1d5f30203010001
{0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xae, 0x00, 0x54, 0x15, 0x46, 0xb4, 0x73, 0xa2, 0x9b, 0xea, 0x32, 0xbd, 0x06, 0xcf, 0xd0, 0xa3, 0xb5, 0x19, 0xae, 0xba, 0xa5, 0x32, 0x48, 0x9a, 0xc8, 0x7c, 0xd1, 0x31, 0x2a, 0x8d, 0xb4, 0xb7, 0x8b, 0x2f, 0x97, 0x88, 0x4e, 0x73, 0x39, 0xd7, 0xd4, 0x24, 0xa4, 0xe1, 0xbb, 0xe9, 0x64, 0x55, 0x98, 0x91, 0xe8, 0x45, 0x69, 0xac, 0xed, 0x3d, 0x7a, 0x97, 0x21, 0x77, 0xf1, 0x5c, 0x44, 0x60, 0x8e, 0x6e, 0x3e, 0x77, 0xc3, 0xbe, 0xdd, 0x3a, 0x47, 0xcb, 0x8b, 0xa5, 0xc3, 0x9c, 0x21, 0x6c, 0x56, 0xdb, 0xed, 0xdd, 0xe9, 0x9d, 0x79, 0xa6, 0x94, 0x20, 0xb4, 0x04, 0x90, 0x39, 0xb4, 0x74, 0xb0, 0xf5, 0xff, 0xfe, 0xcc, 0xe2, 0x4d, 0x7b, 0xaf, 0x07, 0xab, 0x63, 0x34, 0x9c, 0xd4, 0xce, 0x04, 0x96, 0x40, 0x17, 0x0d, 0x49, 0x85, 0x63, 0x83, 0x5f, 0x3c, 0xd5, 0xa0, 0x0a, 0xd9, 0x16, 0xf2, 0x61, 0xd6, 0x5c, 0xf8, 0x18, 0xe7, 0xb0, 0x89, 0xf4, 0x8e, 0x9f, 0xda, 0xfd, 0x63, 0x06, 0xc5, 0x94, 0xf7, 0xfc, 0x4d, 0x3a, 0x9d, 0xb8, 0x88, 0xc3, 0xd8, 0x46, 0x6f, 0xbd, 0x93, 0x0d, 0x91, 0x13, 0x4b, 0xf7, 0xac, 0xe5, 0x5b, 0x1a, 0xd7, 0x21, 0xdc, 0x9b, 0xdb, 0x65, 0x28, 0x73, 0x33, 0xad, 0x89, 0xa5, 0xc9, 0x57, 0xcb, 0x43, 0x7b, 0x3f, 0xef, 0x73, 0xb5, 0xc0, 0x21, 0xa6, 0x83, 0x1e, 0xa3, 0xaf, 0x37, 0x21, 0xee, 0x85, 0xf8, 0x23, 0xf5, 0x65, 0xb4, 0xa8, 0xc0, 0x94, 0x22, 0xdc, 0x29, 0x0b, 0x4b, 0x6a, 0xed, 0xb2, 0x7d, 0xb2, 0xf9, 0x1c, 0xcd, 0x9b, 0x6c, 0x92, 0xe7, 0xc0, 0xbc, 0xdc, 0xe9, 0xbe, 0x25, 0x34, 0xf5, 0x97, 0x90, 0x74, 0x26, 0xd7, 0x21, 0x7f, 0x88, 0x79, 0x8d, 0x2c, 0x0b, 0xf7, 0xea, 0x9e, 0x28, 0xea, 0x28, 0x1c, 0xbc, 0xd1, 0xd5, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x11, 0xd3, 0x0b, 0xca, 0x00, 0x2b, 0xb5, 0x1a, 0xc7, 0xc1, 0x06, 0x80, 0x91, 0xa5, 0x91, 0x38, 0x6b, 0xf1, 0x5d, 0x12, 0x56, 0xa0, 0xdf, 0x8a, 0x27, 0x96, 0x8d, 0xb1, 0x6d, 0x2c, 0x06, 0x02, 0xb5, 0x59, 0xe3, 0x3a, 0x7d, 0xda, 0xd4, 0xe6, 0x94, 0x9f, 0x4a, 0x5a, 0xab, 0x6e, 0xbd, 0xad, 0xfd, 0x0a, 0x99, 0x52, 0x1f, 0x00, 0xad, 0x6e, 0xda, 0x53, 0x88, 0x04, 0xaa, 0xef, 0x6a, 0x3b, 0xbf, 0xeb, 0x70, 0x2f, 0xc1, 0x98, 0x18, 0x3e, 0x83, 0xa3, 0x48, 0xc3, 0x6a, 0xd5, 0xe0, 0x20, 0xa2, 0x87, 0x36, 0x07, 0x41, 0x0a, 0xb6, 0x2f, 0x07, 0xc6, 0x8f, 0xda, 0x55, 0xd1, 0xeb, 0x77, 0xf6, 0xb6, 0xc4, 0x8a, 0x1b, 0xff, 0xe4, 0xb3, 0x12, 0x5b, 0x85, 0x45, 0x8c, 0xda, 0xb1, 0xfc, 0x06, 0xc1, 0x43, 0x80, 0x79, 0x06, 0x7a, 0x89, 0x16, 0xa8, 0x97, 0x69, 0x44, 0xd3, 0x47, 0xa8, 0xa4, 0x52, 0x5d, 0xb8, 0x0a, 0x0c, 0x37, 0x25, 0xbc, 0x72, 0xd9, 0x55, 0x94, 0x39, 0x9a, 0x93, 0x85, 0x3d, 0x88, 0xe3, 0x60, 0x0d, 0x61, 0x9f, 0x3b, 0xba, 0x93, 0x36, 0x40, 0x3b, 0xe6, 0xb3, 0x08, 0x2d, 0x0d, 0xd5, 0x5d, 0xb8, 0xcf, 0xb0, 0xb8, 0xdb, 0xa0, 0xb0, 0x84, 0x07, 0x8d, 0xd0, 0xbd, 0xac, 0xb6, 0xd7, 0xcc, 0x02, 0xf3, 0x6a, 0xb3, 0x27, 0x45, 0x2b, 0xa9, 0x60, 0x0c, 0x4b, 0x1f, 0xbf, 0x96, 0xd8, 0x4d, 0x7d, 0x85, 0xfe, 0xb1, 0x6e, 0x2c, 0x36, 0x3b, 0xf1, 0x03, 0x4e, 0x2d, 0xec, 0x92, 0xf5, 0xa4, 0xe9, 0xe3, 0x63, 0x48, 0xe3, 0x7f, 0x40, 0x0b, 0x26, 0x91, 0x8c, 0x23, 0x6c, 0xdb, 0x16, 0xfb, 0xb7, 0xf8, 0xdd, 0x03, 0x40, 0x8b, 0xd1, 0xb1, 0x23, 0x96, 0x4b, 0x1d, 0x65, 0xd4, 0x46, 0x1c, 0x16, 0x6f, 0x82, 0x24, 0x7d, 0x15, 0x69, 0xb4, 0xd5, 0x97, 0xb9, 0x02, 0x81, 0x81, 0x00, 0xdd, 0x67, 0x7b, 0x3f, 0x38, 0xb1, 0xcb, 0x9b, 0xea, 0x49, 0x27, 0x37, 0x2d, 0x5f, 0x89, 0xc3, 0x94, 0xf1, 0xe2, 0x6d, 0x97, 0xdb, 0x48, 0xa1, 0xbe, 0xfb, 0x82, 0xf3, 0x5c, 0x15, 0x5a, 0xb6, 0x4b, 0x9a, 0xc5, 0x11, 0xd0, 0xa3, 0x2b, 0xd8, 0x56, 0x1b, 0x08, 0xa7, 0xb2, 0x8d, 0x1e, 0xae, 0x58, 0x28, 0xd0, 0x4c, 0x9a, 0x4a, 0xe7, 0x22, 0xca, 0x6b, 0xa7, 0x3b, 0x39, 0xdb, 0x72, 0x5e, 0x58, 0x53, 0xf8, 0xe6, 0xd5, 0x72, 0x0b, 0xc4, 0xe6, 0x94, 0xac, 0xb6, 0x38, 0xec, 0xe5, 0x4e, 0x8d, 0xe6, 0xce, 0x4b, 0x79, 0x56, 0x5e, 0x83, 0xf2, 0x41, 0xd9, 0xe9, 0xab, 0xd6, 0x7c, 0xeb, 0xf5, 0x60, 0x49, 0x14, 0xad, 0x08, 0x5b, 0xec, 0x89, 0xd7, 0xce, 0xb7, 0x6b, 0xdc, 0x05, 0x5c, 0x5d, 0x62, 0xaf, 0x12, 0x4d, 0x00, 0xd6, 0x97, 0xf6, 0x38, 0x2e, 0x38, 0x21, 0x36, 0x9f, 0x09, 0x02, 0x81, 0x81, 0x00, 0xc9, 0x30, 0xa7, 0x8e, 0x3f, 0x0f, 0x35, 0x2c, 0x60, 0x59, 0x10, 0xde, 0xec, 0x73, 0x8c, 0x75, 0xaa, 0x33, 0x3c, 0xe0, 0x07, 0x0a, 0xa7, 0x42, 0x65, 0xe2, 0x3a, 0x2e, 0x5b, 0x8c, 0xa7, 0x31, 0x8b, 0x5d, 0x1c, 0x0e, 0x02, 0xea, 0xf1, 0x10, 0xa4, 0xf8, 0xd0, 0x05, 0x4a, 0xa5, 0x36, 0xc5, 0xcf, 0xa9, 0x3c, 0x1f, 0x3f, 0x61, 0x69, 0xe8, 0x93, 0x9f, 0x04, 0xac, 0x14, 0x69, 0xee, 0x53, 0xa9, 0x92, 0xa5, 0xc0, 0xe0, 0x37, 0x50, 0x03, 0x75, 0x9f, 0x9e, 0x3d, 0x0b, 0x01, 0x7e, 0xd5, 0x0b, 0x93, 0xe9, 0x8b, 0xb7, 0xc9, 0x77, 0x35, 0x8c, 0xeb, 0x15, 0x09, 0x35, 0x9c, 0xde, 0xec, 0x5e, 0x0b, 0x04, 0x45, 0x5b, 0x1f, 0x46, 0x91, 0x0a, 0x03, 0xa1, 0x16, 0x49, 0x08, 0x0e, 0xef, 0x9b, 0x3c, 0xef, 0x9b, 0x04, 0xe5, 0xd1, 0xdc, 0xac, 0x19, 0x69, 0xcc, 0xba, 0x4a, 0x90, 0x1b, 0x02, 0x81, 0x80, 0x17, 0xcf, 0x71, 0x29, 0xb3, 0x67, 0x2b, 0x86, 0x71, 0x03, 0xbc, 0xfb, 0xea, 0x1d, 0x44, 0x2b, 0x8c, 0x71, 0x16, 0xf0, 0xc2, 0x4c, 0x0a, 0xdb, 0x9a, 0x36, 0x62, 0x36, 0xd9, 0xc8, 0x52, 0x21, 0x18, 0xb0, 0x64, 0x51, 0x2e, 0x26, 0xde, 0x28, 0x3d, 0xda, 0x5a, 0x6b, 0xee, 0x7f, 0xce, 0xb4, 0xe1, 0x36, 0x42, 0x70, 0x7a, 0x87, 0x63, 0xa4, 0x12, 0x30, 0xd1, 0xa3, 0x44, 0xed, 0x9c, 0xb7, 0x18, 0xb8, 0xaf, 0x23, 0xe4, 0x00, 0x87, 0xd3, 0x7d, 0x18, 0xb0, 0x1a, 0x48, 0xb4, 0xf1, 0x54, 0x29, 0x5e, 0x91, 0x00, 0xfc, 0xe3, 0x94, 0xf6, 0x8b, 0xaf, 0x19, 0x48, 0x4f, 0xfa, 0x99, 0x24, 0xa7, 0x16, 0xdb, 0xc5, 0x25, 0x76, 0xa8, 0xac, 0x1f, 0x86, 0xdd, 0xec, 0x4b, 0xe5, 0x35, 0x8e, 0x61, 0x5c, 0xa3, 0x87, 0x4c, 0x50, 0xb2, 0xc3, 0x54, 0xef, 0x65, 0xc9, 0x13, 0x89, 0x54, 0x41, 0x02, 0x81, 0x80, 0x3b, 0xdf, 0x25, 0xcd, 0xd8, 0x08, 0x3f, 0x8b, 0xb0, 0x34, 0x71, 0x27, 0xd5, 0xf7, 0xe0, 0xf1, 0xd7, 0x2f, 0x9e, 0x4b, 0x10, 0xed, 0x63, 0xaf, 0x07, 0xc0, 0xd6, 0x0d, 0x9b, 0xa2, 0xf4, 0xd2, 0x72, 0xa5, 0xc7, 0xc6, 0x87, 0xa9, 0xc1, 0x09, 0x71, 0xfe, 0xb5, 0x71, 0x0d, 0xb0, 0xb2, 0xe7, 0x15, 0x10, 0x48, 0xdb, 0x07, 0xb2, 0x86, 0xa0, 0xf6, 0xe5, 0x58, 0xaf, 0x98, 0xf7, 0x99, 0x3b, 0xfe, 0x77, 0xac, 0xaa, 0x04, 0x4f, 0x91, 0x99, 0x25, 0xf4, 0xd5, 0x53, 0x57, 0x26, 0x1f, 0xc7, 0x68, 0xc5, 0xa0, 0xb7, 0xba, 0x7e, 0xd2, 0xe1, 0xf5, 0xc8, 0xb3, 0x9e, 0xe4, 0xfc, 0x84, 0xfe, 0x94, 0x51, 0xf4, 0xf8, 0x6a, 0xd0, 0x98, 0xe0, 0x6a, 0xb9, 0x7f, 0xc3, 0xb1, 0x02, 0x1b, 0xe7, 0xc4, 0x2b, 0xd3, 0x26, 0x2f, 0xc3, 0xf0, 0xbb, 0x19, 0xe0, 0x0a, 0x33, 0x29, 0xb1, 0x2c, 0xc7, 0x02, 0x81, 0x81, 0x00, 0xbe, 0x55, 0xa7, 0xfd, 0x4b, 0xad, 0x29, 0x58, 0x84, 0x9b, 0xf0, 0x74, 0x17, 0xce, 0x63, 0xd9, 0xc6, 0x25, 0xb8, 0x15, 0x0e, 0xd1, 0x73, 0xb9, 0xfb, 0xab, 0xa1, 0x2b, 0x55, 0xb1, 0xb8, 0x36, 0x89, 0xb4, 0x57, 0xb0, 0xd4, 0x6a, 0x57, 0x39, 0x0a, 0x42, 0x7f, 0x1d, 0x5d, 0xbd, 0xd4, 0x86, 0xf9, 0x74, 0x10, 0x0d, 0xb4, 0x6f, 0x31, 0xe4, 0x9d, 0x5c, 0x87, 0x9b, 0x43, 0x6e, 0x16, 0x38, 0x59, 0xcf, 0x4a, 0x7a, 0x9c, 0xb0, 0xa6, 0x00, 0xe9, 0x6e, 0xbb, 0x24, 0xc2, 0x90, 0xb9, 0x85, 0x9e, 0x5f, 0x94, 0xb0, 0xdb, 0xaa, 0x64, 0x4d, 0x01, 0x69, 0xdb, 0x0b, 0x6b, 0xa5, 0xfd, 0x2c, 0xe2, 0x45, 0x80, 0xc0, 0x8f, 0x87, 0x75, 0xdd, 0xf6, 0xd3, 0x18, 0xcb, 0xd8, 0xc3, 0x7c, 0xc0, 0x70, 0x3d, 0x96, 0xc1, 0xe2, 0x33, 0x9a, 0x0c, 0x83, 0x93, 0xb6, 0xad, 0x39, 0xb5, 0xd7, 0xc6}longeur: 1217
{0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xae, 0x00, 0x54, 0x15, 0x46, 0xb4, 0x73, 0xa2, 0x9b, 0xea, 0x32, 0xbd, 0x06, 0xcf, 0xd0, 0xa3, 0xb5, 0x19, 0xae, 0xba, 0xa5, 0x32, 0x48, 0x9a, 0xc8, 0x7c, 0xd1, 0x31, 0x2a, 0x8d, 0xb4, 0xb7, 0x8b, 0x2f, 0x97, 0x88, 0x4e, 0x73, 0x39, 0xd7, 0xd4, 0x24, 0xa4, 0xe1, 0xbb, 0xe9, 0x64, 0x55, 0x98, 0x91, 0xe8, 0x45, 0x69, 0xac, 0xed, 0x3d, 0x7a, 0x97, 0x21, 0x77, 0xf1, 0x5c, 0x44, 0x60, 0x8e, 0x6e, 0x3e, 0x77, 0xc3, 0xbe, 0xdd, 0x3a, 0x47, 0xcb, 0x8b, 0xa5, 0xc3, 0x9c, 0x21, 0x6c, 0x56, 0xdb, 0xed, 0xdd, 0xe9, 0x9d, 0x79, 0xa6, 0x94, 0x20, 0xb4, 0x04, 0x90, 0x39, 0xb4, 0x74, 0xb0, 0xf5, 0xff, 0xfe, 0xcc, 0xe2, 0x4d, 0x7b, 0xaf, 0x07, 0xab, 0x63, 0x34, 0x9c, 0xd4, 0xce, 0x04, 0x96, 0x40, 0x17, 0x0d, 0x49, 0x85, 0x63, 0x83, 0x5f, 0x3c, 0xd5, 0xa0, 0x0a, 0xd9, 0x16, 0xf2, 0x61, 0xd6, 0x5c, 0xf8, 0x18, 0xe7, 0xb0, 0x89, 0xf4, 0x8e, 0x9f, 0xda, 0xfd, 0x63, 0x06, 0xc5, 0x94, 0xf7, 0xfc, 0x4d, 0x3a, 0x9d, 0xb8, 0x88, 0xc3, 0xd8, 0x46, 0x6f, 0xbd, 0x93, 0x0d, 0x91, 0x13, 0x4b, 0xf7, 0xac, 0xe5, 0x5b, 0x1a, 0xd7, 0x21, 0xdc, 0x9b, 0xdb, 0x65, 0x28, 0x73, 0x33, 0xad, 0x89, 0xa5, 0xc9, 0x57, 0xcb, 0x43, 0x7b, 0x3f, 0xef, 0x73, 0xb5, 0xc0, 0x21, 0xa6, 0x83, 0x1e, 0xa3, 0xaf, 0x37, 0x21, 0xee, 0x85, 0xf8, 0x23, 0xf5, 0x65, 0xb4, 0xa8, 0xc0, 0x94, 0x22, 0xdc, 0x29, 0x0b, 0x4b, 0x6a, 0xed, 0xb2, 0x7d, 0xb2, 0xf9, 0x1c, 0xcd, 0x9b, 0x6c, 0x92, 0xe7, 0xc0, 0xbc, 0xdc, 0xe9, 0xbe, 0x25, 0x34, 0xf5, 0x97, 0x90, 0x74, 0x26, 0xd7, 0x21, 0x7f, 0x88, 0x79, 0x8d, 0x2c, 0x0b, 0xf7, 0xea, 0x9e, 0x28, 0xea, 0x28, 0x1c, 0xbc, 0xd1, 0xd5, 0xf3, 0x02, 0x03, 0x01, 0x00, 0x01}longeur: 294
Message chiffré (hexadécimal) :
 a9dd417ac8f601affff8c9f826fc065c0898d8539623564a399f0af0e640830584987014e2fba8ee6e9d61440214ab3ab4b670e0c259a1d82d0fc4d21d90210666be09026131e671a562b780602cab7f96f9f6fd02bc77b7c26b4806ea9ffb93bdf36dc28a71203959da60ce74e9af73ea6d583ad96ced5402a26e72a90aebbb69d6984b01ecca795ce1a96a083d0d980dbcd5bf9409d497c4ddbc98d473b9df763f7b4ede312575dc45c2ba3c9df5b37c0482db4ccc51583720d7bd594fa3563136d787a792537dfc4cff50c718d473b45df01498cdfd6e45dd67088aed5428c78581965476d7d2d763721705de8f0b182fe07dad6832a39da51c94113a324d

Message déchiffré :
 test primaire pour validation
--------------------------------------------------------------------------
private : 2d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d0a4d494945766749424144414e42676b71686b6947397730424151454641415343424b67776767536b41674541416f4942415143303966467668684d596c6975380a54434b622f70473548584663664463373134567035384b4561472b394771437844684239352b7372316954357954483868685269702f4439777531424a747a510a666b716d4e594464554e385a69486c394b35337444643044716f52797253776d384e30486c5169613943757551775061374d524478655570452b2f4d583062610a306d36534f457574655a497635756d763945746b3546626c422f787648616f2f4c7267684237776670744b32614154733944573150472b3141775559573639620a74494f6a636163422f4f6850685a6a475274666b4c56696148493379734b4f7a55664177794361687773492b653432414e2f414947313578766c48323471476f0a4a5a2b30617338424d422b514571645059585544703676707a73365746635136326d6b36325576625a686a536e5837654b626c584a4c764a78666369795337750a775a6b304361345641674d4241414543676745414342536c6339767956566f37574c797a6e50436f74444832346e44666a496f4b754a687a544c4e584c6751570a3465456c5a6d4870552f744c696d5873474145717674384e2b563776646b585566584475523237444d74374f48356444435935646a6e7a63666a48716d5335580a64754f786b776d614b5555334143435939766b307147775a5742532b56417437494146656b36503036536d78462f65425075797a5179325a48634157437959650a4e31387a4c2b6c56573073566f6c66386c5059572f31314b2f3456646e7774494341422f4d57433951386e734d597038744b73594772674c31767936546661770a486f6e6b4569443354415a61423673446e694b4b72567a7159514a6e2f6d565379776b36796131786b796847554b716b685241496d454d7a435956756a766a4c0a366d32616248573042675533774c457a464b6c6355594d665453326c54753757315937516362467373514b426751444c496a727355564d574b6f6d797946795a0a705647303347724c6b704777375055766e53774a5755542b39592b667732572b675049694564432f6d765738585147442f7072617531365647485870484c45570a33624641374e494254494577524d676f354d63494768386661336b634b6d547142427a77375a6766774a596a2b637079336e684c52354b736b47565344784a340a4e66654c583759416c3273646b457950784e62774766306436514b426751446b446e4246496174614d5257465278584b6f6a3754306f6e335630705964726e6d0a7552747230735a69534a676c2f314376795a477a68527456784a2b36764a467246304775523050716c70566e74347636376865456a72395a4e7a4331726662610a4c6a68574c6178656644714a58324a52675565626a4463385563543478336e2f45633752792b5a38725379664f337041475056585a645646487643524c624e790a4e6261475065485854514b4267466f446242726d47717861347a50504a34474b53582b636f4e4a6575364b73446959775071425235346f585a4c4b4745714c740a5874364d434857766843385a41352f724264486862354d67434c666f312b787242713366673176422f416c596f56334671784444436f47517a565557304373470a385a4174714e69424c636235584b5730515a67534f6b4f76704d5a4e4759456459506c6f79797a4e3746426f62685454512b2b58684a7470416f4742414b56670a78772b4b302f7a4b6e575752332f366132313632546242637a36414a4d4e526370634c794455545769656238462b487946554f4f6f667a33596a4744627879750a74385750446e512b6b4d65757463625a413572762f566a514366576c327433724b4a567439354a704766586d67714443564641375251377236522f54582b65560a5856714d4e32397745577a444c2b7274626e54626475587941746630775331775142566e4b4b2f39416f47424149694632636f63495a39447055424f4b5433680a5663366f6d66715561616d554170444664554e47334a637036364c492f465066333962672b433963464e6f672b412b5434303071484330774f6f4454617058510a6932666b4c74475a386e7a6a5a6264342b66707035396e37347a4e51387662664f6d71777039785a664775642b2b7238797043442f31313945706463717138390a436e466d6d50574141526f37624a484f58546f56356748650a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d0a
public : 2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417450587862345954474a5972764577696d2f36520a75523178584877334f39654661656643684768767652716773513451666566724b39596b2b636b782f495955597166772f634c74515362633048354b706a57410a3356446647596835665375643751336441367145637130734a764464423555496d765172726b4d4432757a455138586c4b5250767a46394732744a756b6a684c0a72586d534c2b6270722f524c5a4f52573551663862783271507936344951653848366253746d6745375051317454787674514d4647467576573753446f33476e0a41667a6f54345759786b6258354331596d68794e3872436a733148774d4d676d6f634c43506e754e67446677434274656362355239754b6871435766744772500a415441666b424b6e54324631413665723663374f6c6858454f7470704f746c4c323259593070312b33696d35567953377963583349736b753773475a4e416d750a46514944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a
Message original: Bonjour, ceci est un message secret!
Message chiffré: 379c44af1ec83cd80545a784ad2f570c042a43868843997de1634cffb6fc0b59fefa9619ef8eabb03ff7730d81a917d9ecd1b7a9365c4478dddcaa4cd7f0cbade86e1cfd79d237172c50659cb74ec4e839d70a6be69e95eb9a2f735ab2496c87b3e015b745802eb5facf46a48085512db28e9aadee9b3ebcc69aaeb0a861593178edd56e6d173bb3d5c0cac5205917c936df95663aaf634bbb4eaaa7e268ebfffe55ef184233e3fa6f98499de2d88a0b0f402b5f8c343d9404d4b17fb802b3e2b612c2a99576642cc8607fb644104a7c84b2151a324eaf08c8cb6218062a939ae671c678d8ce5b870e0fdee5ce3f391014fe98c09022579587fb84720b213f4c
Message déchiffré: Bonjour, ceci est un message secret!
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x45, 0x76, 0x67, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x53, 0x43, 0x42, 0x4b, 0x67, 0x77, 0x67, 0x67, 0x53, 0x6b, 0x41, 0x67, 0x45, 0x41, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x43, 0x30, 0x39, 0x66, 0x46, 0x76, 0x68, 0x68, 0x4d, 0x59, 0x6c, 0x69, 0x75, 0x38, 0x0a, 0x54, 0x43, 0x4b, 0x62, 0x2f, 0x70, 0x47, 0x35, 0x48, 0x58, 0x46, 0x63, 0x66, 0x44, 0x63, 0x37, 0x31, 0x34, 0x56, 0x70, 0x35, 0x38, 0x4b, 0x45, 0x61, 0x47, 0x2b, 0x39, 0x47, 0x71, 0x43, 0x78, 0x44, 0x68, 0x42, 0x39, 0x35, 0x2b, 0x73, 0x72, 0x31, 0x69, 0x54, 0x35, 0x79, 0x54, 0x48, 0x38, 0x68, 0x68, 0x52, 0x69, 0x70, 0x2f, 0x44, 0x39, 0x77, 0x75, 0x31, 0x42, 0x4a, 0x74, 0x7a, 0x51, 0x0a, 0x66, 0x6b, 0x71, 0x6d, 0x4e, 0x59, 0x44, 0x64, 0x55, 0x4e, 0x38, 0x5a, 0x69, 0x48, 0x6c, 0x39, 0x4b, 0x35, 0x33, 0x74, 0x44, 0x64, 0x30, 0x44, 0x71, 0x6f, 0x52, 0x79, 0x72, 0x53, 0x77, 0x6d, 0x38, 0x4e, 0x30, 0x48, 0x6c, 0x51, 0x69, 0x61, 0x39, 0x43, 0x75, 0x75, 0x51, 0x77, 0x50, 0x61, 0x37, 0x4d, 0x52, 0x44, 0x78, 0x65, 0x55, 0x70, 0x45, 0x2b, 0x2f, 0x4d, 0x58, 0x30, 0x62, 0x61, 0x0a, 0x30, 0x6d, 0x36, 0x53, 0x4f, 0x45, 0x75, 0x74, 0x65, 0x5a, 0x49, 0x76, 0x35, 0x75, 0x6d, 0x76, 0x39, 0x45, 0x74, 0x6b, 0x35, 0x46, 0x62, 0x6c, 0x42, 0x2f, 0x78, 0x76, 0x48, 0x61, 0x6f, 0x2f, 0x4c, 0x72, 0x67, 0x68, 0x42, 0x37, 0x77, 0x66, 0x70, 0x74, 0x4b, 0x32, 0x61, 0x41, 0x54, 0x73, 0x39, 0x44, 0x57, 0x31, 0x50, 0x47, 0x2b, 0x31, 0x41, 0x77, 0x55, 0x59, 0x57, 0x36, 0x39, 0x62, 0x0a, 0x74, 0x49, 0x4f, 0x6a, 0x63, 0x61, 0x63, 0x42, 0x2f, 0x4f, 0x68, 0x50, 0x68, 0x5a, 0x6a, 0x47, 0x52, 0x74, 0x66, 0x6b, 0x4c, 0x56, 0x69, 0x61, 0x48, 0x49, 0x33, 0x79, 0x73, 0x4b, 0x4f, 0x7a, 0x55, 0x66, 0x41, 0x77, 0x79, 0x43, 0x61, 0x68, 0x77, 0x73, 0x49, 0x2b, 0x65, 0x34, 0x32, 0x41, 0x4e, 0x2f, 0x41, 0x49, 0x47, 0x31, 0x35, 0x78, 0x76, 0x6c, 0x48, 0x32, 0x34, 0x71, 0x47, 0x6f, 0x0a, 0x4a, 0x5a, 0x2b, 0x30, 0x61, 0x73, 0x38, 0x42, 0x4d, 0x42, 0x2b, 0x51, 0x45, 0x71, 0x64, 0x50, 0x59, 0x58, 0x55, 0x44, 0x70, 0x36, 0x76, 0x70, 0x7a, 0x73, 0x36, 0x57, 0x46, 0x63, 0x51, 0x36, 0x32, 0x6d, 0x6b, 0x36, 0x32, 0x55, 0x76, 0x62, 0x5a, 0x68, 0x6a, 0x53, 0x6e, 0x58, 0x37, 0x65, 0x4b, 0x62, 0x6c, 0x58, 0x4a, 0x4c, 0x76, 0x4a, 0x78, 0x66, 0x63, 0x69, 0x79, 0x53, 0x37, 0x75, 0x0a, 0x77, 0x5a, 0x6b, 0x30, 0x43, 0x61, 0x34, 0x56, 0x41, 0x67, 0x4d, 0x42, 0x41, 0x41, 0x45, 0x43, 0x67, 0x67, 0x45, 0x41, 0x43, 0x42, 0x53, 0x6c, 0x63, 0x39, 0x76, 0x79, 0x56, 0x56, 0x6f, 0x37, 0x57, 0x4c, 0x79, 0x7a, 0x6e, 0x50, 0x43, 0x6f, 0x74, 0x44, 0x48, 0x32, 0x34, 0x6e, 0x44, 0x66, 0x6a, 0x49, 0x6f, 0x4b, 0x75, 0x4a, 0x68, 0x7a, 0x54, 0x4c, 0x4e, 0x58, 0x4c, 0x67, 0x51, 0x57, 0x0a, 0x34, 0x65, 0x45, 0x6c, 0x5a, 0x6d, 0x48, 0x70, 0x55, 0x2f, 0x74, 0x4c, 0x69, 0x6d, 0x58, 0x73, 0x47, 0x41, 0x45, 0x71, 0x76, 0x74, 0x38, 0x4e, 0x2b, 0x56, 0x37, 0x76, 0x64, 0x6b, 0x58, 0x55, 0x66, 0x58, 0x44, 0x75, 0x52, 0x32, 0x37, 0x44, 0x4d, 0x74, 0x37, 0x4f, 0x48, 0x35, 0x64, 0x44, 0x43, 0x59, 0x35, 0x64, 0x6a, 0x6e, 0x7a, 0x63, 0x66, 0x6a, 0x48, 0x71, 0x6d, 0x53, 0x35, 0x58, 0x0a, 0x64, 0x75, 0x4f, 0x78, 0x6b, 0x77, 0x6d, 0x61, 0x4b, 0x55, 0x55, 0x33, 0x41, 0x43, 0x43, 0x59, 0x39, 0x76, 0x6b, 0x30, 0x71, 0x47, 0x77, 0x5a, 0x57, 0x42, 0x53, 0x2b, 0x56, 0x41, 0x74, 0x37, 0x49, 0x41, 0x46, 0x65, 0x6b, 0x36, 0x50, 0x30, 0x36, 0x53, 0x6d, 0x78, 0x46, 0x2f, 0x65, 0x42, 0x50, 0x75, 0x79, 0x7a, 0x51, 0x79, 0x32, 0x5a, 0x48, 0x63, 0x41, 0x57, 0x43, 0x79, 0x59, 0x65, 0x0a, 0x4e, 0x31, 0x38, 0x7a, 0x4c, 0x2b, 0x6c, 0x56, 0x57, 0x30, 0x73, 0x56, 0x6f, 0x6c, 0x66, 0x38, 0x6c, 0x50, 0x59, 0x57, 0x2f, 0x31, 0x31, 0x4b, 0x2f, 0x34, 0x56, 0x64, 0x6e, 0x77, 0x74, 0x49, 0x43, 0x41, 0x42, 0x2f, 0x4d, 0x57, 0x43, 0x39, 0x51, 0x38, 0x6e, 0x73, 0x4d, 0x59, 0x70, 0x38, 0x74, 0x4b, 0x73, 0x59, 0x47, 0x72, 0x67, 0x4c, 0x31, 0x76, 0x79, 0x36, 0x54, 0x66, 0x61, 0x77, 0x0a, 0x48, 0x6f, 0x6e, 0x6b, 0x45, 0x69, 0x44, 0x33, 0x54, 0x41, 0x5a, 0x61, 0x42, 0x36, 0x73, 0x44, 0x6e, 0x69, 0x4b, 0x4b, 0x72, 0x56, 0x7a, 0x71, 0x59, 0x51, 0x4a, 0x6e, 0x2f, 0x6d, 0x56, 0x53, 0x79, 0x77, 0x6b, 0x36, 0x79, 0x61, 0x31, 0x78, 0x6b, 0x79, 0x68, 0x47, 0x55, 0x4b, 0x71, 0x6b, 0x68, 0x52, 0x41, 0x49, 0x6d, 0x45, 0x4d, 0x7a, 0x43, 0x59, 0x56, 0x75, 0x6a, 0x76, 0x6a, 0x4c, 0x0a, 0x36, 0x6d, 0x32, 0x61, 0x62, 0x48, 0x57, 0x30, 0x42, 0x67, 0x55, 0x33, 0x77, 0x4c, 0x45, 0x7a, 0x46, 0x4b, 0x6c, 0x63, 0x55, 0x59, 0x4d, 0x66, 0x54, 0x53, 0x32, 0x6c, 0x54, 0x75, 0x37, 0x57, 0x31, 0x59, 0x37, 0x51, 0x63, 0x62, 0x46, 0x73, 0x73, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x4c, 0x49, 0x6a, 0x72, 0x73, 0x55, 0x56, 0x4d, 0x57, 0x4b, 0x6f, 0x6d, 0x79, 0x79, 0x46, 0x79, 0x5a, 0x0a, 0x70, 0x56, 0x47, 0x30, 0x33, 0x47, 0x72, 0x4c, 0x6b, 0x70, 0x47, 0x77, 0x37, 0x50, 0x55, 0x76, 0x6e, 0x53, 0x77, 0x4a, 0x57, 0x55, 0x54, 0x2b, 0x39, 0x59, 0x2b, 0x66, 0x77, 0x32, 0x57, 0x2b, 0x67, 0x50, 0x49, 0x69, 0x45, 0x64, 0x43, 0x2f, 0x6d, 0x76, 0x57, 0x38, 0x58, 0x51, 0x47, 0x44, 0x2f, 0x70, 0x72, 0x61, 0x75, 0x31, 0x36, 0x56, 0x47, 0x48, 0x58, 0x70, 0x48, 0x4c, 0x45, 0x57, 0x0a, 0x33, 0x62, 0x46, 0x41, 0x37, 0x4e, 0x49, 0x42, 0x54, 0x49, 0x45, 0x77, 0x52, 0x4d, 0x67, 0x6f, 0x35, 0x4d, 0x63, 0x49, 0x47, 0x68, 0x38, 0x66, 0x61, 0x33, 0x6b, 0x63, 0x4b, 0x6d, 0x54, 0x71, 0x42, 0x42, 0x7a, 0x77, 0x37, 0x5a, 0x67, 0x66, 0x77, 0x4a, 0x59, 0x6a, 0x2b, 0x63, 0x70, 0x79, 0x33, 0x6e, 0x68, 0x4c, 0x52, 0x35, 0x4b, 0x73, 0x6b, 0x47, 0x56, 0x53, 0x44, 0x78, 0x4a, 0x34, 0x0a, 0x4e, 0x66, 0x65, 0x4c, 0x58, 0x37, 0x59, 0x41, 0x6c, 0x32, 0x73, 0x64, 0x6b, 0x45, 0x79, 0x50, 0x78, 0x4e, 0x62, 0x77, 0x47, 0x66, 0x30, 0x64, 0x36, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x6b, 0x44, 0x6e, 0x42, 0x46, 0x49, 0x61, 0x74, 0x61, 0x4d, 0x52, 0x57, 0x46, 0x52, 0x78, 0x58, 0x4b, 0x6f, 0x6a, 0x37, 0x54, 0x30, 0x6f, 0x6e, 0x33, 0x56, 0x30, 0x70, 0x59, 0x64, 0x72, 0x6e, 0x6d, 0x0a, 0x75, 0x52, 0x74, 0x72, 0x30, 0x73, 0x5a, 0x69, 0x53, 0x4a, 0x67, 0x6c, 0x2f, 0x31, 0x43, 0x76, 0x79, 0x5a, 0x47, 0x7a, 0x68, 0x52, 0x74, 0x56, 0x78, 0x4a, 0x2b, 0x36, 0x76, 0x4a, 0x46, 0x72, 0x46, 0x30, 0x47, 0x75, 0x52, 0x30, 0x50, 0x71, 0x6c, 0x70, 0x56, 0x6e, 0x74, 0x34, 0x76, 0x36, 0x37, 0x68, 0x65, 0x45, 0x6a, 0x72, 0x39, 0x5a, 0x4e, 0x7a, 0x43, 0x31, 0x72, 0x66, 0x62, 0x61, 0x0a, 0x4c, 0x6a, 0x68, 0x57, 0x4c, 0x61, 0x78, 0x65, 0x66, 0x44, 0x71, 0x4a, 0x58, 0x32, 0x4a, 0x52, 0x67, 0x55, 0x65, 0x62, 0x6a, 0x44, 0x63, 0x38, 0x55, 0x63, 0x54, 0x34, 0x78, 0x33, 0x6e, 0x2f, 0x45, 0x63, 0x37, 0x52, 0x79, 0x2b, 0x5a, 0x38, 0x72, 0x53, 0x79, 0x66, 0x4f, 0x33, 0x70, 0x41, 0x47, 0x50, 0x56, 0x58, 0x5a, 0x64, 0x56, 0x46, 0x48, 0x76, 0x43, 0x52, 0x4c, 0x62, 0x4e, 0x79, 0x0a, 0x4e, 0x62, 0x61, 0x47, 0x50, 0x65, 0x48, 0x58, 0x54, 0x51, 0x4b, 0x42, 0x67, 0x46, 0x6f, 0x44, 0x62, 0x42, 0x72, 0x6d, 0x47, 0x71, 0x78, 0x61, 0x34, 0x7a, 0x50, 0x50, 0x4a, 0x34, 0x47, 0x4b, 0x53, 0x58, 0x2b, 0x63, 0x6f, 0x4e, 0x4a, 0x65, 0x75, 0x36, 0x4b, 0x73, 0x44, 0x69, 0x59, 0x77, 0x50, 0x71, 0x42, 0x52, 0x35, 0x34, 0x6f, 0x58, 0x5a, 0x4c, 0x4b, 0x47, 0x45, 0x71, 0x4c, 0x74, 0x0a, 0x58, 0x74, 0x36, 0x4d, 0x43, 0x48, 0x57, 0x76, 0x68, 0x43, 0x38, 0x5a, 0x41, 0x35, 0x2f, 0x72, 0x42, 0x64, 0x48, 0x68, 0x62, 0x35, 0x4d, 0x67, 0x43, 0x4c, 0x66, 0x6f, 0x31, 0x2b, 0x78, 0x72, 0x42, 0x71, 0x33, 0x66, 0x67, 0x31, 0x76, 0x42, 0x2f, 0x41, 0x6c, 0x59, 0x6f, 0x56, 0x33, 0x46, 0x71, 0x78, 0x44, 0x44, 0x43, 0x6f, 0x47, 0x51, 0x7a, 0x56, 0x55, 0x57, 0x30, 0x43, 0x73, 0x47, 0x0a, 0x38, 0x5a, 0x41, 0x74, 0x71, 0x4e, 0x69, 0x42, 0x4c, 0x63, 0x62, 0x35, 0x58, 0x4b, 0x57, 0x30, 0x51, 0x5a, 0x67, 0x53, 0x4f, 0x6b, 0x4f, 0x76, 0x70, 0x4d, 0x5a, 0x4e, 0x47, 0x59, 0x45, 0x64, 0x59, 0x50, 0x6c, 0x6f, 0x79, 0x79, 0x7a, 0x4e, 0x37, 0x46, 0x42, 0x6f, 0x62, 0x68, 0x54, 0x54, 0x51, 0x2b, 0x2b, 0x58, 0x68, 0x4a, 0x74, 0x70, 0x41, 0x6f, 0x47, 0x42, 0x41, 0x4b, 0x56, 0x67, 0x0a, 0x78, 0x77, 0x2b, 0x4b, 0x30, 0x2f, 0x7a, 0x4b, 0x6e, 0x57, 0x57, 0x52, 0x33, 0x2f, 0x36, 0x61, 0x32, 0x31, 0x36, 0x32, 0x54, 0x62, 0x42, 0x63, 0x7a, 0x36, 0x41, 0x4a, 0x4d, 0x4e, 0x52, 0x63, 0x70, 0x63, 0x4c, 0x79, 0x44, 0x55, 0x54, 0x57, 0x69, 0x65, 0x62, 0x38, 0x46, 0x2b, 0x48, 0x79, 0x46, 0x55, 0x4f, 0x4f, 0x6f, 0x66, 0x7a, 0x33, 0x59, 0x6a, 0x47, 0x44, 0x62, 0x78, 0x79, 0x75, 0x0a, 0x74, 0x38, 0x57, 0x50, 0x44, 0x6e, 0x51, 0x2b, 0x6b, 0x4d, 0x65, 0x75, 0x74, 0x63, 0x62, 0x5a, 0x41, 0x35, 0x72, 0x76, 0x2f, 0x56, 0x6a, 0x51, 0x43, 0x66, 0x57, 0x6c, 0x32, 0x74, 0x33, 0x72, 0x4b, 0x4a, 0x56, 0x74, 0x39, 0x35, 0x4a, 0x70, 0x47, 0x66, 0x58, 0x6d, 0x67, 0x71, 0x44, 0x43, 0x56, 0x46, 0x41, 0x37, 0x52, 0x51, 0x37, 0x72, 0x36, 0x52, 0x2f, 0x54, 0x58, 0x2b, 0x65, 0x56, 0x0a, 0x58, 0x56, 0x71, 0x4d, 0x4e, 0x32, 0x39, 0x77, 0x45, 0x57, 0x7a, 0x44, 0x4c, 0x2b, 0x72, 0x74, 0x62, 0x6e, 0x54, 0x62, 0x64, 0x75, 0x58, 0x79, 0x41, 0x74, 0x66, 0x30, 0x77, 0x53, 0x31, 0x77, 0x51, 0x42, 0x56, 0x6e, 0x4b, 0x4b, 0x2f, 0x39, 0x41, 0x6f, 0x47, 0x42, 0x41, 0x49, 0x69, 0x46, 0x32, 0x63, 0x6f, 0x63, 0x49, 0x5a, 0x39, 0x44, 0x70, 0x55, 0x42, 0x4f, 0x4b, 0x54, 0x33, 0x68, 0x0a, 0x56, 0x63, 0x36, 0x6f, 0x6d, 0x66, 0x71, 0x55, 0x61, 0x61, 0x6d, 0x55, 0x41, 0x70, 0x44, 0x46, 0x64, 0x55, 0x4e, 0x47, 0x33, 0x4a, 0x63, 0x70, 0x36, 0x36, 0x4c, 0x49, 0x2f, 0x46, 0x50, 0x66, 0x33, 0x39, 0x62, 0x67, 0x2b, 0x43, 0x39, 0x63, 0x46, 0x4e, 0x6f, 0x67, 0x2b, 0x41, 0x2b, 0x54, 0x34, 0x30, 0x30, 0x71, 0x48, 0x43, 0x30, 0x77, 0x4f, 0x6f, 0x44, 0x54, 0x61, 0x70, 0x58, 0x51, 0x0a, 0x69, 0x32, 0x66, 0x6b, 0x4c, 0x74, 0x47, 0x5a, 0x38, 0x6e, 0x7a, 0x6a, 0x5a, 0x62, 0x64, 0x34, 0x2b, 0x66, 0x70, 0x70, 0x35, 0x39, 0x6e, 0x37, 0x34, 0x7a, 0x4e, 0x51, 0x38, 0x76, 0x62, 0x66, 0x4f, 0x6d, 0x71, 0x77, 0x70, 0x39, 0x78, 0x5a, 0x66, 0x47, 0x75, 0x64, 0x2b, 0x2b, 0x72, 0x38, 0x79, 0x70, 0x43, 0x44, 0x2f, 0x31, 0x31, 0x39, 0x45, 0x70, 0x64, 0x63, 0x71, 0x71, 0x38, 0x39, 0x0a, 0x43, 0x6e, 0x46, 0x6d, 0x6d, 0x50, 0x57, 0x41, 0x41, 0x52, 0x6f, 0x37, 0x62, 0x4a, 0x48, 0x4f, 0x58, 0x54, 0x6f, 0x56, 0x35, 0x67, 0x48, 0x65, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 1704
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x74, 0x50, 0x58, 0x78, 0x62, 0x34, 0x59, 0x54, 0x47, 0x4a, 0x59, 0x72, 0x76, 0x45, 0x77, 0x69, 0x6d, 0x2f, 0x36, 0x52, 0x0a, 0x75, 0x52, 0x31, 0x78, 0x58, 0x48, 0x77, 0x33, 0x4f, 0x39, 0x65, 0x46, 0x61, 0x65, 0x66, 0x43, 0x68, 0x47, 0x68, 0x76, 0x76, 0x52, 0x71, 0x67, 0x73, 0x51, 0x34, 0x51, 0x66, 0x65, 0x66, 0x72, 0x4b, 0x39, 0x59, 0x6b, 0x2b, 0x63, 0x6b, 0x78, 0x2f, 0x49, 0x59, 0x55, 0x59, 0x71, 0x66, 0x77, 0x2f, 0x63, 0x4c, 0x74, 0x51, 0x53, 0x62, 0x63, 0x30, 0x48, 0x35, 0x4b, 0x70, 0x6a, 0x57, 0x41, 0x0a, 0x33, 0x56, 0x44, 0x66, 0x47, 0x59, 0x68, 0x35, 0x66, 0x53, 0x75, 0x64, 0x37, 0x51, 0x33, 0x64, 0x41, 0x36, 0x71, 0x45, 0x63, 0x71, 0x30, 0x73, 0x4a, 0x76, 0x44, 0x64, 0x42, 0x35, 0x55, 0x49, 0x6d, 0x76, 0x51, 0x72, 0x72, 0x6b, 0x4d, 0x44, 0x32, 0x75, 0x7a, 0x45, 0x51, 0x38, 0x58, 0x6c, 0x4b, 0x52, 0x50, 0x76, 0x7a, 0x46, 0x39, 0x47, 0x32, 0x74, 0x4a, 0x75, 0x6b, 0x6a, 0x68, 0x4c, 0x0a, 0x72, 0x58, 0x6d, 0x53, 0x4c, 0x2b, 0x62, 0x70, 0x72, 0x2f, 0x52, 0x4c, 0x5a, 0x4f, 0x52, 0x57, 0x35, 0x51, 0x66, 0x38, 0x62, 0x78, 0x32, 0x71, 0x50, 0x79, 0x36, 0x34, 0x49, 0x51, 0x65, 0x38, 0x48, 0x36, 0x62, 0x53, 0x74, 0x6d, 0x67, 0x45, 0x37, 0x50, 0x51, 0x31, 0x74, 0x54, 0x78, 0x76, 0x74, 0x51, 0x4d, 0x46, 0x47, 0x46, 0x75, 0x76, 0x57, 0x37, 0x53, 0x44, 0x6f, 0x33, 0x47, 0x6e, 0x0a, 0x41, 0x66, 0x7a, 0x6f, 0x54, 0x34, 0x57, 0x59, 0x78, 0x6b, 0x62, 0x58, 0x35, 0x43, 0x31, 0x59, 0x6d, 0x68, 0x79, 0x4e, 0x38, 0x72, 0x43, 0x6a, 0x73, 0x31, 0x48, 0x77, 0x4d, 0x4d, 0x67, 0x6d, 0x6f, 0x63, 0x4c, 0x43, 0x50, 0x6e, 0x75, 0x4e, 0x67, 0x44, 0x66, 0x77, 0x43, 0x42, 0x74, 0x65, 0x63, 0x62, 0x35, 0x52, 0x39, 0x75, 0x4b, 0x68, 0x71, 0x43, 0x57, 0x66, 0x74, 0x47, 0x72, 0x50, 0x0a, 0x41, 0x54, 0x41, 0x66, 0x6b, 0x42, 0x4b, 0x6e, 0x54, 0x32, 0x46, 0x31, 0x41, 0x36, 0x65, 0x72, 0x36, 0x63, 0x37, 0x4f, 0x6c, 0x68, 0x58, 0x45, 0x4f, 0x74, 0x70, 0x70, 0x4f, 0x74, 0x6c, 0x4c, 0x32, 0x32, 0x59, 0x59, 0x30, 0x70, 0x31, 0x2b, 0x33, 0x69, 0x6d, 0x35, 0x56, 0x79, 0x53, 0x37, 0x79, 0x63, 0x58, 0x33, 0x49, 0x73, 0x6b, 0x75, 0x37, 0x73, 0x47, 0x5a, 0x4e, 0x41, 0x6d, 0x75, 0x0a, 0x46, 0x51, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 451
----------------------------------------------------
----------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

private : 2d2d2d2d2d424547494e2050524956415445204b45592d2d2d2d2d0a4d494945765149424144414e42676b71686b6947397730424151454641415343424b63776767536a41674541416f49424151444f6c4b663064394c494f6f57580a6b72316649436c346951456f4872504d537363384b61394849354532394767736c7256336f5571634f595758642f4934584b314b2b534f715236506a635552420a576c30467a3878746b4646367753463059744e387a395a65764c32392b55517165417a5553464d416a6d577a7941636768307762537143526e4c672f6246702b0a745850315158495647636e35456441626c357834443930644a51765471426f317752626144512f6e656c3562324b6e5377364874305133536e76526e4e5474710a4b596f2b4d78646147656f686f376e57636d496365454e344345386a58664c776f544d696f61436a664167766e503274544e496c3865364f38794b535a326f510a3368613849332b592f32713655676242713267457a314b7252427636737545456e4259755275596d5a58337457706d5167343275557447704f6b5656784f6f720a51317234536e6f6241674d4241414543676745415a612f2f54504e2b716c6c455557784745344539614c766e2b647644485a6a686f646654452b324b4763634e0a554957504a69676246664f717376693048744a66367a76674e6e3231537377436b546a742b574a6b657270446f573159446e5a6e4c465553624f667a626f51340a376237536364783448786e354c686f5569417152694132674a4931456c4e4f3961416e6833715173682f353930554458632f325a592f424c4934474d354d35440a644c4f796c7671497a4f46446352384a6f45504d7178796b316970784a5573555270422b394f4859525967417a6d304637324732466f6841326b6f374b75414c0a4958424f733075522b6162386e46444751596268567a446335367a3476484c6761345949543275655a67473474686249357230686f487270576d6c5435397a720a776431444a6c4a48425866326e6d2b55756d664d537148774536544836706f756871632f4773726251514b4267514453764b586456756a692f77553979734e4b0a58395346536d567378485953777861485630696375716f6c672b686d435742576853787a45416a2f466a4c43582f5034612f587559684976594961324c6530610a7255326e43415833644a6a4a634877396646515665524d4b63787a546c662f43587344324e79776a725a71456f5056675038703355554f7a73386d4f7562347a0a53596565636c515273567470747130556d3033746a4f625836514b426751443638337156596d67436b5a6844586d396e513164676b7a69334741466d557a31430a4d366c2b6542485731454646394d72306f53753849642b7274746a4770764b5570575a4b7551305a612b58674c3170615a5436356e316b34684f5677557838350a61713738584c5a6b447337444173354367474e5935356b6a645437532f41667739487a45455943707447736c5a656561616532513047644a626b4d422b4961530a7a5656334459744459774b4267514442503246536f646f6148775874626a793776546b6a71643973614a526d444352696f2f58675534536e746c6974435467670a33797174735379757a7570704f4a682f5848452f30777365437751396c387677524c414b3164367931326373676b784d446645465a2b764144324f46322b32580a6a6c43672b474d7672496b66796f4a3561735839754c572b32735767626c4175732b5437745a664753622b734a3270386c525a58476e697430514b42674834480a597975387051474e5077757556494a6d706d3467345a334b4634486445656d36616b66535978736873376f2f537548365179325455584936504c6e66512f70300a366c39696566716e586d587451684964774a65574f4565544c6d72767738476847306f77415956556a6e41506136696f4d377946617a6f4d65735759767941360a6d4b49624c434f4f4d54557837564e324756486435394650353655497641546a7a43556a44797144416f474146724b7238736b657877356832656439684771630a497134595954744a4e31746837377a524f7261414131644733646a6c344e384c2b754a38584e74636975463830616e587a417730784b6a75787947494c51484a0a614572433357386e3976707930466e65366f3962392b4e497a4d475a58442f6a626e6f77626b3842764266557579483669524b712f6e7a514c4271357831756d0a776d2f45692f6e2f617671584850645479312b2b7371513d0a2d2d2d2d2d454e442050524956415445204b45592d2d2d2d2d0a
public : 2d2d2d2d2d424547494e205055424c4943204b45592d2d2d2d2d0a4d494942496a414e42676b71686b6947397730424151454641414f43415138414d49494243674b43415145417a70536e39486653794471466c354b39587941700a65496b424b42367a7a45724850436d7652794f524e76526f4c4a61316436464b6e446d466c3366794f46797453766b6a716b656a343346455156706442632f4d0a625a42526573456864474c54664d2f575872793976666c454b6e674d314568544149356c733867484949644d473071676b5a7934503278616672567a395546790a46526e4a2b5248514735656365412f644853554c303667614e63455732673050353370655739697030734f683764454e307037305a7a553761696d4b506a4d580a57686e7149614f35316e4a69484868446541685049313379384b457a497147676f3377494c357a3972557a534a6648756a764d696b6d6471454e345776434e2f0a6d503971756c49477761746f424d3953713051622b724c68424a77574c6b626d4a6d56393756715a6b494f4e726c4c5271547046566354714b304e612b4570360a47774944415141420a2d2d2d2d2d454e44205055424c4943204b45592d2d2d2d2d0a
Message original: Bonjour, ceci est un message secret!
Message chiffré: 29bcd708a88f69c50ac88d30ce69e2249094b3d8c4d473a0813d96b8c44683bc6192ea614f04f010bd0b69bee463f75046e2c1e3c7f55d539a9ee4afa1fa7c210c62a1c2e78ceab6c5ee5341efd93dc8c4ff1daff80c293bbc7976aa8c9855108b09ab036234d62c1a36ec936218b529ab81df6e563c5a661f84e4bb536e4ea444957fbc92dfad592f6ae262228125d07331efa3529788d4a7e7c3fa8a4a5e18b335feb71425c55e7abf339d374798116a7185e45c9427ad80fb730022c7b502b5846f437f55c3290c7bd534b8cf846c466c62db54fc63ad3139450dc70c3aa573147ec7e8f93f9d20d1486a7704b9c761c1434f79bc9fa3a5dd91fdf10d0c89
Message déchiffré: Bonjour, ceci est un message secret!
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x45, 0x76, 0x51, 0x49, 0x42, 0x41, 0x44, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x53, 0x43, 0x42, 0x4b, 0x63, 0x77, 0x67, 0x67, 0x53, 0x6a, 0x41, 0x67, 0x45, 0x41, 0x41, 0x6f, 0x49, 0x42, 0x41, 0x51, 0x44, 0x4f, 0x6c, 0x4b, 0x66, 0x30, 0x64, 0x39, 0x4c, 0x49, 0x4f, 0x6f, 0x57, 0x58, 0x0a, 0x6b, 0x72, 0x31, 0x66, 0x49, 0x43, 0x6c, 0x34, 0x69, 0x51, 0x45, 0x6f, 0x48, 0x72, 0x50, 0x4d, 0x53, 0x73, 0x63, 0x38, 0x4b, 0x61, 0x39, 0x48, 0x49, 0x35, 0x45, 0x32, 0x39, 0x47, 0x67, 0x73, 0x6c, 0x72, 0x56, 0x33, 0x6f, 0x55, 0x71, 0x63, 0x4f, 0x59, 0x57, 0x58, 0x64, 0x2f, 0x49, 0x34, 0x58, 0x4b, 0x31, 0x4b, 0x2b, 0x53, 0x4f, 0x71, 0x52, 0x36, 0x50, 0x6a, 0x63, 0x55, 0x52, 0x42, 0x0a, 0x57, 0x6c, 0x30, 0x46, 0x7a, 0x38, 0x78, 0x74, 0x6b, 0x46, 0x46, 0x36, 0x77, 0x53, 0x46, 0x30, 0x59, 0x74, 0x4e, 0x38, 0x7a, 0x39, 0x5a, 0x65, 0x76, 0x4c, 0x32, 0x39, 0x2b, 0x55, 0x51, 0x71, 0x65, 0x41, 0x7a, 0x55, 0x53, 0x46, 0x4d, 0x41, 0x6a, 0x6d, 0x57, 0x7a, 0x79, 0x41, 0x63, 0x67, 0x68, 0x30, 0x77, 0x62, 0x53, 0x71, 0x43, 0x52, 0x6e, 0x4c, 0x67, 0x2f, 0x62, 0x46, 0x70, 0x2b, 0x0a, 0x74, 0x58, 0x50, 0x31, 0x51, 0x58, 0x49, 0x56, 0x47, 0x63, 0x6e, 0x35, 0x45, 0x64, 0x41, 0x62, 0x6c, 0x35, 0x78, 0x34, 0x44, 0x39, 0x30, 0x64, 0x4a, 0x51, 0x76, 0x54, 0x71, 0x42, 0x6f, 0x31, 0x77, 0x52, 0x62, 0x61, 0x44, 0x51, 0x2f, 0x6e, 0x65, 0x6c, 0x35, 0x62, 0x32, 0x4b, 0x6e, 0x53, 0x77, 0x36, 0x48, 0x74, 0x30, 0x51, 0x33, 0x53, 0x6e, 0x76, 0x52, 0x6e, 0x4e, 0x54, 0x74, 0x71, 0x0a, 0x4b, 0x59, 0x6f, 0x2b, 0x4d, 0x78, 0x64, 0x61, 0x47, 0x65, 0x6f, 0x68, 0x6f, 0x37, 0x6e, 0x57, 0x63, 0x6d, 0x49, 0x63, 0x65, 0x45, 0x4e, 0x34, 0x43, 0x45, 0x38, 0x6a, 0x58, 0x66, 0x4c, 0x77, 0x6f, 0x54, 0x4d, 0x69, 0x6f, 0x61, 0x43, 0x6a, 0x66, 0x41, 0x67, 0x76, 0x6e, 0x50, 0x32, 0x74, 0x54, 0x4e, 0x49, 0x6c, 0x38, 0x65, 0x36, 0x4f, 0x38, 0x79, 0x4b, 0x53, 0x5a, 0x32, 0x6f, 0x51, 0x0a, 0x33, 0x68, 0x61, 0x38, 0x49, 0x33, 0x2b, 0x59, 0x2f, 0x32, 0x71, 0x36, 0x55, 0x67, 0x62, 0x42, 0x71, 0x32, 0x67, 0x45, 0x7a, 0x31, 0x4b, 0x72, 0x52, 0x42, 0x76, 0x36, 0x73, 0x75, 0x45, 0x45, 0x6e, 0x42, 0x59, 0x75, 0x52, 0x75, 0x59, 0x6d, 0x5a, 0x58, 0x33, 0x74, 0x57, 0x70, 0x6d, 0x51, 0x67, 0x34, 0x32, 0x75, 0x55, 0x74, 0x47, 0x70, 0x4f, 0x6b, 0x56, 0x56, 0x78, 0x4f, 0x6f, 0x72, 0x0a, 0x51, 0x31, 0x72, 0x34, 0x53, 0x6e, 0x6f, 0x62, 0x41, 0x67, 0x4d, 0x42, 0x41, 0x41, 0x45, 0x43, 0x67, 0x67, 0x45, 0x41, 0x5a, 0x61, 0x2f, 0x2f, 0x54, 0x50, 0x4e, 0x2b, 0x71, 0x6c, 0x6c, 0x45, 0x55, 0x57, 0x78, 0x47, 0x45, 0x34, 0x45, 0x39, 0x61, 0x4c, 0x76, 0x6e, 0x2b, 0x64, 0x76, 0x44, 0x48, 0x5a, 0x6a, 0x68, 0x6f, 0x64, 0x66, 0x54, 0x45, 0x2b, 0x32, 0x4b, 0x47, 0x63, 0x63, 0x4e, 0x0a, 0x55, 0x49, 0x57, 0x50, 0x4a, 0x69, 0x67, 0x62, 0x46, 0x66, 0x4f, 0x71, 0x73, 0x76, 0x69, 0x30, 0x48, 0x74, 0x4a, 0x66, 0x36, 0x7a, 0x76, 0x67, 0x4e, 0x6e, 0x32, 0x31, 0x53, 0x73, 0x77, 0x43, 0x6b, 0x54, 0x6a, 0x74, 0x2b, 0x57, 0x4a, 0x6b, 0x65, 0x72, 0x70, 0x44, 0x6f, 0x57, 0x31, 0x59, 0x44, 0x6e, 0x5a, 0x6e, 0x4c, 0x46, 0x55, 0x53, 0x62, 0x4f, 0x66, 0x7a, 0x62, 0x6f, 0x51, 0x34, 0x0a, 0x37, 0x62, 0x37, 0x53, 0x63, 0x64, 0x78, 0x34, 0x48, 0x78, 0x6e, 0x35, 0x4c, 0x68, 0x6f, 0x55, 0x69, 0x41, 0x71, 0x52, 0x69, 0x41, 0x32, 0x67, 0x4a, 0x49, 0x31, 0x45, 0x6c, 0x4e, 0x4f, 0x39, 0x61, 0x41, 0x6e, 0x68, 0x33, 0x71, 0x51, 0x73, 0x68, 0x2f, 0x35, 0x39, 0x30, 0x55, 0x44, 0x58, 0x63, 0x2f, 0x32, 0x5a, 0x59, 0x2f, 0x42, 0x4c, 0x49, 0x34, 0x47, 0x4d, 0x35, 0x4d, 0x35, 0x44, 0x0a, 0x64, 0x4c, 0x4f, 0x79, 0x6c, 0x76, 0x71, 0x49, 0x7a, 0x4f, 0x46, 0x44, 0x63, 0x52, 0x38, 0x4a, 0x6f, 0x45, 0x50, 0x4d, 0x71, 0x78, 0x79, 0x6b, 0x31, 0x69, 0x70, 0x78, 0x4a, 0x55, 0x73, 0x55, 0x52, 0x70, 0x42, 0x2b, 0x39, 0x4f, 0x48, 0x59, 0x52, 0x59, 0x67, 0x41, 0x7a, 0x6d, 0x30, 0x46, 0x37, 0x32, 0x47, 0x32, 0x46, 0x6f, 0x68, 0x41, 0x32, 0x6b, 0x6f, 0x37, 0x4b, 0x75, 0x41, 0x4c, 0x0a, 0x49, 0x58, 0x42, 0x4f, 0x73, 0x30, 0x75, 0x52, 0x2b, 0x61, 0x62, 0x38, 0x6e, 0x46, 0x44, 0x47, 0x51, 0x59, 0x62, 0x68, 0x56, 0x7a, 0x44, 0x63, 0x35, 0x36, 0x7a, 0x34, 0x76, 0x48, 0x4c, 0x67, 0x61, 0x34, 0x59, 0x49, 0x54, 0x32, 0x75, 0x65, 0x5a, 0x67, 0x47, 0x34, 0x74, 0x68, 0x62, 0x49, 0x35, 0x72, 0x30, 0x68, 0x6f, 0x48, 0x72, 0x70, 0x57, 0x6d, 0x6c, 0x54, 0x35, 0x39, 0x7a, 0x72, 0x0a, 0x77, 0x64, 0x31, 0x44, 0x4a, 0x6c, 0x4a, 0x48, 0x42, 0x58, 0x66, 0x32, 0x6e, 0x6d, 0x2b, 0x55, 0x75, 0x6d, 0x66, 0x4d, 0x53, 0x71, 0x48, 0x77, 0x45, 0x36, 0x54, 0x48, 0x36, 0x70, 0x6f, 0x75, 0x68, 0x71, 0x63, 0x2f, 0x47, 0x73, 0x72, 0x62, 0x51, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x53, 0x76, 0x4b, 0x58, 0x64, 0x56, 0x75, 0x6a, 0x69, 0x2f, 0x77, 0x55, 0x39, 0x79, 0x73, 0x4e, 0x4b, 0x0a, 0x58, 0x39, 0x53, 0x46, 0x53, 0x6d, 0x56, 0x73, 0x78, 0x48, 0x59, 0x53, 0x77, 0x78, 0x61, 0x48, 0x56, 0x30, 0x69, 0x63, 0x75, 0x71, 0x6f, 0x6c, 0x67, 0x2b, 0x68, 0x6d, 0x43, 0x57, 0x42, 0x57, 0x68, 0x53, 0x78, 0x7a, 0x45, 0x41, 0x6a, 0x2f, 0x46, 0x6a, 0x4c, 0x43, 0x58, 0x2f, 0x50, 0x34, 0x61, 0x2f, 0x58, 0x75, 0x59, 0x68, 0x49, 0x76, 0x59, 0x49, 0x61, 0x32, 0x4c, 0x65, 0x30, 0x61, 0x0a, 0x72, 0x55, 0x32, 0x6e, 0x43, 0x41, 0x58, 0x33, 0x64, 0x4a, 0x6a, 0x4a, 0x63, 0x48, 0x77, 0x39, 0x66, 0x46, 0x51, 0x56, 0x65, 0x52, 0x4d, 0x4b, 0x63, 0x78, 0x7a, 0x54, 0x6c, 0x66, 0x2f, 0x43, 0x58, 0x73, 0x44, 0x32, 0x4e, 0x79, 0x77, 0x6a, 0x72, 0x5a, 0x71, 0x45, 0x6f, 0x50, 0x56, 0x67, 0x50, 0x38, 0x70, 0x33, 0x55, 0x55, 0x4f, 0x7a, 0x73, 0x38, 0x6d, 0x4f, 0x75, 0x62, 0x34, 0x7a, 0x0a, 0x53, 0x59, 0x65, 0x65, 0x63, 0x6c, 0x51, 0x52, 0x73, 0x56, 0x74, 0x70, 0x74, 0x71, 0x30, 0x55, 0x6d, 0x30, 0x33, 0x74, 0x6a, 0x4f, 0x62, 0x58, 0x36, 0x51, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x36, 0x38, 0x33, 0x71, 0x56, 0x59, 0x6d, 0x67, 0x43, 0x6b, 0x5a, 0x68, 0x44, 0x58, 0x6d, 0x39, 0x6e, 0x51, 0x31, 0x64, 0x67, 0x6b, 0x7a, 0x69, 0x33, 0x47, 0x41, 0x46, 0x6d, 0x55, 0x7a, 0x31, 0x43, 0x0a, 0x4d, 0x36, 0x6c, 0x2b, 0x65, 0x42, 0x48, 0x57, 0x31, 0x45, 0x46, 0x46, 0x39, 0x4d, 0x72, 0x30, 0x6f, 0x53, 0x75, 0x38, 0x49, 0x64, 0x2b, 0x72, 0x74, 0x74, 0x6a, 0x47, 0x70, 0x76, 0x4b, 0x55, 0x70, 0x57, 0x5a, 0x4b, 0x75, 0x51, 0x30, 0x5a, 0x61, 0x2b, 0x58, 0x67, 0x4c, 0x31, 0x70, 0x61, 0x5a, 0x54, 0x36, 0x35, 0x6e, 0x31, 0x6b, 0x34, 0x68, 0x4f, 0x56, 0x77, 0x55, 0x78, 0x38, 0x35, 0x0a, 0x61, 0x71, 0x37, 0x38, 0x58, 0x4c, 0x5a, 0x6b, 0x44, 0x73, 0x37, 0x44, 0x41, 0x73, 0x35, 0x43, 0x67, 0x47, 0x4e, 0x59, 0x35, 0x35, 0x6b, 0x6a, 0x64, 0x54, 0x37, 0x53, 0x2f, 0x41, 0x66, 0x77, 0x39, 0x48, 0x7a, 0x45, 0x45, 0x59, 0x43, 0x70, 0x74, 0x47, 0x73, 0x6c, 0x5a, 0x65, 0x65, 0x61, 0x61, 0x65, 0x32, 0x51, 0x30, 0x47, 0x64, 0x4a, 0x62, 0x6b, 0x4d, 0x42, 0x2b, 0x49, 0x61, 0x53, 0x0a, 0x7a, 0x56, 0x56, 0x33, 0x44, 0x59, 0x74, 0x44, 0x59, 0x77, 0x4b, 0x42, 0x67, 0x51, 0x44, 0x42, 0x50, 0x32, 0x46, 0x53, 0x6f, 0x64, 0x6f, 0x61, 0x48, 0x77, 0x58, 0x74, 0x62, 0x6a, 0x79, 0x37, 0x76, 0x54, 0x6b, 0x6a, 0x71, 0x64, 0x39, 0x73, 0x61, 0x4a, 0x52, 0x6d, 0x44, 0x43, 0x52, 0x69, 0x6f, 0x2f, 0x58, 0x67, 0x55, 0x34, 0x53, 0x6e, 0x74, 0x6c, 0x69, 0x74, 0x43, 0x54, 0x67, 0x67, 0x0a, 0x33, 0x79, 0x71, 0x74, 0x73, 0x53, 0x79, 0x75, 0x7a, 0x75, 0x70, 0x70, 0x4f, 0x4a, 0x68, 0x2f, 0x58, 0x48, 0x45, 0x2f, 0x30, 0x77, 0x73, 0x65, 0x43, 0x77, 0x51, 0x39, 0x6c, 0x38, 0x76, 0x77, 0x52, 0x4c, 0x41, 0x4b, 0x31, 0x64, 0x36, 0x79, 0x31, 0x32, 0x63, 0x73, 0x67, 0x6b, 0x78, 0x4d, 0x44, 0x66, 0x45, 0x46, 0x5a, 0x2b, 0x76, 0x41, 0x44, 0x32, 0x4f, 0x46, 0x32, 0x2b, 0x32, 0x58, 0x0a, 0x6a, 0x6c, 0x43, 0x67, 0x2b, 0x47, 0x4d, 0x76, 0x72, 0x49, 0x6b, 0x66, 0x79, 0x6f, 0x4a, 0x35, 0x61, 0x73, 0x58, 0x39, 0x75, 0x4c, 0x57, 0x2b, 0x32, 0x73, 0x57, 0x67, 0x62, 0x6c, 0x41, 0x75, 0x73, 0x2b, 0x54, 0x37, 0x74, 0x5a, 0x66, 0x47, 0x53, 0x62, 0x2b, 0x73, 0x4a, 0x32, 0x70, 0x38, 0x6c, 0x52, 0x5a, 0x58, 0x47, 0x6e, 0x69, 0x74, 0x30, 0x51, 0x4b, 0x42, 0x67, 0x48, 0x34, 0x48, 0x0a, 0x59, 0x79, 0x75, 0x38, 0x70, 0x51, 0x47, 0x4e, 0x50, 0x77, 0x75, 0x75, 0x56, 0x49, 0x4a, 0x6d, 0x70, 0x6d, 0x34, 0x67, 0x34, 0x5a, 0x33, 0x4b, 0x46, 0x34, 0x48, 0x64, 0x45, 0x65, 0x6d, 0x36, 0x61, 0x6b, 0x66, 0x53, 0x59, 0x78, 0x73, 0x68, 0x73, 0x37, 0x6f, 0x2f, 0x53, 0x75, 0x48, 0x36, 0x51, 0x79, 0x32, 0x54, 0x55, 0x58, 0x49, 0x36, 0x50, 0x4c, 0x6e, 0x66, 0x51, 0x2f, 0x70, 0x30, 0x0a, 0x36, 0x6c, 0x39, 0x69, 0x65, 0x66, 0x71, 0x6e, 0x58, 0x6d, 0x58, 0x74, 0x51, 0x68, 0x49, 0x64, 0x77, 0x4a, 0x65, 0x57, 0x4f, 0x45, 0x65, 0x54, 0x4c, 0x6d, 0x72, 0x76, 0x77, 0x38, 0x47, 0x68, 0x47, 0x30, 0x6f, 0x77, 0x41, 0x59, 0x56, 0x55, 0x6a, 0x6e, 0x41, 0x50, 0x61, 0x36, 0x69, 0x6f, 0x4d, 0x37, 0x79, 0x46, 0x61, 0x7a, 0x6f, 0x4d, 0x65, 0x73, 0x57, 0x59, 0x76, 0x79, 0x41, 0x36, 0x0a, 0x6d, 0x4b, 0x49, 0x62, 0x4c, 0x43, 0x4f, 0x4f, 0x4d, 0x54, 0x55, 0x78, 0x37, 0x56, 0x4e, 0x32, 0x47, 0x56, 0x48, 0x64, 0x35, 0x39, 0x46, 0x50, 0x35, 0x36, 0x55, 0x49, 0x76, 0x41, 0x54, 0x6a, 0x7a, 0x43, 0x55, 0x6a, 0x44, 0x79, 0x71, 0x44, 0x41, 0x6f, 0x47, 0x41, 0x46, 0x72, 0x4b, 0x72, 0x38, 0x73, 0x6b, 0x65, 0x78, 0x77, 0x35, 0x68, 0x32, 0x65, 0x64, 0x39, 0x68, 0x47, 0x71, 0x63, 0x0a, 0x49, 0x71, 0x34, 0x59, 0x59, 0x54, 0x74, 0x4a, 0x4e, 0x31, 0x74, 0x68, 0x37, 0x37, 0x7a, 0x52, 0x4f, 0x72, 0x61, 0x41, 0x41, 0x31, 0x64, 0x47, 0x33, 0x64, 0x6a, 0x6c, 0x34, 0x4e, 0x38, 0x4c, 0x2b, 0x75, 0x4a, 0x38, 0x58, 0x4e, 0x74, 0x63, 0x69, 0x75, 0x46, 0x38, 0x30, 0x61, 0x6e, 0x58, 0x7a, 0x41, 0x77, 0x30, 0x78, 0x4b, 0x6a, 0x75, 0x78, 0x79, 0x47, 0x49, 0x4c, 0x51, 0x48, 0x4a, 0x0a, 0x61, 0x45, 0x72, 0x43, 0x33, 0x57, 0x38, 0x6e, 0x39, 0x76, 0x70, 0x79, 0x30, 0x46, 0x6e, 0x65, 0x36, 0x6f, 0x39, 0x62, 0x39, 0x2b, 0x4e, 0x49, 0x7a, 0x4d, 0x47, 0x5a, 0x58, 0x44, 0x2f, 0x6a, 0x62, 0x6e, 0x6f, 0x77, 0x62, 0x6b, 0x38, 0x42, 0x76, 0x42, 0x66, 0x55, 0x75, 0x79, 0x48, 0x36, 0x69, 0x52, 0x4b, 0x71, 0x2f, 0x6e, 0x7a, 0x51, 0x4c, 0x42, 0x71, 0x35, 0x78, 0x31, 0x75, 0x6d, 0x0a, 0x77, 0x6d, 0x2f, 0x45, 0x69, 0x2f, 0x6e, 0x2f, 0x61, 0x76, 0x71, 0x58, 0x48, 0x50, 0x64, 0x54, 0x79, 0x31, 0x2b, 0x2b, 0x73, 0x71, 0x51, 0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 1704
{0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x42, 0x49, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x45, 0x46, 0x41, 0x41, 0x4f, 0x43, 0x41, 0x51, 0x38, 0x41, 0x4d, 0x49, 0x49, 0x42, 0x43, 0x67, 0x4b, 0x43, 0x41, 0x51, 0x45, 0x41, 0x7a, 0x70, 0x53, 0x6e, 0x39, 0x48, 0x66, 0x53, 0x79, 0x44, 0x71, 0x46, 0x6c, 0x35, 0x4b, 0x39, 0x58, 0x79, 0x41, 0x70, 0x0a, 0x65, 0x49, 0x6b, 0x42, 0x4b, 0x42, 0x36, 0x7a, 0x7a, 0x45, 0x72, 0x48, 0x50, 0x43, 0x6d, 0x76, 0x52, 0x79, 0x4f, 0x52, 0x4e, 0x76, 0x52, 0x6f, 0x4c, 0x4a, 0x61, 0x31, 0x64, 0x36, 0x46, 0x4b, 0x6e, 0x44, 0x6d, 0x46, 0x6c, 0x33, 0x66, 0x79, 0x4f, 0x46, 0x79, 0x74, 0x53, 0x76, 0x6b, 0x6a, 0x71, 0x6b, 0x65, 0x6a, 0x34, 0x33, 0x46, 0x45, 0x51, 0x56, 0x70, 0x64, 0x42, 0x63, 0x2f, 0x4d, 0x0a, 0x62, 0x5a, 0x42, 0x52, 0x65, 0x73, 0x45, 0x68, 0x64, 0x47, 0x4c, 0x54, 0x66, 0x4d, 0x2f, 0x57, 0x58, 0x72, 0x79, 0x39, 0x76, 0x66, 0x6c, 0x45, 0x4b, 0x6e, 0x67, 0x4d, 0x31, 0x45, 0x68, 0x54, 0x41, 0x49, 0x35, 0x6c, 0x73, 0x38, 0x67, 0x48, 0x49, 0x49, 0x64, 0x4d, 0x47, 0x30, 0x71, 0x67, 0x6b, 0x5a, 0x79, 0x34, 0x50, 0x32, 0x78, 0x61, 0x66, 0x72, 0x56, 0x7a, 0x39, 0x55, 0x46, 0x79, 0x0a, 0x46, 0x52, 0x6e, 0x4a, 0x2b, 0x52, 0x48, 0x51, 0x47, 0x35, 0x65, 0x63, 0x65, 0x41, 0x2f, 0x64, 0x48, 0x53, 0x55, 0x4c, 0x30, 0x36, 0x67, 0x61, 0x4e, 0x63, 0x45, 0x57, 0x32, 0x67, 0x30, 0x50, 0x35, 0x33, 0x70, 0x65, 0x57, 0x39, 0x69, 0x70, 0x30, 0x73, 0x4f, 0x68, 0x37, 0x64, 0x45, 0x4e, 0x30, 0x70, 0x37, 0x30, 0x5a, 0x7a, 0x55, 0x37, 0x61, 0x69, 0x6d, 0x4b, 0x50, 0x6a, 0x4d, 0x58, 0x0a, 0x57, 0x68, 0x6e, 0x71, 0x49, 0x61, 0x4f, 0x35, 0x31, 0x6e, 0x4a, 0x69, 0x48, 0x48, 0x68, 0x44, 0x65, 0x41, 0x68, 0x50, 0x49, 0x31, 0x33, 0x79, 0x38, 0x4b, 0x45, 0x7a, 0x49, 0x71, 0x47, 0x67, 0x6f, 0x33, 0x77, 0x49, 0x4c, 0x35, 0x7a, 0x39, 0x72, 0x55, 0x7a, 0x53, 0x4a, 0x66, 0x48, 0x75, 0x6a, 0x76, 0x4d, 0x69, 0x6b, 0x6d, 0x64, 0x71, 0x45, 0x4e, 0x34, 0x57, 0x76, 0x43, 0x4e, 0x2f, 0x0a, 0x6d, 0x50, 0x39, 0x71, 0x75, 0x6c, 0x49, 0x47, 0x77, 0x61, 0x74, 0x6f, 0x42, 0x4d, 0x39, 0x53, 0x71, 0x30, 0x51, 0x62, 0x2b, 0x72, 0x4c, 0x68, 0x42, 0x4a, 0x77, 0x57, 0x4c, 0x6b, 0x62, 0x6d, 0x4a, 0x6d, 0x56, 0x39, 0x37, 0x56, 0x71, 0x5a, 0x6b, 0x49, 0x4f, 0x4e, 0x72, 0x6c, 0x4c, 0x52, 0x71, 0x54, 0x70, 0x46, 0x56, 0x63, 0x54, 0x71, 0x4b, 0x30, 0x4e, 0x61, 0x2b, 0x45, 0x70, 0x36, 0x0a, 0x47, 0x77, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x20, 0x4b, 0x45, 0x59, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x0a}longeur: 451
----------------------**************************************-------------------------------
private : 308204bd020100300d06092a864886f70d0101010500048204a7308204a302010002820101009adcaf3f0bfd6b91ac6ad672fc2eb0ca42c0b4180480e96dc73ae0bfc5a024f0a2e55b1b45c2d117ce55ac72e4dcc54a79173d1fbf07505fcd37a11ca875cba823b0eb25f0aad8f0479df50a6c1ba3f64942a97e86bbfc551439048363e92f0d2415cfb1f1050627361e441323d7e292559dabd9e6a48aa7086bfb6341c12625c90877c601e17c99c67008ff43bb507608a7824616e8f7336a651d6264e16e041d43b9a4fe6ef9ec6f18e4b0675571d85aa08889414b79050d568a1fe3e03d740d1816ed2981a068b0c6bb24aedf31203b745797abe05f39c83380f23bba8c945ef0756f50270410fb2b239e04962c4774c065258fcf8b9e660f90d78a29e08702030100010282010040e979019dd67b54e3e7227daf2c290996e26c7ad6c46c540a1b2962e9052006c7d9088fcd75842c8cde077b5f6814c08b324cfa3619ec3c43ea69fb77b76c86cd731695e023d4ec1eb0dcaa223791ca25da2deeadae356e3a1c4e427eca1ae150bb5dc432094f93771147aa982f21370271253c207bdeec75d0c15e510d139e43116019507ed2625e3374af74fb6887c6f0cf5083036176942e52b2fb843190b286843587d5781ca1f4b9c81c65cd85d2f2073b2cc2a9837e6207a527042841e784c0b1beaf003681a9aea8c48ea8f888b1b2681d204af72ebbe84e7aeaff8e9e435f68d23073a03f9e554e81a9136cebf80c4cba2b419fed2e619b02278efd02818100c8c25f518c08ef6070497dd2addcdbcede3f85ec3705e8084d009db9d42de07576a3f43db37fcc6d6d9bbd5d6dd38b91a4a64e8e4b47d63a44aa77dd1a963b24c0f2546c253f7798d871d4cdbce6b6dbaca1575ae1ac836aa94292667b6accd78d090c0cdb768113f1a66a452c21d3abdc8e391fea0b9f2e58fe2ddea841240302818100c5794770a37d51a3ff525497d3f30706b3570e24935d40587a9204d47d1ece3a61d6825dbeb22cec0b0d34b2d30ec34f500abf61940556b80db068bb22da1a55733c259b9ae9c603f8f71f99ea3099ff5b840da76feb8d0c8ce9029d985d8e310a3a85b7ac5d2513ff44461e36fc8d989d0738f1f01cf82a00536b4336b7842d0281804886071f13626aef40c11bc60eeed92d1b16818fbab4d484a32494d5fbb373019c11507b35abf63295c50c1c833f478d1e98c18a1fe1dc9f020d3eedcddbf593aa6c20594cff6779fcbeea6c44506840655587941a3052ed2626197312249bc94676bd36abd55c7dd2ef1636d4e18770ef652577c4f9dbd0476fd32c3b4604f70281806083c10de56a179fdee73f5f2181335aec064d6c44f61bbfe2d0413a15991bd45f03379e57d8bfa9f250d703dbb1e875783a788559922e6b308d9af273bb4389a613ac91dbea0c14def6f16409990d7b4820478821647000c552112c334eee733b7b94e54b820ee032300d513130c887e19fa90e5e7bda32b50c106dbe6d7d5502818100881077f2138338ab18bef9a419ad71f13af8e1ed765b69abdf831d20fe416f3eda46075a7aeecc7455cdefb89e45ecdcd38daa749d7a132d6ba193e344ecabfcd7f1a050f3ef7501df9c37f55963b1083273a70be0c6185e6c1a0ac8862562ef1520cc910932edef6aaa96e9f1f0d57dcce0b934e52f7197acbf7a76a6212f98
public : 30820122300d06092a864886f70d01010105000382010f003082010a02820101009adcaf3f0bfd6b91ac6ad672fc2eb0ca42c0b4180480e96dc73ae0bfc5a024f0a2e55b1b45c2d117ce55ac72e4dcc54a79173d1fbf07505fcd37a11ca875cba823b0eb25f0aad8f0479df50a6c1ba3f64942a97e86bbfc551439048363e92f0d2415cfb1f1050627361e441323d7e292559dabd9e6a48aa7086bfb6341c12625c90877c601e17c99c67008ff43bb507608a7824616e8f7336a651d6264e16e041d43b9a4fe6ef9ec6f18e4b0675571d85aa08889414b79050d568a1fe3e03d740d1816ed2981a068b0c6bb24aedf31203b745797abe05f39c83380f23bba8c945ef0756f50270410fb2b239e04962c4774c065258fcf8b9e660f90d78a29e0870203010001
Message original: Bonjour, ceci est un message secret!
Message chiffré: 1128f4bfe90516ca43d70d4d0343f7a3b6a1a288ea83fe0aa8b8530d53c4024294f27296e75822dd3145c1275021e87e92190d3cdfd2de4d4cad8c504db0bcae931ad0e540ab72f331ba8bae0331e4b07ea933ae583b6a4dddcaaef7c4c1bec2d4019fd2d41995caa9e5d3e83e4c8eb09f9a923c85de88efdd4a53c419f49034ba7378f904320de8d8f6212b27abe445f9d038836c5e08336f5567102a9c82938970aac53cfa7e3144b0f6396aba589aa252bd92fba94fdc6638f4f65f0c209169c72748cf4d7e4a567417b29bea9b1c20ef78f7b6b85ef3d699dbabaeea2678b384ccb3e214fe8209d948646e4902ac67cfc10f9cfe07efdcd4335b50c4582e
Message déchiffré: Bonjour, ceci est un message secret!

G:\PFE>python test7.py
private : 308204bd020100300d06092a864886f70d0101010500048204a7308204a302010002820101009adcaf3f0bfd6b91ac6ad672fc2eb0ca42c0b4180480e96dc73ae0bfc5a024f0a2e55b1b45c2d117ce55ac72e4dcc54a79173d1fbf07505fcd37a11ca875cba823b0eb25f0aad8f0479df50a6c1ba3f64942a97e86bbfc551439048363e92f0d2415cfb1f1050627361e441323d7e292559dabd9e6a48aa7086bfb6341c12625c90877c601e17c99c67008ff43bb507608a7824616e8f7336a651d6264e16e041d43b9a4fe6ef9ec6f18e4b0675571d85aa08889414b79050d568a1fe3e03d740d1816ed2981a068b0c6bb24aedf31203b745797abe05f39c83380f23bba8c945ef0756f50270410fb2b239e04962c4774c065258fcf8b9e660f90d78a29e08702030100010282010040e979019dd67b54e3e7227daf2c290996e26c7ad6c46c540a1b2962e9052006c7d9088fcd75842c8cde077b5f6814c08b324cfa3619ec3c43ea69fb77b76c86cd731695e023d4ec1eb0dcaa223791ca25da2deeadae356e3a1c4e427eca1ae150bb5dc432094f93771147aa982f21370271253c207bdeec75d0c15e510d139e43116019507ed2625e3374af74fb6887c6f0cf5083036176942e52b2fb843190b286843587d5781ca1f4b9c81c65cd85d2f2073b2cc2a9837e6207a527042841e784c0b1beaf003681a9aea8c48ea8f888b1b2681d204af72ebbe84e7aeaff8e9e435f68d23073a03f9e554e81a9136cebf80c4cba2b419fed2e619b02278efd02818100c8c25f518c08ef6070497dd2addcdbcede3f85ec3705e8084d009db9d42de07576a3f43db37fcc6d6d9bbd5d6dd38b91a4a64e8e4b47d63a44aa77dd1a963b24c0f2546c253f7798d871d4cdbce6b6dbaca1575ae1ac836aa94292667b6accd78d090c0cdb768113f1a66a452c21d3abdc8e391fea0b9f2e58fe2ddea841240302818100c5794770a37d51a3ff525497d3f30706b3570e24935d40587a9204d47d1ece3a61d6825dbeb22cec0b0d34b2d30ec34f500abf61940556b80db068bb22da1a55733c259b9ae9c603f8f71f99ea3099ff5b840da76feb8d0c8ce9029d985d8e310a3a85b7ac5d2513ff44461e36fc8d989d0738f1f01cf82a00536b4336b7842d0281804886071f13626aef40c11bc60eeed92d1b16818fbab4d484a32494d5fbb373019c11507b35abf63295c50c1c833f478d1e98c18a1fe1dc9f020d3eedcddbf593aa6c20594cff6779fcbeea6c44506840655587941a3052ed2626197312249bc94676bd36abd55c7dd2ef1636d4e18770ef652577c4f9dbd0476fd32c3b4604f70281806083c10de56a179fdee73f5f2181335aec064d6c44f61bbfe2d0413a15991bd45f03379e57d8bfa9f250d703dbb1e875783a788559922e6b308d9af273bb4389a613ac91dbea0c14def6f16409990d7b4820478821647000c552112c334eee733b7b94e54b820ee032300d513130c887e19fa90e5e7bda32b50c106dbe6d7d5502818100881077f2138338ab18bef9a419ad71f13af8e1ed765b69abdf831d20fe416f3eda46075a7aeecc7455cdefb89e45ecdcd38daa749d7a132d6ba193e344ecabfcd7f1a050f3ef7501df9c37f55963b1083273a70be0c6185e6c1a0ac8862562ef1520cc910932edef6aaa96e9f1f0d57dcce0b934e52f7197acbf7a76a6212f98
public : 30820122300d06092a864886f70d01010105000382010f003082010a02820101009adcaf3f0bfd6b91ac6ad672fc2eb0ca42c0b4180480e96dc73ae0bfc5a024f0a2e55b1b45c2d117ce55ac72e4dcc54a79173d1fbf07505fcd37a11ca875cba823b0eb25f0aad8f0479df50a6c1ba3f64942a97e86bbfc551439048363e92f0d2415cfb1f1050627361e441323d7e292559dabd9e6a48aa7086bfb6341c12625c90877c601e17c99c67008ff43bb507608a7824616e8f7336a651d6264e16e041d43b9a4fe6ef9ec6f18e4b0675571d85aa08889414b79050d568a1fe3e03d740d1816ed2981a068b0c6bb24aedf31203b745797abe05f39c83380f23bba8c945ef0756f50270410fb2b239e04962c4774c065258fcf8b9e660f90d78a29e0870203010001
Message original: Bonjour, ceci est un message secret!
Message chiffré: 34c1a754a5dbe9e71037749d13b940addccf520865e2711effecc890a48c78b23d291b09eb08793812be18401ce6b282e8767ab5812d9a8b9a47aeed77346eacf59c9924e683861750893bfb7f2e20c35d03859d27e0bd4f6cae0d7b7fff263f2038103e3226fe0e70d5ad793b7b6fc2e182dee578b5ee5cbe52c5d260b61cad1dd6a1607356457e235313de71a63ee7c0c03a5932c83400fae36b06870c1c9a713d581d3d93a9ee18df8c1b97911f928ea09c81ba55b4830fe629d66886f22df37f00f20a65ab548b38750d6c0eeda768678c5948d3417e0351ac01c2de0528d5fec598b21b473283a851845a9cac53d1e9af5a1814d79a9be638314551be9b
Message déchiffré: Bonjour, ceci est un message secret!
{0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0x9a, 0xdc, 0xaf, 0x3f, 0x0b, 0xfd, 0x6b, 0x91, 0xac, 0x6a, 0xd6, 0x72, 0xfc, 0x2e, 0xb0, 0xca, 0x42, 0xc0, 0xb4, 0x18, 0x04, 0x80, 0xe9, 0x6d, 0xc7, 0x3a, 0xe0, 0xbf, 0xc5, 0xa0, 0x24, 0xf0, 0xa2, 0xe5, 0x5b, 0x1b, 0x45, 0xc2, 0xd1, 0x17, 0xce, 0x55, 0xac, 0x72, 0xe4, 0xdc, 0xc5, 0x4a, 0x79, 0x17, 0x3d, 0x1f, 0xbf, 0x07, 0x50, 0x5f, 0xcd, 0x37, 0xa1, 0x1c, 0xa8, 0x75, 0xcb, 0xa8, 0x23, 0xb0, 0xeb, 0x25, 0xf0, 0xaa, 0xd8, 0xf0, 0x47, 0x9d, 0xf5, 0x0a, 0x6c, 0x1b, 0xa3, 0xf6, 0x49, 0x42, 0xa9, 0x7e, 0x86, 0xbb, 0xfc, 0x55, 0x14, 0x39, 0x04, 0x83, 0x63, 0xe9, 0x2f, 0x0d, 0x24, 0x15, 0xcf, 0xb1, 0xf1, 0x05, 0x06, 0x27, 0x36, 0x1e, 0x44, 0x13, 0x23, 0xd7, 0xe2, 0x92, 0x55, 0x9d, 0xab, 0xd9, 0xe6, 0xa4, 0x8a, 0xa7, 0x08, 0x6b, 0xfb, 0x63, 0x41, 0xc1, 0x26, 0x25, 0xc9, 0x08, 0x77, 0xc6, 0x01, 0xe1, 0x7c, 0x99, 0xc6, 0x70, 0x08, 0xff, 0x43, 0xbb, 0x50, 0x76, 0x08, 0xa7, 0x82, 0x46, 0x16, 0xe8, 0xf7, 0x33, 0x6a, 0x65, 0x1d, 0x62, 0x64, 0xe1, 0x6e, 0x04, 0x1d, 0x43, 0xb9, 0xa4, 0xfe, 0x6e, 0xf9, 0xec, 0x6f, 0x18, 0xe4, 0xb0, 0x67, 0x55, 0x71, 0xd8, 0x5a, 0xa0, 0x88, 0x89, 0x41, 0x4b, 0x79, 0x05, 0x0d, 0x56, 0x8a, 0x1f, 0xe3, 0xe0, 0x3d, 0x74, 0x0d, 0x18, 0x16, 0xed, 0x29, 0x81, 0xa0, 0x68, 0xb0, 0xc6, 0xbb, 0x24, 0xae, 0xdf, 0x31, 0x20, 0x3b, 0x74, 0x57, 0x97, 0xab, 0xe0, 0x5f, 0x39, 0xc8, 0x33, 0x80, 0xf2, 0x3b, 0xba, 0x8c, 0x94, 0x5e, 0xf0, 0x75, 0x6f, 0x50, 0x27, 0x04, 0x10, 0xfb, 0x2b, 0x23, 0x9e, 0x04, 0x96, 0x2c, 0x47, 0x74, 0xc0, 0x65, 0x25, 0x8f, 0xcf, 0x8b, 0x9e, 0x66, 0x0f, 0x90, 0xd7, 0x8a, 0x29, 0xe0, 0x87, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x40, 0xe9, 0x79, 0x01, 0x9d, 0xd6, 0x7b, 0x54, 0xe3, 0xe7, 0x22, 0x7d, 0xaf, 0x2c, 0x29, 0x09, 0x96, 0xe2, 0x6c, 0x7a, 0xd6, 0xc4, 0x6c, 0x54, 0x0a, 0x1b, 0x29, 0x62, 0xe9, 0x05, 0x20, 0x06, 0xc7, 0xd9, 0x08, 0x8f, 0xcd, 0x75, 0x84, 0x2c, 0x8c, 0xde, 0x07, 0x7b, 0x5f, 0x68, 0x14, 0xc0, 0x8b, 0x32, 0x4c, 0xfa, 0x36, 0x19, 0xec, 0x3c, 0x43, 0xea, 0x69, 0xfb, 0x77, 0xb7, 0x6c, 0x86, 0xcd, 0x73, 0x16, 0x95, 0xe0, 0x23, 0xd4, 0xec, 0x1e, 0xb0, 0xdc, 0xaa, 0x22, 0x37, 0x91, 0xca, 0x25, 0xda, 0x2d, 0xee, 0xad, 0xae, 0x35, 0x6e, 0x3a, 0x1c, 0x4e, 0x42, 0x7e, 0xca, 0x1a, 0xe1, 0x50, 0xbb, 0x5d, 0xc4, 0x32, 0x09, 0x4f, 0x93, 0x77, 0x11, 0x47, 0xaa, 0x98, 0x2f, 0x21, 0x37, 0x02, 0x71, 0x25, 0x3c, 0x20, 0x7b, 0xde, 0xec, 0x75, 0xd0, 0xc1, 0x5e, 0x51, 0x0d, 0x13, 0x9e, 0x43, 0x11, 0x60, 0x19, 0x50, 0x7e, 0xd2, 0x62, 0x5e, 0x33, 0x74, 0xaf, 0x74, 0xfb, 0x68, 0x87, 0xc6, 0xf0, 0xcf, 0x50, 0x83, 0x03, 0x61, 0x76, 0x94, 0x2e, 0x52, 0xb2, 0xfb, 0x84, 0x31, 0x90, 0xb2, 0x86, 0x84, 0x35, 0x87, 0xd5, 0x78, 0x1c, 0xa1, 0xf4, 0xb9, 0xc8, 0x1c, 0x65, 0xcd, 0x85, 0xd2, 0xf2, 0x07, 0x3b, 0x2c, 0xc2, 0xa9, 0x83, 0x7e, 0x62, 0x07, 0xa5, 0x27, 0x04, 0x28, 0x41, 0xe7, 0x84, 0xc0, 0xb1, 0xbe, 0xaf, 0x00, 0x36, 0x81, 0xa9, 0xae, 0xa8, 0xc4, 0x8e, 0xa8, 0xf8, 0x88, 0xb1, 0xb2, 0x68, 0x1d, 0x20, 0x4a, 0xf7, 0x2e, 0xbb, 0xe8, 0x4e, 0x7a, 0xea, 0xff, 0x8e, 0x9e, 0x43, 0x5f, 0x68, 0xd2, 0x30, 0x73, 0xa0, 0x3f, 0x9e, 0x55, 0x4e, 0x81, 0xa9, 0x13, 0x6c, 0xeb, 0xf8, 0x0c, 0x4c, 0xba, 0x2b, 0x41, 0x9f, 0xed, 0x2e, 0x61, 0x9b, 0x02, 0x27, 0x8e, 0xfd, 0x02, 0x81, 0x81, 0x00, 0xc8, 0xc2, 0x5f, 0x51, 0x8c, 0x08, 0xef, 0x60, 0x70, 0x49, 0x7d, 0xd2, 0xad, 0xdc, 0xdb, 0xce, 0xde, 0x3f, 0x85, 0xec, 0x37, 0x05, 0xe8, 0x08, 0x4d, 0x00, 0x9d, 0xb9, 0xd4, 0x2d, 0xe0, 0x75, 0x76, 0xa3, 0xf4, 0x3d, 0xb3, 0x7f, 0xcc, 0x6d, 0x6d, 0x9b, 0xbd, 0x5d, 0x6d, 0xd3, 0x8b, 0x91, 0xa4, 0xa6, 0x4e, 0x8e, 0x4b, 0x47, 0xd6, 0x3a, 0x44, 0xaa, 0x77, 0xdd, 0x1a, 0x96, 0x3b, 0x24, 0xc0, 0xf2, 0x54, 0x6c, 0x25, 0x3f, 0x77, 0x98, 0xd8, 0x71, 0xd4, 0xcd, 0xbc, 0xe6, 0xb6, 0xdb, 0xac, 0xa1, 0x57, 0x5a, 0xe1, 0xac, 0x83, 0x6a, 0xa9, 0x42, 0x92, 0x66, 0x7b, 0x6a, 0xcc, 0xd7, 0x8d, 0x09, 0x0c, 0x0c, 0xdb, 0x76, 0x81, 0x13, 0xf1, 0xa6, 0x6a, 0x45, 0x2c, 0x21, 0xd3, 0xab, 0xdc, 0x8e, 0x39, 0x1f, 0xea, 0x0b, 0x9f, 0x2e, 0x58, 0xfe, 0x2d, 0xde, 0xa8, 0x41, 0x24, 0x03, 0x02, 0x81, 0x81, 0x00, 0xc5, 0x79, 0x47, 0x70, 0xa3, 0x7d, 0x51, 0xa3, 0xff, 0x52, 0x54, 0x97, 0xd3, 0xf3, 0x07, 0x06, 0xb3, 0x57, 0x0e, 0x24, 0x93, 0x5d, 0x40, 0x58, 0x7a, 0x92, 0x04, 0xd4, 0x7d, 0x1e, 0xce, 0x3a, 0x61, 0xd6, 0x82, 0x5d, 0xbe, 0xb2, 0x2c, 0xec, 0x0b, 0x0d, 0x34, 0xb2, 0xd3, 0x0e, 0xc3, 0x4f, 0x50, 0x0a, 0xbf, 0x61, 0x94, 0x05, 0x56, 0xb8, 0x0d, 0xb0, 0x68, 0xbb, 0x22, 0xda, 0x1a, 0x55, 0x73, 0x3c, 0x25, 0x9b, 0x9a, 0xe9, 0xc6, 0x03, 0xf8, 0xf7, 0x1f, 0x99, 0xea, 0x30, 0x99, 0xff, 0x5b, 0x84, 0x0d, 0xa7, 0x6f, 0xeb, 0x8d, 0x0c, 0x8c, 0xe9, 0x02, 0x9d, 0x98, 0x5d, 0x8e, 0x31, 0x0a, 0x3a, 0x85, 0xb7, 0xac, 0x5d, 0x25, 0x13, 0xff, 0x44, 0x46, 0x1e, 0x36, 0xfc, 0x8d, 0x98, 0x9d, 0x07, 0x38, 0xf1, 0xf0, 0x1c, 0xf8, 0x2a, 0x00, 0x53, 0x6b, 0x43, 0x36, 0xb7, 0x84, 0x2d, 0x02, 0x81, 0x80, 0x48, 0x86, 0x07, 0x1f, 0x13, 0x62, 0x6a, 0xef, 0x40, 0xc1, 0x1b, 0xc6, 0x0e, 0xee, 0xd9, 0x2d, 0x1b, 0x16, 0x81, 0x8f, 0xba, 0xb4, 0xd4, 0x84, 0xa3, 0x24, 0x94, 0xd5, 0xfb, 0xb3, 0x73, 0x01, 0x9c, 0x11, 0x50, 0x7b, 0x35, 0xab, 0xf6, 0x32, 0x95, 0xc5, 0x0c, 0x1c, 0x83, 0x3f, 0x47, 0x8d, 0x1e, 0x98, 0xc1, 0x8a, 0x1f, 0xe1, 0xdc, 0x9f, 0x02, 0x0d, 0x3e, 0xed, 0xcd, 0xdb, 0xf5, 0x93, 0xaa, 0x6c, 0x20, 0x59, 0x4c, 0xff, 0x67, 0x79, 0xfc, 0xbe, 0xea, 0x6c, 0x44, 0x50, 0x68, 0x40, 0x65, 0x55, 0x87, 0x94, 0x1a, 0x30, 0x52, 0xed, 0x26, 0x26, 0x19, 0x73, 0x12, 0x24, 0x9b, 0xc9, 0x46, 0x76, 0xbd, 0x36, 0xab, 0xd5, 0x5c, 0x7d, 0xd2, 0xef, 0x16, 0x36, 0xd4, 0xe1, 0x87, 0x70, 0xef, 0x65, 0x25, 0x77, 0xc4, 0xf9, 0xdb, 0xd0, 0x47, 0x6f, 0xd3, 0x2c, 0x3b, 0x46, 0x04, 0xf7, 0x02, 0x81, 0x80, 0x60, 0x83, 0xc1, 0x0d, 0xe5, 0x6a, 0x17, 0x9f, 0xde, 0xe7, 0x3f, 0x5f, 0x21, 0x81, 0x33, 0x5a, 0xec, 0x06, 0x4d, 0x6c, 0x44, 0xf6, 0x1b, 0xbf, 0xe2, 0xd0, 0x41, 0x3a, 0x15, 0x99, 0x1b, 0xd4, 0x5f, 0x03, 0x37, 0x9e, 0x57, 0xd8, 0xbf, 0xa9, 0xf2, 0x50, 0xd7, 0x03, 0xdb, 0xb1, 0xe8, 0x75, 0x78, 0x3a, 0x78, 0x85, 0x59, 0x92, 0x2e, 0x6b, 0x30, 0x8d, 0x9a, 0xf2, 0x73, 0xbb, 0x43, 0x89, 0xa6, 0x13, 0xac, 0x91, 0xdb, 0xea, 0x0c, 0x14, 0xde, 0xf6, 0xf1, 0x64, 0x09, 0x99, 0x0d, 0x7b, 0x48, 0x20, 0x47, 0x88, 0x21, 0x64, 0x70, 0x00, 0xc5, 0x52, 0x11, 0x2c, 0x33, 0x4e, 0xee, 0x73, 0x3b, 0x7b, 0x94, 0xe5, 0x4b, 0x82, 0x0e, 0xe0, 0x32, 0x30, 0x0d, 0x51, 0x31, 0x30, 0xc8, 0x87, 0xe1, 0x9f, 0xa9, 0x0e, 0x5e, 0x7b, 0xda, 0x32, 0xb5, 0x0c, 0x10, 0x6d, 0xbe, 0x6d, 0x7d, 0x55, 0x02, 0x81, 0x81, 0x00, 0x88, 0x10, 0x77, 0xf2, 0x13, 0x83, 0x38, 0xab, 0x18, 0xbe, 0xf9, 0xa4, 0x19, 0xad, 0x71, 0xf1, 0x3a, 0xf8, 0xe1, 0xed, 0x76, 0x5b, 0x69, 0xab, 0xdf, 0x83, 0x1d, 0x20, 0xfe, 0x41, 0x6f, 0x3e, 0xda, 0x46, 0x07, 0x5a, 0x7a, 0xee, 0xcc, 0x74, 0x55, 0xcd, 0xef, 0xb8, 0x9e, 0x45, 0xec, 0xdc, 0xd3, 0x8d, 0xaa, 0x74, 0x9d, 0x7a, 0x13, 0x2d, 0x6b, 0xa1, 0x93, 0xe3, 0x44, 0xec, 0xab, 0xfc, 0xd7, 0xf1, 0xa0, 0x50, 0xf3, 0xef, 0x75, 0x01, 0xdf, 0x9c, 0x37, 0xf5, 0x59, 0x63, 0xb1, 0x08, 0x32, 0x73, 0xa7, 0x0b, 0xe0, 0xc6, 0x18, 0x5e, 0x6c, 0x1a, 0x0a, 0xc8, 0x86, 0x25, 0x62, 0xef, 0x15, 0x20, 0xcc, 0x91, 0x09, 0x32, 0xed, 0xef, 0x6a, 0xaa, 0x96, 0xe9, 0xf1, 0xf0, 0xd5, 0x7d, 0xcc, 0xe0, 0xb9, 0x34, 0xe5, 0x2f, 0x71, 0x97, 0xac, 0xbf, 0x7a, 0x76, 0xa6, 0x21, 0x2f, 0x98}longeur: 1217
{0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0x9a, 0xdc, 0xaf, 0x3f, 0x0b, 0xfd, 0x6b, 0x91, 0xac, 0x6a, 0xd6, 0x72, 0xfc, 0x2e, 0xb0, 0xca, 0x42, 0xc0, 0xb4, 0x18, 0x04, 0x80, 0xe9, 0x6d, 0xc7, 0x3a, 0xe0, 0xbf, 0xc5, 0xa0, 0x24, 0xf0, 0xa2, 0xe5, 0x5b, 0x1b, 0x45, 0xc2, 0xd1, 0x17, 0xce, 0x55, 0xac, 0x72, 0xe4, 0xdc, 0xc5, 0x4a, 0x79, 0x17, 0x3d, 0x1f, 0xbf, 0x07, 0x50, 0x5f, 0xcd, 0x37, 0xa1, 0x1c, 0xa8, 0x75, 0xcb, 0xa8, 0x23, 0xb0, 0xeb, 0x25, 0xf0, 0xaa, 0xd8, 0xf0, 0x47, 0x9d, 0xf5, 0x0a, 0x6c, 0x1b, 0xa3, 0xf6, 0x49, 0x42, 0xa9, 0x7e, 0x86, 0xbb, 0xfc, 0x55, 0x14, 0x39, 0x04, 0x83, 0x63, 0xe9, 0x2f, 0x0d, 0x24, 0x15, 0xcf, 0xb1, 0xf1, 0x05, 0x06, 0x27, 0x36, 0x1e, 0x44, 0x13, 0x23, 0xd7, 0xe2, 0x92, 0x55, 0x9d, 0xab, 0xd9, 0xe6, 0xa4, 0x8a, 0xa7, 0x08, 0x6b, 0xfb, 0x63, 0x41, 0xc1, 0x26, 0x25, 0xc9, 0x08, 0x77, 0xc6, 0x01, 0xe1, 0x7c, 0x99, 0xc6, 0x70, 0x08, 0xff, 0x43, 0xbb, 0x50, 0x76, 0x08, 0xa7, 0x82, 0x46, 0x16, 0xe8, 0xf7, 0x33, 0x6a, 0x65, 0x1d, 0x62, 0x64, 0xe1, 0x6e, 0x04, 0x1d, 0x43, 0xb9, 0xa4, 0xfe, 0x6e, 0xf9, 0xec, 0x6f, 0x18, 0xe4, 0xb0, 0x67, 0x55, 0x71, 0xd8, 0x5a, 0xa0, 0x88, 0x89, 0x41, 0x4b, 0x79, 0x05, 0x0d, 0x56, 0x8a, 0x1f, 0xe3, 0xe0, 0x3d, 0x74, 0x0d, 0x18, 0x16, 0xed, 0x29, 0x81, 0xa0, 0x68, 0xb0, 0xc6, 0xbb, 0x24, 0xae, 0xdf, 0x31, 0x20, 0x3b, 0x74, 0x57, 0x97, 0xab, 0xe0, 0x5f, 0x39, 0xc8, 0x33, 0x80, 0xf2, 0x3b, 0xba, 0x8c, 0x94, 0x5e, 0xf0, 0x75, 0x6f, 0x50, 0x27, 0x04, 0x10, 0xfb, 0x2b, 0x23, 0x9e, 0x04, 0x96, 0x2c, 0x47, 0x74, 0xc0, 0x65, 0x25, 0x8f, 0xcf, 0x8b, 0x9e, 0x66, 0x0f, 0x90, 0xd7, 0x8a, 0x29, 0xe0, 0x87, 0x02, 0x03, 0x01, 0x00, 0x01}longeur: 294
************************************************************************
{0x90, 0x2d, 0xa2, 0x10, 0xcc, 0xe8, 0xf7, 0xe4, 0xc5, 0x4c, 0x33, 0xdc, 0x66, 0x4a, 0x6d, 0xcd, 0x19, 0xb7, 0xbe, 0x76, 0x58, 0x2f, 0xaf, 0xda, 0x09, 0x04, 0xde, 0x10, 0x60, 0x7b, 0xf5, 0x63, 0xac, 0xdf, 0x5d, 0xa8, 0x0b, 0x61, 0x0f, 0x6b, 0x5c, 0x7c, 0x82, 0xcd, 0x95, 0xe6, 0xb4, 0x6f, 0x3e, 0xaf, 0x91, 0x90, 0x77, 0xf2, 0xd8, 0x9a, 0x49, 0xe4, 0x83, 0x79, 0xef, 0x02, 0xd0, 0x29, 0x4c, 0xbc, 0xe3, 0x88, 0x0e, 0xfb, 0xea, 0xd6, 0x13, 0x11, 0x63, 0x08, 0xd2, 0x3f, 0xf7, 0x2f, 0x9d, 0x3c, 0x4b, 0x55, 0xfb, 0x03, 0x83, 0xc1, 0x66, 0xdb, 0x84, 0xc6, 0xc6, 0xb7, 0xbd, 0xef, 0xb4, 0x66, 0x1e, 0xf1, 0x5f, 0x67, 0x07, 0x80, 0x62, 0x5c, 0x74, 0xe7, 0xdb, 0xf6, 0x71, 0xd6, 0xf7, 0x32, 0x29, 0x90, 0xa9, 0x3e, 0xc0, 0x2a, 0x68, 0x18, 0xbe, 0xb3, 0x05, 0xe0, 0x79, 0x16, 0x26, 0x33, 0x4c, 0x21, 0x2a, 0xbd, 0x61, 0xdc, 0xaf, 0xa3, 0x07, 0x63, 0xd9, 0xcb, 0x32, 0x97, 0x75, 0xce, 0xdc, 0xde, 0xcb, 0x4b, 0xdd, 0x2c, 0x6a, 0x21, 0x2f, 0x0b, 0x38, 0x3c, 0xc2, 0xa6, 0xa1, 0xef, 0x2f, 0x4b, 0x4b, 0x52, 0x3e, 0x7f, 0x55, 0xe8, 0x6f, 0x42, 0x6c, 0xfa, 0x2c, 0xaa, 0x10, 0xbb, 0x62, 0x16, 0x71, 0x8c, 0x08, 0x07, 0x46, 0x06, 0x52, 0x45, 0xb8, 0xe7, 0x12, 0x83, 0x20, 0x4e, 0xd3, 0x86, 0x4a, 0xeb, 0xe3, 0x9d, 0x4e, 0x3e, 0x83, 0x92, 0x7b, 0x21, 0xbb, 0xa3, 0x53, 0x06, 0x3d, 0xd6, 0x58, 0x11, 0x25, 0x32, 0x7e, 0xe5, 0xb7, 0xf5, 0x10, 0x0d, 0x04, 0xa9, 0xf6, 0x7e, 0x4e, 0x35, 0xc2, 0xa0, 0x4a, 0xb3, 0x72, 0xaf, 0x4f, 0x73, 0x3f, 0x4f, 0x0c, 0x6d, 0x1a, 0xec, 0x84, 0x5d, 0xed, 0xdc, 0xf1, 0x9f, 0x74, 0x08, 0xc1, 0x78, 0x19, 0xb9, 0xff, 0x60}
******************************************----------------------------------------------------------------------------------------
#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/rsa.h>

// Déclaration des clés publiques et privées sous forme de chaînes hexadécimales
const char private_key_hex[] = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; // Remplacer par votre clé privée en hexadécimal
const char public_key_hex[] = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"; // Remplacer par votre clé publique en hexadécimal

----------------------------
#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/rsa.h>

// Déclaration des clés publiques et privées sous forme de chaînes hexadécimales
const char private_key_hex[] = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"; // Remplacer par votre clé privée en hexadécimal
const char public_key_hex[] = "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY"; // Remplacer par votre clé publique en hexadécimal

// Taille des clés RSA (en octets)
#define KEY_SIZE 2048

// Taille maximale du buffer pour le message chiffré
#define CIPHER_BUFFER_SIZE KEY_SIZE / 8

// Fonction pour chiffrer un message en RSA
int rsa_encrypt(const unsigned char* plainText, unsigned char* cipherText, int plainTextLen) {
    int ret;
    RsaKey rsa;
    byte publicKey[KEY_SIZE];
    
    wc_InitRsaKey(&rsa, NULL);
    
    // Convertir la clé publique hexadécimale en binaire
    if (wc_RsaPublicKeyDecode((const byte*)public_key_hex, &publicKey, sizeof(publicKey)) != 0) {
        return -1; // Échec de décodage de la clé publique
    }
    
    // Charger la clé publique
    if ((ret = wc_RsaPublicKeySet(&rsa, publicKey, sizeof(publicKey), RSA_PUBLIC)) != 0) {
        return ret; // Échec du chargement de la clé publique
    }
    
    // Chiffrer le message
    if ((ret = wc_RsaPublicEncrypt(plainText, plainTextLen, cipherText, CIPHER_BUFFER_SIZE, &rsa, NULL, NULL)) < 0) {
        return ret; // Échec du chiffrement
    }
    
    wc_FreeRsaKey(&rsa);
    return ret; // Taille du texte chiffré
}

// Fonction pour déchiffrer un message en RSA
int rsa_decrypt(const unsigned char* cipherText, unsigned char* plainText, int cipherTextLen) {
    int ret;
    RsaKey rsa;
    byte privateKey[KEY_SIZE];
    
    wc_InitRsaKey(&rsa, NULL);
    
    // Convertir la clé privée hexadécimale en binaire
    if (wc_RsaPrivateKeyDecode((const byte*)private_key_hex, &privateKey, sizeof(privateKey)) != 0) {
        return -1; // Échec de décodage de la clé privée
    }
    
    // Charger la clé privée
    if ((ret = wc_RsaPrivateKeySet(&rsa, privateKey, sizeof(privateKey), NULL, 0)) != 0) {
        return ret; // Échec du chargement de la clé privée
    }
    
    // Déchiffrer le message
    if ((ret = wc_RsaPrivateDecrypt(cipherText, cipherTextLen, plainText, CIPHER_BUFFER_SIZE, &rsa)) < 0) {
        return ret; // Échec du déchiffrement
    }
    
    wc_FreeRsaKey(&rsa);
    return ret; // Taille du texte déchiffré
}

int main() {
    // Message à chiffrer
    const char plainText[] = "Hello, this is a secret message!";
    int plainTextLen = sizeof(plainText) - 1; // Exclure le caractère nul de la chaîne
    
    // Buffers pour le texte chiffré et déchiffré
    unsigned char cipherText[CIPHER_BUFFER_SIZE];
    unsigned char decryptedText[CIPHER_BUFFER_SIZE];
    
    // Chiffrement du message
    int cipherTextLen = rsa_encrypt((const unsigned char*)plainText, cipherText, plainTextLen);
    if (cipherTextLen < 0) {
        // Échec du chiffrement
        // Gérer l'erreur ici
    }
    
    // Déchiffrement du message
    int decryptedTextLen = rsa_decrypt(cipherText, decryptedText, cipherTextLen);
    if (decryptedTextLen < 0) {
        // Échec du déchiffrement
        // Gérer l'erreur ici
    }
    
    // Afficher le message original
    printf("Message original: %s\n", plainText);
    
    // Afficher le texte chiffré (en hexadécimal)
    printf("Message chiffré: ");
    for (int i = 0; i < cipherTextLen; i++) {
        printf("%02X", cipherText[i]);
    }
    printf("\n");
    
    // Afficher le texte déchiffré
    printf("Message déchiffré: %s\n", decryptedText);
    
    return 0;
}

*************************************************************************
#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/ecc.h>

// Taille du buffer pour la clé privée et publique
#define KEY_SIZE 32 // ECC P-256 a une taille de clé de 256 bits

// Fonction pour générer une paire de clés ECC P-256
void generate_ecc_key_pair(byte* private_key, byte* public_key) {
    int ret;
    ecc_key key;
    
    wc_ecc_init(&key);
    
    // Générer la paire de clés ECC P-256
    if ((ret = wc_ecc_make_key(NULL, KEY_SIZE, &key)) != 0) {
        // Gérer l'erreur ici
        // Remarque : Assurez-vous que vous avez initialisé WolfSSL avec le support ECC
    }
    
    // Copier la clé privée générée dans le buffer private_key
    XMEMCPY(private_key, key.k, KEY_SIZE);
    
    // Copier la clé publique générée dans le buffer public_key
    if ((ret = wc_ecc_export_x963(&key, public_key, KEY_SIZE, ECC_CURVE_TYPE)) != 0) {
        // Gérer l'erreur ici
    }
    
    wc_ecc_free(&key);
}

// Fonction pour chiffrer un message en utilisant ECC P-256
int ecc_encrypt(const byte* public_key, const byte* plainText, byte* cipherText, word32 plainTextLen) {
    int ret;
    ecc_key key;
    
    wc_ecc_init(&key);
    
    // Charger la clé publique à partir du buffer public_key
    if ((ret = wc_ecc_import_x963_ex(public_key, KEY_SIZE, &key, ECC_CURVE_TYPE)) != 0) {
        // Gérer l'erreur ici
    }
    
    // Chiffrer le message en utilisant la clé publique
    if ((ret = wc_ecc_encrypt_key_ex(plainText, plainTextLen, cipherText, plainTextLen + 16, NULL, 0, &key, ECC_CURVE_TYPE)) < 0) {
        // Gérer l'erreur ici
    }
    
    wc_ecc_free(&key);
    return ret; // Taille du texte chiffré
}

int main() {
    // Buffers pour la clé privée et publique
    byte private_key[KEY_SIZE];
    byte public_key[KEY_SIZE];
    
    // Buffer pour le message à chiffrer et le texte chiffré
    byte plainText[] = "Hello, this is a secret message!";
    word32 plainTextLen = sizeof(plainText) - 1; // Exclure le caractère nul de la chaîne
    byte cipherText[plainTextLen + 16]; // La taille du texte chiffré est légèrement supérieure à la taille du message original
    
    // Générer une paire de clés ECC P-256
    generate_ecc_key_pair(private_key, public_key);
    
    // Chiffrer le message en utilisant la clé publique
    int cipherTextLen = ecc_encrypt(public_key, plainText, cipherText, plainTextLen);
    if (cipherTextLen < 0) {
        // Échec du chiffrement
        // Gérer l'erreur ici
    }
    
    // Afficher le message original
    printf("Message original: %s\n", plainText);
    
    // Afficher la clé publique (en hexadécimal)
    printf("Clé publique: ");
    for (int i = 0; i < KEY_SIZE; i++) {
        printf("%02X", public_key[i]);
    }
    printf("\n");
    
    // Afficher le texte chiffré (en hexadécimal)
    printf("Message chiffré: ");
    for (int i = 0; i < cipherTextLen; i++) {
        printf("%02X", cipherText[i]);
    }
    printf("\n");
    
    return 0;
}
-*-*-*-*-*-*-*--**-*-*-*-*
#include <stdio.h>
#include <wolfssl/options.h>
#include <wolfssl/wolfcrypt/rsa.h>
#include <wolfssl/wolfcrypt/random.h>

#define RSA_KEY_SIZE 2048
#define RSA_PUBLIC_EXPONENT 65537
#define RSA_TEST_BYTES 256 /* 2048 bit key */

int main() {
    int ret;
    RsaKey rsaKey;
    WC_RNG rng;
    byte cipher[RSA_TEST_BYTES];
    byte plain[RSA_TEST_BYTES];
    byte decrypted[RSA_TEST_BYTES];
    word32 cipherLen = sizeof(cipher);
    word32 plainLen = sizeof(plain);
    word32 decryptedLen = sizeof(decrypted);

    const char* message = "Hello World";

    /* Initialize the library */
    wolfSSL_Init();

    /* Initialize RNG */
    if ((ret = wc_InitRng(&rng)) != 0) {
        printf("Error in RNG initialization: %d\n", ret);
        return ret;
    }

    /* Initialize RSA key */
    if ((ret = wc_InitRsaKey(&rsaKey, NULL)) != 0) {
        printf("Error in RSA key initialization: %d\n", ret);
        return ret;
    }

    /* Generate RSA key */
    if ((ret = wc_MakeRsaKey(&rsaKey, RSA_KEY_SIZE, RSA_PUBLIC_EXPONENT, &rng)) != 0) {
        printf("Error in RSA key generation: %d\n", ret);
        return ret;
    }

    /* Encrypt the message */
    if ((ret = wc_RsaPublicEncrypt((byte*)message, strlen(message), cipher, cipherLen, &rsaKey, &rng)) < 0) {
        printf("Error in RSA encryption: %d\n", ret);
        return ret;
    }

    /* Decrypt the message */
    if ((ret = wc_RsaPrivateDecrypt(cipher, ret, decrypted, decryptedLen, &rsaKey)) < 0) {
        printf("Error in RSA decryption: %d\n", ret);
        return ret;
    }

    /* Print the decrypted message */
    printf("Decrypted message: %s\n", decrypted);

    /* Clean up */
    wc_FreeRsaKey(&rsaKey);
    wc_FreeRng(&rng);
    wolfSSL_Cleanup();

    return 0;
}
**********************
int main() {
    int ret;
    RsaKey rsaKey;
    byte cipher[RSA_MAX_SIZE];
    byte plain[RSA_MAX_SIZE];
    word32 cipherLen = sizeof(cipher);
    word32 plainLen = sizeof(plain);

    const char* message = "Hello World";

    /* Initialize the library */
    wolfCrypt_Init();

    /* Initialize RNG */
    WC_RNG rng;
    if ((ret = wc_InitRng(&rng)) != 0) {
        printf("Error in RNG initialization: %d\n", ret);
        return ret;
    }

    /* Initialize RSA key */
    if ((ret = wc_InitRsaKey(&rsaKey, NULL)) != 0) {
        printf("Error in RSA key initialization: %d\n", ret);
        return ret;
    }

    /* Generate RSA key pair */
    if ((ret = wc_MakeRsaKey(&rsaKey, &rng, RSA_KEYSIZE_RSA, 65537)) != 0) {
        printf("Error in RSA key generation: %d\n", ret);
        return ret;
    }

    /* Encrypt the message */
    if ((ret = wc_RsaPublicEncrypt((const byte*)message, strlen(message), cipher, cipherLen, &rsaKey, &rng)) < 0) {
        printf("Error in RSA encryption: %d\n", ret);
        return ret;
    }

    /* Decrypt the message */
    if ((ret = wc_RsaPrivateDecrypt(cipher, ret, plain, plainLen, &rsaKey)) < 0) {
        printf("Error in RSA decryption: %d\n", ret);
        return ret;
    }

    /* Print the decrypted message */
    if (ret != strlen(message)) {
        printf("Decryption error: %d\n", ret);
    } else {
        printf("Decrypted message: %s\n", plain);
    }

    /* Clean up */
    wc_FreeRsaKey(&rsaKey);
    wc_FreeRng(&rng);
    wolfCrypt_Cleanup();

    return 0;
}
============================================================================================================
#include "stm32f4xx.h"
#include <string.h>

// Taille de la clé RSA en bits
#define RSA_KEY_BITS 2048

// Structure pour stocker les grands nombres
typedef struct {
  uint32_t data[RSA_KEY_BITS / 32];
  uint32_t size; 
} bignum;

// Multiplication de grands nombres
void mul(bignum *a, bignum *b, bignum *c) {
  // Implémentation omise pour brièveté 
}

// Elévation à la puissance modulaire 
void pow_mod(bignum *x, bignum *e, bignum *n, bignum *y) {
  // Implémentation omise pour brièveté
}

// Chiffrement RSA 
void rsa_encrypt(bignum *c, bignum *m, bignum *e, bignum *n) {
  pow_mod(c, m, e, n);
}

// Déchiffrement RSA
void rsa_decrypt(bignum *m, bignum *c, bignum *d, bignum *n) {
  pow_mod(m, c, d, n); 
}

int main() {

  bignum msg, enc, dec, e, d, n; 

  // Initialiser les grands nombres
  bignum_init(&msg);
  bignum_init(&enc);
  bignum_init(&dec);
  bignum_init(&e);
  bignum_init(&d);
  bignum_init(&n);

  // Charger les clés publique et privée
  
  // Clé publique 
  char pubkey[] = "B374FCCDAD2..."; 
  bignum_from_hex(&n, pubkey);
  bignum_set_ui(&e, 10001);

  // Clé privée
  char privkey[] = "1E0776AAEBDA...";
  bignum_from_hex(&d, privkey);

  // Chiffrer et déchiffrer
  
  // Message clair 
  char msg_str[] = "48656C6C6F20576F726C6421";
  bignum_from_hex(&msg, msg_str);

  // Chiffrer
  rsa_encrypt(&enc, &msg, &e, &n);

  // Déchiffrer
  rsa_decrypt(&dec, &enc, &d, &n);

  // Vérifier résultat
  if (bignum_equal(&msg, &dec)) {
    printf("RSA decryption successful!");
  } else {
    printf("RSA decryption failed!"); 
  }

  // Libérer la mémoire
  bignum_free(&msg);
  // etc.

  return 0;
}
===========
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <gmp.h>

// Taille des clés en bits
#define KEY_SIZE 2048 

// Taille des clés en octets
#define KEY_SIZE_OCTETS (KEY_SIZE / 8)

// Chiffre un message avec la clé publique
void rsa_encrypt(mpz_t c, mpz_t m, mpz_t e, mpz_t n) {
  mpz_powm(c, m, e, n); 
}

// Déchiffre un message avec la clé privée
void rsa_decrypt(mpz_t m, mpz_t c, mpz_t d, mpz_t n) {
  mpz_powm(m, c, d, n);
}

int main() {

  // Clés publique et privée
  mpz_t n, e, d;
  mpz_init(n);
  mpz_init(e);
  mpz_init(d);

  // Message à chiffrer
  mpz_t msg, enc, dec;
  mpz_init(msg);
  mpz_init(enc);
  mpz_init(dec);

  // Clé publique en hexadécimal
  char pubkey_hex[] = "B374FCCDAD22AE5824B9DA65C1F94E6F5BEC68507BC22411F352CF88190DEF954916806AB9DC8CE780924A5F4024BB9A5655FEA38C5D42470F49FF2D95F54A5F3F0C3C2D14C89F497BA00D33A7E30F59918FF117E3E47D26E985E74A4C6E0F3AB76040078D61F0CB0D5BF7C267A50B4DD01F0E6F4D3E7D0D2C5B5CA7C3E";

// Clé privée en hexadécimal  
char privkey_hex[] = "1E0776AAEBDAEC032A82837F2B054E5B7666AA3A926FE402E5FF6C88F73931410519F8C8A6097455AAB84F8AEE5268D728CF575CFB206812703171AE21420E022E050395AB98FECF67BDCC6FBD0FF10203156266A07D7DAC7852FB1956B358F06C597C3A8C6F3365AA3D49D1B19E7C4BEBD93D015F66FC5A6535F836330FE30267B5D";

  // Convertir les clés en bignums
  mpz_set_str(n, pubkey_hex, 16);
  mpz_set_str(e, "10001", 10);
  mpz_set_str(d, privkey_hex, 16);

  // Message en clair
  mpz_set_str(msg, "48656C6C6F20576F726C6421", 16);
  
  // Chiffrer le message
  rsa_encrypt(enc, msg, e, n);

  // Afficher le message chiffré
  gmp_printf("Message chiffré (hex) : %Zx\n", enc);

  // Déchiffrer le message
  rsa_decrypt(dec, enc, d, n);

  // Afficher le message déchiffré
  gmp_printf("Message déchiffré : %Zx\n", dec);

  // Libérer la mémoire
  mpz_clear(n);
  mpz_clear(e); 
  mpz_clear(d);
  mpz_clear(msg);
  mpz_clear(enc);
  mpz_clear(dec);

  return 0;
}
///////////////////////////////////////////////////////////////
#include "stm32f4xx.h"
#include <stdint.h>

// Taille de la clé RSA en bits
#define RSA_KEY_BITS 2048  

// Taille de la clé RSA en mots de 32 bits
#define RSA_KEY_WORDS (RSA_KEY_BITS / 32)

// Structure pour stocker les grands nombres
typedef struct {
  uint32_t data[RSA_KEY_WORDS];
  uint32_t size;  
} bignum;

// Initialisation d'un grand nombre
void bignum_init(bignum* n) {
  n->size = RSA_KEY_WORDS;
  for(int i=0; i<RSA_KEY_WORDS; i++) {
    n->data[i] = 0;
  }
}

// Affectation d'un grand nombre à partir d'un tableau
void bignum_from_array(bignum* n, uint32_t* src, uint32_t size) {
  for(int i=0; i<size; i++) {
    n->data[i] = src[i];
  }
  n->size = size;
}

// Conversion hexadecimal vers bignum
void bignum_from_hex(bignum* n, char* src) {
  uint32_t buffer[RSA_KEY_WORDS];
  int idx = 0;
  
  for(int i=0; i<strlen(src); i+=8) {
    char hex[9] = {0};
    strncpy(hex, src+i, 8);
    buffer[idx++] = strtoul(hex, NULL, 16);
  }
  
  bignum_from_array(n, buffer, idx);
}

// Addition de deux grands nombres
void bignum_add(bignum* a, bignum* b, bignum* c) {
  uint32_t carry = 0;
  for(int i=0; i<a->size; i++) {
    uint64_t temp = (uint64_t)a->data[i] + (uint64_t)b->data[i] + carry;
    c->data[i] = (uint32_t)temp;
    carry = temp >> 32;
  }
  c->size = a->size;
}

// Multiplication de deux grands nombres
void bignum_mul(bignum* a, bignum* b, bignum* c) {
  bignum_init(c);
  
  for(int i=0; i<a->size; i++) {
    uint64_t carry = 0;
    for(int j=0; j<b->size; j++) {
      uint64_t temp = (uint64_t)a->data[i] * (uint64_t)b->data[j] + carry;
      carry = temp >> 32;
      temp &= 0xFFFFFFFF;
      
      if(i+j < c->size) {
        c->data[i+j] += (uint32_t)temp;
      } else {
        carry += c->data[i+j] / (i+j+1);
        c->data[i+j] %= (i+j+1);
      }
    }
  }  
}

// Élévation à la puissance modulaire
void bignum_pow_mod(bignum* x, bignum* e, bignum* n, bignum* y) {

  bignum_init(y);
  bignum_from_array(y, x->data, x->size);
  
  for(int i=0; i<e->size; i++) {
    for(int j=0; j<32; j++) {
      if(e->data[i] & (1 << j)) {
        bignum_mul(y, y, y);
        bignum_mod(y, n);
      }
      
      bignum_mul(y, y, y);
      bignum_mod(y, n);
    }
  }
}

// Modulo entre deux grands nombres
void bignum_mod(bignum* a, bignum* n) {

  bignum tmp;
  bignum_init(&tmp);
  
  while(bignum_cmp(a, n) >= 0) {
    bignum_sub(a, a, n);
  } 
}

// Soustraction de deux grands nombres
void bignum_sub(bignum* a, bignum* b, bignum* c) {

  uint32_t borrow = 0;

  for(int i=0; i<a->size; i++) {
    uint64_t temp = (uint64_t)a->data[i] - (uint64_t)b->data[i] - borrow;

    if (temp & 0x100000000) {
      borrow = 1;
    } else {
      borrow = 0;
    }

    c->data[i] = (uint32_t)temp;
  }

  c->size = a->size;
}

// Comparaison de deux grands nombres
// Renvoie -1 si a < b, 0 si a == b, 1 si a > b
int bignum_cmp(bignum* a, bignum* b) {
  for(int i = a->size-1; i >= 0; i--) {
    if(a->data[i] > b->data[i]) return 1;
    if(a->data[i] < b->data[i]) return -1;
  }
  return 0; 
}

// Teste si deux grands nombres sont égaux  
int bignum_equal(bignum* a, bignum* b) {
  return (bignum_cmp(a, b) == 0);
}

// Chiffrement RSA
void rsa_encrypt(bignum* c, bignum* m, bignum* e, bignum* n) {
  bignum_pow_mod(c, m, e, n);
}

// Déchiffrement RSA
void rsa_decrypt(bignum* m, bignum* c, bignum* d, bignum* n) {
  bignum_pow_mod(m, c, d, n);
}

int main() {

  bignum msg, enc, dec, e, d, n;

  bignum_init(&msg);
  bignum_init(&enc); 
  bignum_init(&dec);
  bignum_init(&e);
  bignum_init(&d);
  bignum_init(&n);

  // Charger la clé publique
  char pubkey[] = "B374FCCDAD2...";
  bignum_from_hex(&n, pubkey); 
  bignum_from_array(&e, (uint32_t[RSA_KEY_WORDS]){10001}, 1);

  // Charger la clé privée  
  char privkey[] = "1E0776AAEBDA...";
  bignum_from_hex(&d, privkey);

  // Chiffrer et déchiffrer
  char msg_str[] = "48656C6C6F20576F726C6421";  
  bignum_from_hex(&msg, msg_str);

  rsa_encrypt(&enc, &msg, &e, &n);

  rsa_decrypt(&dec, &enc, &d, &n);

  if(bignum_equal(&msg, &dec)) {
    // Succès 
  } else {
    // Échec
  }

  return 0;
}
mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
#include "mbedtls/config.h"
#include "mbedtls/platform.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/rsa.h"

#define RSA_KEY_SIZE 2048

int main() {
    int ret;
    mbedtls_entropy_context entropy;
    mbedtls_ctr_drbg_context ctr_drbg;
    mbedtls_rsa_context rsa;

    // Initialisation
    mbedtls_entropy_init(&entropy);
    mbedtls_ctr_drbg_init(&ctr_drbg);
    mbedtls_rsa_init(&rsa, MBEDTLS_RSA_PKCS_V15, 0);

    // Seed the random number generator
    if ((ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, NULL, 0)) != 0) {
        // Handle error
    }

    // Generate RSA key pair
    if ((ret = mbedtls_rsa_gen_key(&rsa, mbedtls_ctr_drbg_random, &ctr_drbg, RSA_KEY_SIZE, 65537)) != 0) {
        // Handle error
    }

    // Sample message to be encrypted and decrypted
    unsigned char message[] = "Hello, this is a secret message!";
    size_t message_len = sizeof(message) - 1; // Exclude the null terminator

    // Buffer to hold the encrypted message
    unsigned char encrypted[MBEDTLS_MPI_MAX_SIZE];

    // Buffer to hold the decrypted message
    unsigned char decrypted[MBEDTLS_MPI_MAX_SIZE];

    // Encrypt the message using RSA public key
    if ((ret = mbedtls_rsa_pkcs1_encrypt(&rsa, mbedtls_ctr_drbg_random, &ctr_drbg, MBEDTLS_RSA_PUBLIC,
                                         message_len, message, encrypted)) != 0) {
        // Handle error
    }

    // Decrypt the message using RSA private key
    size_t decrypted_len;
    if ((ret = mbedtls_rsa_pkcs1_decrypt(&rsa, mbedtls_ctr_drbg_random, &ctr_drbg, MBEDTLS_RSA_PRIVATE,
                                         &decrypted_len, encrypted, decrypted, sizeof(decrypted))) != 0) {
        // Handle error
    }

    // Null-terminate the decrypted message
    decrypted[decrypted_len] = '\0';

    // Print the results
    printf("Original Message: %s\n", message);
    printf("Encrypted Message: ");
    for (size_t i = 0; i < decrypted_len; i++) {
        printf("%02X", encrypted[i]);
    }
    printf("\n");
    printf("Decrypted Message: %s\n", decrypted);

    // Cleanup
    mbedtls_rsa_free(&rsa);
    mbedtls_ctr_drbg_free(&ctr_drbg);
    mbedtls_entropy_free(&entropy);

    return 0;
}
pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
#include "mbedtls/config.h"
#include "mbedtls/platform.h"
#include "mbedtls/rsa.h"
#include "mbedtls/pk.h"
#include "mbedtls/error.h"

#include <stdio.h>
#include <string.h>

#define KEY_SIZE 2048
#define EXPONENT 65537

void print_error(const char *message, int error_code) {
    char error_buf[100];
    mbedtls_strerror(error_code, error_buf, sizeof(error_buf));
    printf("%s - Error code: %d - %s\n", message, error_code, error_buf);
}

int main() {
    mbedtls_rsa_context rsa;
    mbedtls_pk_context pk;
    unsigned char plain_text[16] = "Hello, world!";
    unsigned char encrypted[256] = {};
    unsigned char decrypted[16] = {};

    mbedtls_rsa_init(&rsa, MBEDTLS_RSA_PKCS_V15, 0);
    mbedtls_pk_init(&pk);

    int ret = mbedtls_rsa_gen_key(&rsa, mbedtls_ctr_drbg_random, NULL, KEY_SIZE, EXPONENT);
    if (ret != 0) {
        print_error("RSA key generation failed", ret);
        return -1;
    }

    ret = mbedtls_pk_setup(&pk, mbedtls_pk_info_from_type(MBEDTLS_PK_RSA));
    if (ret != 0) {
        print_error("PK setup failed", ret);
        return -1;
    }

    mbedtls_rsa_copy(mbedtls_pk_rsa(pk), &rsa);

    size_t olen = 0;
    ret = mbedtls_pk_encrypt(&pk, plain_text, sizeof(plain_text), encrypted, &olen, sizeof(encrypted), mbedtls_ctr_drbg_random, NULL);
    if (ret != 0) {
        print_error("Encryption failed", ret);
        return -1;
    }

    ret = mbedtls_pk_decrypt(&pk, encrypted, olen, decrypted, &olen, sizeof(decrypted), mbedtls_ctr_drbg_random, NULL);
    if (ret != 0) {
        print_error("Decryption failed", ret);
        return -1;
    }

    printf("Decrypted message: %s\n", decrypted);

    mbedtls_rsa_free(&rsa);
    mbedtls_pk_free(&pk);

    return 0;
}
--------------------------------------------------------
#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Convertit un caractère hexadécimal en valeur décimale
uint8_t hexToDecimal(char c) {
    if (c >= '0' && c <= '9')
        return c - '0';
    else if (c >= 'a' && c <= 'f')
        return 10 + c - 'a';
    else if (c >= 'A' && c <= 'F')
        return 10 + c - 'A';
    else
        return 0; // Caractère invalide
}

// Convertit une chaîne hexadécimale en une table de bytes
void hexStringToBytes(const char *hexString, uint8_t *bytes, size_t bufferSize) {
    size_t len = strlen(hexString);
    if (len % 2 != 0) {
        printf("Erreur : La chaîne hexadécimale doit avoir un nombre pair de caractères.\n");
        return;
    }

    if (len / 2 > bufferSize) {
        printf("Erreur : La taille du tampon est insuffisante pour contenir les bytes.\n");
        return;
    }

    for (size_t i = 0; i < len / 2; i++) {
        uint8_t highNibble = hexToDecimal(hexString[i * 2]);
        uint8_t lowNibble = hexToDecimal(hexString[i * 2 + 1]);
        bytes[i] = (highNibble << 4) | lowNibble;
    }
}

int main() {
    // Chaîne hexadécimale à convertir
    char table[] = "1a2B3C4d";

    // Calcul de la taille de la table de bytes nécessaire (la moitié de la taille de la chaîne)
    size_t bufferSize = strlen(table) / 2;
    uint8_t cip[bufferSize];

    // Conversion de la chaîne hexadécimale en table de bytes
    hexStringToBytes(table, cip, bufferSize);

    // Affichage des résultats
    printf("Chaîne hexadécimale : %s\n", table);
    printf("Table de bytes : ");
    for (size_t i = 0; i < bufferSize; i++) {
        printf("%02X ", cip[i]);
    }
    printf("\n");

    return 0;
}


