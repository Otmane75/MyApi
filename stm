#include <string.h>

void split(const char *str, const char *delimiters, char **tokens, int maxTokens) {
    char *token;
    int tokenIndex = 0;

    // Copie de la chaîne originale dans une variable modifiable
    char *strCopy = strdup(str);

    // Extraction du premier token
    token = strtok(strCopy, delimiters);

    // Tant qu'il y a des tokens et que le nombre maximum n'est pas atteint
    while (token != NULL && tokenIndex < maxTokens) {
        tokens[tokenIndex] = token;
        tokenIndex++;

        // Extraction du prochain token
        token = strtok(NULL, delimiters);
    }

    // Libération de la mémoire allouée pour la copie de la chaîne
    free(strCopy);
}

-----------------------------------------------------------------------------------------------
#include <stdio.h>

#define MAX_TOKENS 10

int main() {
    char str[] = "Hello,World,How,Are,You";
    char delimiters[] = ",";
    char *tokens[MAX_TOKENS];

    split(str, delimiters, tokens, MAX_TOKENS);

    for (int i = 0; i < MAX_TOKENS && tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
    }

    return 0;
}


------------------------------------------------
anyio==3.7.1
certifi==2023.5.7
charset-normalizer==3.2.0
colorama==0.4.6
copier==8.1.0
decorator==5.1.1
dunamai==1.18.0
exceptiongroup==1.1.2
flet==0.8.2
flet-core==0.8.2
flet-runtime==0.8.2
funcy==2.0
greenlet==2.0.2
h11==0.14.0
httpcore==0.17.3
httpx==0.24.1
idna==3.4
Jinja2==3.1.2
jinja2-ansible-filters==1.3.2
MarkupSafe==2.1.3
oauthlib==3.2.2
packaging==23.1
pathspec==0.11.1
plumbum==1.8.2
prompt-toolkit==3.0.39
pycryptodome==3.18.0
pydantic==1.10.11
Pygments==2.15.1
pypng==0.20220715.0
pyserial==3.5
pywin32==306
PyYAML==6.0
pyyaml-include==1.3.1
qrcode==7.4.2
questionary==1.10.0
repath==0.9.0
requests==2.31.0
six==1.16.0
sniffio==1.3.0
SQLAlchemy==2.0.19
typing-extensions==4.7.1
urllib3==2.0.3
watchdog==3.0.0
close_serial_ports()
wcwidth==0.2.6
websocket-client==1.6.1
websockets==11.0.3
----------------------------------------------------------------------
import os
import psutil

# Fonction pour terminer les activités de PySerial
def close_serial_ports():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name'])
            if 'python' in pinfo['name'].lower() and 'serial' in pinfo['name'].lower():
                os.kill(pinfo['pid'], 9)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Exemple d'utilisation
# Ferme toutes les connexions série avant d'utiliser une fonction spécifique

# Ferme toutes les connexions série en cours
close_serial_ports()

# Utilisez maintenant la fonction spécifique
# ... votre code ici ...


------------------------------------------------------------------------------------------
Clé privée :
{0xbe,0x84,0xff,0xa5,0x77,0x4,0xc6,0xfc,0x19,0x53,0x46,0xaf,0x61,0x9d,0x43,0x70,0x10,0x3a,0x73,0x3e,0xd8,0x68,0xd0,0x4a,0x5c,0xa4,0xb1,0xb2,0xc5,0x0,0x16,0x2a}
Clé publique :
{0x3a,0x6e,0xb6,0x78,0xb5,0xd5,0x3,0xa5,0x73,0xfb,0x96,0x22,0x94,0x5a,0x55,0x3f,0xe1,0x83,0x2f,0xc7,0x46,0xd0,0x38,0x15,0x9c,0xb7,0xde,0x61,0xd3,0x3f,0x28,0xdc,e8,0xf3,0xcf,0x66,0x31,0x2c,0x42,0xe9,0x9f,0x3d,0x6c,0x7d,0x24,0xc4,0x88,0x46,0x92,0x2,0xa1,0xbd,0x3b,0x53,0x7c,0x58,0x58,0x1a,0xbb,0x68,0xc,0xf4,0x9f,0x93}
-------------------------------------------------------------
Clé privée (hex) : 98a87b676185f120a909f832516bed5f1c2cb8832a64b4a4d9caad7744153fe4
Clé publique (hex) : 024260fd8af89f8d2c916c03243bb7e4177244b55b758fc379332db0cb0e5faba3
Clé privée RSA : {0x98, 0xa8, 0x7b, 0x67, 0x61, 0x85, 0xf1, 0x20, 0xa9, 0x09, 0xf8, 0x32, 0x51, 0x6b, 0xed, 0x5f, 0x1c, 0x2c, 0xb8, 
0x83, 0x2a, 0x64, 0xb4, 0xa4, 0xd9, 0xca, 0xad, 0x77, 0x44, 0x15, 0x3f, 0xe4}
Clé privée RSA : {0x02, 0x42, 0x60, 0xfd, 0x8a, 0xf8, 0x9f, 0x8d, 0x2c, 0x91, 0x6c, 0x03, 0x24, 0x3b, 0xb7, 0xe4, 0x17, 0x72, 0x44, 
0xb5, 0x5b, 0x75, 0x8f, 0xc3, 0x79, 0x33, 0x2d, 0xb0, 0xcb, 0x0e, 0x5f, 0xab, 0xa3}
