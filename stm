#include <string.h>

void split(const char *str, const char *delimiters, char **tokens, int maxTokens) {
    char *token;
    int tokenIndex = 0;

    // Copie de la chaîne originale dans une variable modifiable
    char *strCopy = strdup(str);

    // Extraction du premier token
    token = strtok(strCopy, delimiters);

    // Tant qu'il y a des tokens et que le nombre maximum n'est pas atteint
    while (token != NULL && tokenIndex < maxTokens) {
        tokens[tokenIndex] = token;
        tokenIndex++;

        // Extraction du prochain token
        token = strtok(NULL, delimiters);
    }

    // Libération de la mémoire allouée pour la copie de la chaîne
    free(strCopy);
}

-----------------------------------------------------------------------------------------------
#include <stdio.h>

#define MAX_TOKENS 10

int main() {
    char str[] = "Hello,World,How,Are,You";
    char delimiters[] = ",";
    char *tokens[MAX_TOKENS];

    split(str, delimiters, tokens, MAX_TOKENS);

    for (int i = 0; i < MAX_TOKENS && tokens[i] != NULL; i++) {
        printf("Token %d: %s\n", i, tokens[i]);
    }

    return 0;
}


------------------------------------------------
anyio==3.7.1
certifi==2023.5.7
charset-normalizer==3.2.0
colorama==0.4.6
copier==8.1.0
decorator==5.1.1
dunamai==1.18.0
exceptiongroup==1.1.2
flet==0.8.2
flet-core==0.8.2
flet-runtime==0.8.2
funcy==2.0
greenlet==2.0.2
h11==0.14.0
httpcore==0.17.3
httpx==0.24.1
idna==3.4
Jinja2==3.1.2
jinja2-ansible-filters==1.3.2
MarkupSafe==2.1.3
oauthlib==3.2.2
packaging==23.1
pathspec==0.11.1
plumbum==1.8.2
prompt-toolkit==3.0.39
pycryptodome==3.18.0
pydantic==1.10.11
Pygments==2.15.1
pypng==0.20220715.0
pyserial==3.5
pywin32==306
PyYAML==6.0
pyyaml-include==1.3.1
qrcode==7.4.2
questionary==1.10.0
repath==0.9.0
requests==2.31.0
six==1.16.0
sniffio==1.3.0
SQLAlchemy==2.0.19
typing-extensions==4.7.1
urllib3==2.0.3
watchdog==3.0.0
close_serial_ports()
wcwidth==0.2.6
websocket-client==1.6.1
websockets==11.0.3
----------------------------------------------------------------------
import os
import psutil

# Fonction pour terminer les activités de PySerial
def close_serial_ports():
    for proc in psutil.process_iter():
        try:
            pinfo = proc.as_dict(attrs=['pid', 'name'])
            if 'python' in pinfo['name'].lower() and 'serial' in pinfo['name'].lower():
                os.kill(pinfo['pid'], 9)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass

# Exemple d'utilisation
# Ferme toutes les connexions série avant d'utiliser une fonction spécifique

# Ferme toutes les connexions série en cours
close_serial_ports()

# Utilisez maintenant la fonction spécifique
# ... votre code ici ...


